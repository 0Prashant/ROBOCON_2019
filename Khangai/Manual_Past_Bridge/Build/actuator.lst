ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"actuator.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN12Discrete_PIDD2Ev,"axG",%progbits,_ZN12Discrete_PIDD5Ev,comdat
  18              		.align	1
  19              		.weak	_ZN12Discrete_PIDD2Ev
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_ZN12Discrete_PIDD2Ev:
  26              	.LFB375:
  27              		.file 1 "Core/Inc/utils\\control/pid_algorithms.h"
   1:Core/Inc/utils\control/pid_algorithms.h **** #ifndef _PID_ALGORITHMS_H_
   2:Core/Inc/utils\control/pid_algorithms.h **** #define _PID_ALGORITHMS_H_
   3:Core/Inc/utils\control/pid_algorithms.h **** 
   4:Core/Inc/utils\control/pid_algorithms.h **** #include <stdint.h>
   5:Core/Inc/utils\control/pid_algorithms.h **** 
   6:Core/Inc/utils\control/pid_algorithms.h **** class PID_Algorithm
   7:Core/Inc/utils\control/pid_algorithms.h **** {
   8:Core/Inc/utils\control/pid_algorithms.h **** public:
   9:Core/Inc/utils\control/pid_algorithms.h ****         PID_Algorithm() { set_PID(0,0,0); }
  10:Core/Inc/utils\control/pid_algorithms.h ****         PID_Algorithm(float p, float i, float d) { set_PID(p,i,d); }
  11:Core/Inc/utils\control/pid_algorithms.h ****         virtual float compute(float error, uint32_t dt_millis) = 0;
  12:Core/Inc/utils\control/pid_algorithms.h **** 
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_P(float p) { p_ = p; }
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
  16:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
  17:Core/Inc/utils\control/pid_algorithms.h ****                 set_P(p);
  18:Core/Inc/utils\control/pid_algorithms.h ****                 set_I(i);
  19:Core/Inc/utils\control/pid_algorithms.h ****                 set_D(d);
  20:Core/Inc/utils\control/pid_algorithms.h ****         }
  21:Core/Inc/utils\control/pid_algorithms.h ****         float get_P() { return p_; }
  22:Core/Inc/utils\control/pid_algorithms.h ****         float get_I() { return i_; }
  23:Core/Inc/utils\control/pid_algorithms.h ****         float get_D() { return d_; }
  24:Core/Inc/utils\control/pid_algorithms.h **** 
  25:Core/Inc/utils\control/pid_algorithms.h ****         void set_Limits(float max_out, float min_out) {
  26:Core/Inc/utils\control/pid_algorithms.h ****                 max_ = max_out;
  27:Core/Inc/utils\control/pid_algorithms.h ****                 min_ = min_out;
  28:Core/Inc/utils\control/pid_algorithms.h ****         }
  29:Core/Inc/utils\control/pid_algorithms.h **** 
  30:Core/Inc/utils\control/pid_algorithms.h ****         float get_Upper() { return max_; }
  31:Core/Inc/utils\control/pid_algorithms.h ****         float get_Lower() { return min_; }
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 2


  32:Core/Inc/utils\control/pid_algorithms.h **** 
  33:Core/Inc/utils\control/pid_algorithms.h ****         virtual ~PID_Algorithm() { }
  34:Core/Inc/utils\control/pid_algorithms.h **** 
  35:Core/Inc/utils\control/pid_algorithms.h **** protected:
  36:Core/Inc/utils\control/pid_algorithms.h ****         float p_, i_, d_;
  37:Core/Inc/utils\control/pid_algorithms.h ****         float max_, min_;
  38:Core/Inc/utils\control/pid_algorithms.h **** };
  39:Core/Inc/utils\control/pid_algorithms.h **** 
  40:Core/Inc/utils\control/pid_algorithms.h **** class Discrete_PID : public PID_Algorithm
  41:Core/Inc/utils\control/pid_algorithms.h **** {
  42:Core/Inc/utils\control/pid_algorithms.h **** public:
  43:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID(float p, float i, float d) :
  44:Core/Inc/utils\control/pid_algorithms.h ****         PID_Algorithm(p, i, d) {
  45:Core/Inc/utils\control/pid_algorithms.h ****                 l_output_ = 0;
  46:Core/Inc/utils\control/pid_algorithms.h ****                 l_err_ = 0;
  47:Core/Inc/utils\control/pid_algorithms.h ****                 ll_err_ = 0;
  48:Core/Inc/utils\control/pid_algorithms.h ****         }
  49:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID() {
  50:Core/Inc/utils\control/pid_algorithms.h ****                 l_output_ = 0;
  51:Core/Inc/utils\control/pid_algorithms.h ****                 l_err_ = 0;
  52:Core/Inc/utils\control/pid_algorithms.h ****                 ll_err_ = 0;
  53:Core/Inc/utils\control/pid_algorithms.h ****         }
  54:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID(Discrete_PID &&) = default;
  55:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID(const Discrete_PID &) = default;
  56:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID &operator=(Discrete_PID &&) = default;
  57:Core/Inc/utils\control/pid_algorithms.h ****         Discrete_PID &operator=(const Discrete_PID &) = default;
  58:Core/Inc/utils\control/pid_algorithms.h ****         ~Discrete_PID() { }
  28              		.loc 1 58 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.loc 1 58 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE375:
  39              		.weak	_ZN12Discrete_PIDD1Ev
  40              		.thumb_set _ZN12Discrete_PIDD1Ev,_ZN12Discrete_PIDD2Ev
  41              		.section	.text._ZN12Discrete_PID7computeEfm,"axG",%progbits,_ZN12Discrete_PID7computeEfm,comdat
  42              		.align	1
  43              		.weak	_ZN12Discrete_PID7computeEfm
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu fpv4-sp-d16
  49              	_ZN12Discrete_PID7computeEfm:
  50              	.LFB378:
  59:Core/Inc/utils\control/pid_algorithms.h **** 
  60:Core/Inc/utils\control/pid_algorithms.h ****         /* *** PID Algorithm Description ***
  61:Core/Inc/utils\control/pid_algorithms.h ****          * 1) Discrete PID control Algorithm
  62:Core/Inc/utils\control/pid_algorithms.h ****          * 2) Integrator Method : Forward Euler
  63:Core/Inc/utils\control/pid_algorithms.h ****          * 3) //! Filtered Derivative not used
  64:Core/Inc/utils\control/pid_algorithms.h ****          * 4) Output Limited
  65:Core/Inc/utils\control/pid_algorithms.h ****          * 5) Form : Parallel
  66:Core/Inc/utils\control/pid_algorithms.h ****          * 6) Compensator Formula : Dz = P + I*Ts/(z-1) + D*(z-1)/(Ts*z)
  67:Core/Inc/utils\control/pid_algorithms.h ****          * 7) In Time Domain :
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 3


  68:Core/Inc/utils\control/pid_algorithms.h ****          *      y(t) - y(t-1) = a*x(t) + b*x(t-1) + c*x(t-2)
  69:Core/Inc/utils\control/pid_algorithms.h ****          *      where,
  70:Core/Inc/utils\control/pid_algorithms.h ****          *              a = P + D/Ts
  71:Core/Inc/utils\control/pid_algorithms.h ****          *              b = -P + I*Ts - 2*D/Ts
  72:Core/Inc/utils\control/pid_algorithms.h ****          *              c = D/Ts
  73:Core/Inc/utils\control/pid_algorithms.h ****          */
  74:Core/Inc/utils\control/pid_algorithms.h ****         float compute(float error, uint32_t dt_millis) {
  51              		.loc 1 74 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.LVL1:
  75:Core/Inc/utils\control/pid_algorithms.h ****                 float Ts = (float)dt_millis / 1000.0;
  57              		.loc 1 75 0
  58 0000 07EE901A 		vmov	s15, r1	@ int
  59 0004 F8EE676A 		vcvt.f32.u32	s13, s15
  60 0008 DFED217A 		vldr.32	s15, .L11
  61 000c 86EEA77A 		vdiv.f32	s14, s13, s15
  62              	.LVL2:
  63              	.LBB265:
  64              	.LBB266:
  21:Core/Inc/utils\control/pid_algorithms.h ****         float get_I() { return i_; }
  65              		.loc 1 21 0
  66 0010 90ED016A 		vldr.32	s12, [r0, #4]
  67              	.LVL3:
  68              	.LBE266:
  69              	.LBE265:
  70              	.LBB267:
  71              	.LBB268:
  22:Core/Inc/utils\control/pid_algorithms.h ****         float get_D() { return d_; }
  72              		.loc 1 22 0
  73 0014 D0ED025A 		vldr.32	s11, [r0, #8]
  74              	.LVL4:
  75              	.LBE268:
  76              	.LBE267:
  77              	.LBB269:
  78              	.LBB270:
  23:Core/Inc/utils\control/pid_algorithms.h **** 
  79              		.loc 1 23 0
  80 0018 D0ED037A 		vldr.32	s15, [r0, #12]
  81              	.LVL5:
  82              	.LBE270:
  83              	.LBE269:
  76:Core/Inc/utils\control/pid_algorithms.h ****                 
  77:Core/Inc/utils\control/pid_algorithms.h ****                 float P = get_P();
  78:Core/Inc/utils\control/pid_algorithms.h ****                 float I = get_I();
  79:Core/Inc/utils\control/pid_algorithms.h ****                 // We assume that Ts is never zero
  80:Core/Inc/utils\control/pid_algorithms.h ****                 float D_by_Ts = get_D() / Ts;
  84              		.loc 1 80 0
  85 001c C7EE876A 		vdiv.f32	s13, s15, s14
  86              	.LVL6:
  81:Core/Inc/utils\control/pid_algorithms.h **** 
  82:Core/Inc/utils\control/pid_algorithms.h ****                 float a = P + D_by_Ts;
  87              		.loc 1 82 0
  88 0020 76EE867A 		vadd.f32	s15, s13, s12
  89              	.LVL7:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 4


  83:Core/Inc/utils\control/pid_algorithms.h ****                 float b = -P + I*Ts - 2*D_by_Ts;
  90              		.loc 1 83 0
  91 0024 27EE257A 		vmul.f32	s14, s14, s11
  92              	.LVL8:
  93 0028 37EE467A 		vsub.f32	s14, s14, s12
  94 002c 36EEA66A 		vadd.f32	s12, s13, s13
  95 0030 37EE467A 		vsub.f32	s14, s14, s12
  96              	.LVL9:
  84:Core/Inc/utils\control/pid_algorithms.h ****                 float c = D_by_Ts;
  85:Core/Inc/utils\control/pid_algorithms.h **** 
  86:Core/Inc/utils\control/pid_algorithms.h ****                 l_output_ += a*error + b*l_err_ + c*ll_err_;
  97              		.loc 1 86 0
  98 0034 67EE807A 		vmul.f32	s15, s15, s0
  99              	.LVL10:
 100 0038 90ED076A 		vldr.32	s12, [r0, #28]
 101 003c 26EE077A 		vmul.f32	s14, s12, s14
 102              	.LVL11:
 103 0040 77EE877A 		vadd.f32	s15, s15, s14
 104 0044 90ED087A 		vldr.32	s14, [r0, #32]
 105 0048 67EE266A 		vmul.f32	s13, s14, s13
 106              	.LVL12:
 107 004c 77EEA67A 		vadd.f32	s15, s15, s13
 108 0050 90ED067A 		vldr.32	s14, [r0, #24]
 109 0054 77EE877A 		vadd.f32	s15, s15, s14
 110 0058 C0ED067A 		vstr.32	s15, [r0, #24]
 111              	.LVL13:
 112              	.LBB271:
 113              	.LBB272:
  30:Core/Inc/utils\control/pid_algorithms.h ****         float get_Lower() { return min_; }
 114              		.loc 1 30 0
 115 005c 90ED047A 		vldr.32	s14, [r0, #16]
 116              	.LVL14:
 117              	.LBE272:
 118              	.LBE271:
  87:Core/Inc/utils\control/pid_algorithms.h **** 
  88:Core/Inc/utils\control/pid_algorithms.h ****                 if (l_output_ > get_Upper()) {
 119              		.loc 1 88 0
 120 0060 F4EEC77A 		vcmpe.f32	s15, s14
 121 0064 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 122 0068 09DC     		bgt	.L10
 123              	.LVL15:
 124              	.LBB273:
 125              	.LBB274:
  31:Core/Inc/utils\control/pid_algorithms.h **** 
 126              		.loc 1 31 0
 127 006a 90ED057A 		vldr.32	s14, [r0, #20]
 128              	.LVL16:
 129              	.LBE274:
 130              	.LBE273:
  89:Core/Inc/utils\control/pid_algorithms.h ****                         l_output_ = get_Upper();
  90:Core/Inc/utils\control/pid_algorithms.h ****                 }
  91:Core/Inc/utils\control/pid_algorithms.h ****                 else if (l_output_ < get_Lower()) {
 131              		.loc 1 91 0
 132 006e F4EEC77A 		vcmpe.f32	s15, s14
 133 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 134 0076 04D5     		bpl	.L5
  92:Core/Inc/utils\control/pid_algorithms.h ****                         l_output_ = get_Lower();
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 5


 135              		.loc 1 92 0
 136 0078 80ED067A 		vstr.32	s14, [r0, #24]
 137 007c 01E0     		b	.L5
 138              	.L10:
  89:Core/Inc/utils\control/pid_algorithms.h ****                         l_output_ = get_Upper();
 139              		.loc 1 89 0
 140 007e 80ED067A 		vstr.32	s14, [r0, #24]
 141              	.L5:
  93:Core/Inc/utils\control/pid_algorithms.h ****                 }
  94:Core/Inc/utils\control/pid_algorithms.h **** 
  95:Core/Inc/utils\control/pid_algorithms.h ****                 ll_err_ = l_err_;
 142              		.loc 1 95 0
 143 0082 80ED086A 		vstr.32	s12, [r0, #32]
  96:Core/Inc/utils\control/pid_algorithms.h ****                 l_err_ = error;
 144              		.loc 1 96 0
 145 0086 80ED070A 		vstr.32	s0, [r0, #28]
  97:Core/Inc/utils\control/pid_algorithms.h **** 
  98:Core/Inc/utils\control/pid_algorithms.h ****                 return l_output_;
  99:Core/Inc/utils\control/pid_algorithms.h ****         }
 146              		.loc 1 99 0
 147 008a 90ED060A 		vldr.32	s0, [r0, #24]
 148              	.LVL17:
 149 008e 7047     		bx	lr
 150              	.L12:
 151              		.align	2
 152              	.L11:
 153 0090 00007A44 		.word	1148846080
 154              		.cfi_endproc
 155              	.LFE378:
 157              		.section	.text._ZN8ActuatorD2Ev,"axG",%progbits,_ZN8ActuatorD5Ev,comdat
 158              		.align	1
 159              		.weak	_ZN8ActuatorD2Ev
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	_ZN8ActuatorD2Ev:
 166              	.LFB433:
 167              		.file 2 "Core/Inc/parts/actuator.h"
   1:Core/Inc/parts/actuator.h **** /*
   2:Core/Inc/parts/actuator.h ****  * actuator.h
   3:Core/Inc/parts/actuator.h ****  *
   4:Core/Inc/parts/actuator.h ****  * Created : 1/2/2019
   5:Core/Inc/parts/actuator.h ****  *  Author : n-is
   6:Core/Inc/parts/actuator.h ****  *   email : 073bex422.nischal@pcampus.edu.np
   7:Core/Inc/parts/actuator.h ****  */
   8:Core/Inc/parts/actuator.h **** 
   9:Core/Inc/parts/actuator.h **** #ifndef _ACTUATOR_H_
  10:Core/Inc/parts/actuator.h **** #define _ACTUATOR_H_
  11:Core/Inc/parts/actuator.h **** 
  12:Core/Inc/parts/actuator.h **** #include "wheel.h"
  13:Core/Inc/parts/actuator.h **** #include "vec3.h"
  14:Core/Inc/parts/actuator.h **** 
  15:Core/Inc/parts/actuator.h **** class Actuator final
  16:Core/Inc/parts/actuator.h **** {
  17:Core/Inc/parts/actuator.h **** public:
  18:Core/Inc/parts/actuator.h ****         Actuator(Actuator &&) = default;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 6


  19:Core/Inc/parts/actuator.h ****         Actuator(const Actuator &) = default;
  20:Core/Inc/parts/actuator.h ****         Actuator &operator=(Actuator &&) = default;
  21:Core/Inc/parts/actuator.h ****         Actuator &operator=(const Actuator &) = default;
  22:Core/Inc/parts/actuator.h ****         ~Actuator() { }
 168              		.loc 2 22 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 173              	.LVL18:
 174              	.LBB275:
 175              		.loc 2 22 0
 176 0000 0246     		mov	r2, r0
 177 0002 28B1     		cbz	r0, .L14
 178              		.loc 2 22 0 is_stmt 0 discriminator 1
 179 0004 00F13003 		add	r3, r0, #48
 180              	.L15:
 181              		.loc 2 22 0 discriminator 6
 182 0008 9A42     		cmp	r2, r3
 183 000a 01D0     		beq	.L14
 184              		.loc 2 22 0 discriminator 5
 185 000c 0C3B     		subs	r3, r3, #12
 186              	.LVL19:
 187 000e FBE7     		b	.L15
 188              	.LVL20:
 189              	.L14:
 190              	.LBE275:
 191              		.loc 2 22 0 discriminator 7
 192 0010 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE433:
 196              		.weak	_ZN8ActuatorD1Ev
 197              		.thumb_set _ZN8ActuatorD1Ev,_ZN8ActuatorD2Ev
 198              		.section	.text._ZN3MatD2Ev,"axG",%progbits,_ZN3MatD5Ev,comdat
 199              		.align	1
 200              		.weak	_ZN3MatD2Ev
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	_ZN3MatD2Ev:
 207              	.LFB443:
 208              		.file 3 "Core/Inc/utils\\math/mat.h"
   1:Core/Inc/utils\math/mat.h **** /*
   2:Core/Inc/utils\math/mat.h ****  * mat.h
   3:Core/Inc/utils\math/mat.h ****  * 
   4:Core/Inc/utils\math/mat.h ****  * Created : 12/31/2018
   5:Core/Inc/utils\math/mat.h ****  *  Author : n-is
   6:Core/Inc/utils\math/mat.h ****  *   email : 073bex422.nischal@pcampus.edu.np
   7:Core/Inc/utils\math/mat.h ****  */
   8:Core/Inc/utils\math/mat.h **** 
   9:Core/Inc/utils\math/mat.h **** #ifndef _MAT_H_
  10:Core/Inc/utils\math/mat.h **** #define _MAT_H_
  11:Core/Inc/utils\math/mat.h **** 
  12:Core/Inc/utils\math/mat.h **** #include <math.h>
  13:Core/Inc/utils\math/mat.h **** #include "vec3.h"
  14:Core/Inc/utils\math/mat.h **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 7


  15:Core/Inc/utils\math/mat.h **** #define MAX_MATRIX_ROWS         4
  16:Core/Inc/utils\math/mat.h **** #define MAX_MATRIX_COLS         4
  17:Core/Inc/utils\math/mat.h **** 
  18:Core/Inc/utils\math/mat.h **** class Mat
  19:Core/Inc/utils\math/mat.h **** {
  20:Core/Inc/utils\math/mat.h **** public:
  21:Core/Inc/utils\math/mat.h ****         Mat() : Mat(0,0) { }
  22:Core/Inc/utils\math/mat.h ****         
  23:Core/Inc/utils\math/mat.h ****         template <size_t M, size_t N>
  24:Core/Inc/utils\math/mat.h ****         Mat(const float (&mat)[M][N]) : Mat(M,N){
  25:Core/Inc/utils\math/mat.h ****                 fill(mat);
  26:Core/Inc/utils\math/mat.h ****         }
  27:Core/Inc/utils\math/mat.h **** 
  28:Core/Inc/utils\math/mat.h ****         Mat(uint8_t rows, uint8_t columns);
  29:Core/Inc/utils\math/mat.h ****         Mat(Mat &&) = default;
  30:Core/Inc/utils\math/mat.h ****         Mat &operator=(Mat &&) = default;
  31:Core/Inc/utils\math/mat.h ****         ~Mat() { }
 209              		.loc 3 31 0 is_stmt 1
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL21:
 215              		.loc 3 31 0
 216 0000 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE443:
 220              		.weak	_ZN3MatD1Ev
 221              		.thumb_set _ZN3MatD1Ev,_ZN3MatD2Ev
 222              		.section	.text.__tcf_0,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 227              		.fpu fpv4-sp-d16
 229              	__tcf_0:
 230              	.LFB499:
 231              		.file 4 "Core/Src/parts/actuator.cpp"
   1:Core/Src/parts/actuator.cpp **** /*
   2:Core/Src/parts/actuator.cpp ****  * actuator.cpp
   3:Core/Src/parts/actuator.cpp ****  *
   4:Core/Src/parts/actuator.cpp ****  * Created : 1/2/2019
   5:Core/Src/parts/actuator.cpp ****  *  Author : n-is
   6:Core/Src/parts/actuator.cpp ****  *   email : 073bex422.nischal@pcampus.edu.np
   7:Core/Src/parts/actuator.cpp ****  */
   8:Core/Src/parts/actuator.cpp **** 
   9:Core/Src/parts/actuator.cpp **** #include <math.h>
  10:Core/Src/parts/actuator.cpp **** 
  11:Core/Src/parts/actuator.cpp **** #include "actuator.h"
  12:Core/Src/parts/actuator.cpp **** #include "pid_algorithms.h"
  13:Core/Src/parts/actuator.cpp **** #include "pid.h"
  14:Core/Src/parts/actuator.cpp **** #include "mat.h"
  15:Core/Src/parts/actuator.cpp **** 
  16:Core/Src/parts/actuator.cpp **** #define WHEEL_RADIUS    (0.0675)
  17:Core/Src/parts/actuator.cpp **** 
  18:Core/Src/parts/actuator.cpp **** 
  19:Core/Src/parts/actuator.cpp **** // We should make sure that the Actuator ony have one instance and it is properly
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 8


  20:Core/Src/parts/actuator.cpp **** // instantiated
  21:Core/Src/parts/actuator.cpp **** Actuator& Actuator::get_Instance()
  22:Core/Src/parts/actuator.cpp **** {
  23:Core/Src/parts/actuator.cpp ****         static Actuator sBase_Instance;
  24:Core/Src/parts/actuator.cpp **** 
  25:Core/Src/parts/actuator.cpp ****         return sBase_Instance;
  26:Core/Src/parts/actuator.cpp **** }
  27:Core/Src/parts/actuator.cpp **** 
  28:Core/Src/parts/actuator.cpp **** 
  29:Core/Src/parts/actuator.cpp **** /**
  30:Core/Src/parts/actuator.cpp ****  * @brief Function that initializes all the required components for the robot's
  31:Core/Src/parts/actuator.cpp ****  *        actuator(omni-base)
  32:Core/Src/parts/actuator.cpp ****  * @retval None
  33:Core/Src/parts/actuator.cpp ****  * 
  34:Core/Src/parts/actuator.cpp ****  * 
  35:Core/Src/parts/actuator.cpp ****  * <pre>
  36:Core/Src/parts/actuator.cpp ****  * Tasks performed by this function
  37:Core/Src/parts/actuator.cpp ****  * 1) Call the devices initializations in correct order
  38:Core/Src/parts/actuator.cpp ****  * 2) Call the software initializations for utilities like pid for wheels
  39:Core/Src/parts/actuator.cpp ****  * </pre>
  40:Core/Src/parts/actuator.cpp ****  */
  41:Core/Src/parts/actuator.cpp **** int Actuator::init()
  42:Core/Src/parts/actuator.cpp **** {
  43:Core/Src/parts/actuator.cpp ****         // Initialize all wheels of the robot
  44:Core/Src/parts/actuator.cpp ****         wheels_Init();
  45:Core/Src/parts/actuator.cpp ****         // Initializes PID parameters for all wheels
  46:Core/Src/parts/actuator.cpp ****         pid_Init();
  47:Core/Src/parts/actuator.cpp **** 
  48:Core/Src/parts/actuator.cpp ****         return 0;
  49:Core/Src/parts/actuator.cpp **** }
  50:Core/Src/parts/actuator.cpp **** 
  51:Core/Src/parts/actuator.cpp **** 
  52:Core/Src/parts/actuator.cpp **** const float gCoupling_Array[4][3] = {{ 1,  1, 1 },
  53:Core/Src/parts/actuator.cpp ****                                      { 1, -1, 1 },
  54:Core/Src/parts/actuator.cpp ****                                      {-1, -1, 1 },
  55:Core/Src/parts/actuator.cpp ****                                      {-1,  1, 1 }};
  56:Core/Src/parts/actuator.cpp **** 
  57:Core/Src/parts/actuator.cpp **** static const Mat gCoupling_Matrix(gCoupling_Array);
  58:Core/Src/parts/actuator.cpp **** 
  59:Core/Src/parts/actuator.cpp **** const float gInverse_Coupling_Array[3][4] = {{ 0.25,  0.25, -0.25, -0.25 },
  60:Core/Src/parts/actuator.cpp ****                                              { 0.25, -0.25, -0.25,  0.25 },
  61:Core/Src/parts/actuator.cpp ****                                              { 0.25,  0.25,  0.25,  0.25 }};
  62:Core/Src/parts/actuator.cpp **** 
  63:Core/Src/parts/actuator.cpp **** static const Mat gInverse_Coupling_Matrix(gInverse_Coupling_Array);
  64:Core/Src/parts/actuator.cpp **** /**
  65:Core/Src/parts/actuator.cpp ****  * @brief Function that actuate the robot's base(omni-base)
  66:Core/Src/parts/actuator.cpp ****  * @param vel : An vector that holds vx, vy and omega
  67:Core/Src/parts/actuator.cpp ****  * @param dt_millis : The time period at which this function is called periodically
  68:Core/Src/parts/actuator.cpp ****  * @retval A vector that holds vx, vy and omega of the base in the last frame
  69:Core/Src/parts/actuator.cpp ****  * 
  70:Core/Src/parts/actuator.cpp ****  * 
  71:Core/Src/parts/actuator.cpp ****  * <pre>
  72:Core/Src/parts/actuator.cpp ****  * Tasks performed by this function
  73:Core/Src/parts/actuator.cpp ****  * 1) Calculates omegas of each wheel to reach the given velocities using the
  74:Core/Src/parts/actuator.cpp ****  *    Coupling Matrix
  75:Core/Src/parts/actuator.cpp ****  * 2) Measure omega of each wheels
  76:Core/Src/parts/actuator.cpp ****  * 3) Compute error
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 9


  77:Core/Src/parts/actuator.cpp ****  * 4) Compute PID using available PID_Algorithm
  78:Core/Src/parts/actuator.cpp ****  * 5) set Omega of each wheel
  79:Core/Src/parts/actuator.cpp ****  * 6) update new omegas of all wheels at once
  80:Core/Src/parts/actuator.cpp ****  * 7) Calculates vx, vy and rw of the base from the measured omegas of each
  81:Core/Src/parts/actuator.cpp ****  *    wheel using the inverse Coupling Matrix
  82:Core/Src/parts/actuator.cpp ****  * </pre>
  83:Core/Src/parts/actuator.cpp ****  */
  84:Core/Src/parts/actuator.cpp **** Vec3<float> Actuator::actuate(Vec3<float> vel, uint32_t dt_millis)
  85:Core/Src/parts/actuator.cpp **** {
  86:Core/Src/parts/actuator.cpp ****         Mat wheels_omegas = gCoupling_Matrix * vel;
  87:Core/Src/parts/actuator.cpp ****         // w = v / r
  88:Core/Src/parts/actuator.cpp ****         float set_points[4] = { wheels_omegas.at(0,0) / (float)(WHEEL_RADIUS),
  89:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(1,0) / (float)(WHEEL_RADIUS),
  90:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(2,0) / (float)(WHEEL_RADIUS),
  91:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(3,0) / (float)(WHEEL_RADIUS) };
  92:Core/Src/parts/actuator.cpp **** 
  93:Core/Src/parts/actuator.cpp ****         // This is motor tuning part
  94:Core/Src/parts/actuator.cpp ****         // Omega is created as 2D array with single column so that we can easily
  95:Core/Src/parts/actuator.cpp ****         // convert it to matrix form later on
  96:Core/Src/parts/actuator.cpp ****         float omega[4][1];
  97:Core/Src/parts/actuator.cpp ****         float error[4];
  98:Core/Src/parts/actuator.cpp ****         float voltage[4];
  99:Core/Src/parts/actuator.cpp ****         float new_omega[4];
 100:Core/Src/parts/actuator.cpp ****         PID *pid;
 101:Core/Src/parts/actuator.cpp ****         float max_voltage;
 102:Core/Src/parts/actuator.cpp ****         float max_omega;
 103:Core/Src/parts/actuator.cpp **** 
 104:Core/Src/parts/actuator.cpp ****         // printf("%ld   ", HAL_GetTick());
 105:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 106:Core/Src/parts/actuator.cpp ****                 // if (i != 2)
 107:Core/Src/parts/actuator.cpp ****                 //         set_points[i] = 0;
 108:Core/Src/parts/actuator.cpp **** 
 109:Core/Src/parts/actuator.cpp ****                 omega[i][0] = wheels_[i].get_Omega(dt_millis);
 110:Core/Src/parts/actuator.cpp ****                 error[i] = set_points[i] - omega[i][0];
 111:Core/Src/parts/actuator.cpp ****                 pid = wheels_[i].get_PIDController();
 112:Core/Src/parts/actuator.cpp ****                 // The controller's output is voltage
 113:Core/Src/parts/actuator.cpp ****                 voltage[i] = pid->compute_PID(error[i], dt_millis);
 114:Core/Src/parts/actuator.cpp **** 
 115:Core/Src/parts/actuator.cpp ****                 // Max Omega corresponds to the max voltage value
 116:Core/Src/parts/actuator.cpp ****                 max_voltage = fabsf(pid->get_Algorithm()->get_Upper());
 117:Core/Src/parts/actuator.cpp ****                 max_omega = wheels_[i].get_MaxOmega();
 118:Core/Src/parts/actuator.cpp ****                 // Controller's output voltage is converted to the corresponding
 119:Core/Src/parts/actuator.cpp ****                 // omega according to linear relation since we will just be
 120:Core/Src/parts/actuator.cpp ****                 // output-ting voltage and this is just a abstraction of the
 121:Core/Src/parts/actuator.cpp ****                 // motor driver
 122:Core/Src/parts/actuator.cpp ****                 new_omega[i] = voltage[i] * max_omega / max_voltage;
 123:Core/Src/parts/actuator.cpp **** 
 124:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(new_omega[i]);
 125:Core/Src/parts/actuator.cpp ****                 // printf("(%ld, %ld, %ld)  ", (int32_t)(set_points[i]*1000), (int32_t)(omega[i][0]
 126:Core/Src/parts/actuator.cpp ****         }
 127:Core/Src/parts/actuator.cpp ****         // printf("\n");
 128:Core/Src/parts/actuator.cpp **** 
 129:Core/Src/parts/actuator.cpp ****         // We don't want to delete the poninter since it was not us who allocated it
 130:Core/Src/parts/actuator.cpp ****         pid = 0;
 131:Core/Src/parts/actuator.cpp **** 
 132:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 133:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 10


 134:Core/Src/parts/actuator.cpp ****         }
 135:Core/Src/parts/actuator.cpp **** 
 136:Core/Src/parts/actuator.cpp ****         // We can measure the velocity of the robot by this method
 137:Core/Src/parts/actuator.cpp ****         // We can also use this for determining wheel's slippage
 138:Core/Src/parts/actuator.cpp ****         // !yet to implement
 139:Core/Src/parts/actuator.cpp ****         Mat measured = gInverse_Coupling_Matrix * Mat(omega);
 140:Core/Src/parts/actuator.cpp **** 
 141:Core/Src/parts/actuator.cpp ****         Vec3<float> last_vel(measured.at(0,0),
 142:Core/Src/parts/actuator.cpp ****                              measured.at(1,0),
 143:Core/Src/parts/actuator.cpp ****                              measured.at(2,0));
 144:Core/Src/parts/actuator.cpp ****         return last_vel;
 145:Core/Src/parts/actuator.cpp **** }
 146:Core/Src/parts/actuator.cpp **** 
 147:Core/Src/parts/actuator.cpp **** 
 148:Core/Src/parts/actuator.cpp **** uint32_t Actuator::stop(uint32_t dt_millis, float ramp_factor, uint32_t max_time)
 149:Core/Src/parts/actuator.cpp **** {
 150:Core/Src/parts/actuator.cpp ****         float omega[4];
 151:Core/Src/parts/actuator.cpp ****         float error[4];
 152:Core/Src/parts/actuator.cpp ****         float voltage[4];
 153:Core/Src/parts/actuator.cpp ****         float new_omega[4];
 154:Core/Src/parts/actuator.cpp ****         PID *pid;
 155:Core/Src/parts/actuator.cpp ****         float max_voltage;
 156:Core/Src/parts/actuator.cpp ****         float max_omega;
 157:Core/Src/parts/actuator.cpp **** 
 158:Core/Src/parts/actuator.cpp ****         bool break_loop = false;
 159:Core/Src/parts/actuator.cpp **** 
 160:Core/Src/parts/actuator.cpp ****         uint32_t tick_start = HAL_GetTick();
 161:Core/Src/parts/actuator.cpp ****         uint32_t tick_end;
 162:Core/Src/parts/actuator.cpp **** 
 163:Core/Src/parts/actuator.cpp ****         for (uint8_t j = 0; j < 10; ++j) {
 164:Core/Src/parts/actuator.cpp ****                 
 165:Core/Src/parts/actuator.cpp ****                 for (uint8_t i = 0; i < 4; ++i) {
 166:Core/Src/parts/actuator.cpp ****                         omega[i] = wheels_[i].get_Omega(dt_millis);
 167:Core/Src/parts/actuator.cpp **** 
 168:Core/Src/parts/actuator.cpp ****                         if (fabsf(omega[i]) < 5) {
 169:Core/Src/parts/actuator.cpp ****                                 wheels_[i].set_Omega(0);
 170:Core/Src/parts/actuator.cpp ****                         }else {
 171:Core/Src/parts/actuator.cpp ****                                 pid = wheels_[i].get_PIDController();
 172:Core/Src/parts/actuator.cpp ****                                 error[i] = -(omega[i] / ramp_factor);
 173:Core/Src/parts/actuator.cpp ****                                 voltage[i] = pid->compute_PID(error[i], dt_millis);
 174:Core/Src/parts/actuator.cpp **** 
 175:Core/Src/parts/actuator.cpp ****                                 // Max Omega corresponds to the max voltage value
 176:Core/Src/parts/actuator.cpp ****                                 max_voltage = fabsf(pid->get_Algorithm()->get_Upper());
 177:Core/Src/parts/actuator.cpp ****                                 max_omega = wheels_[i].get_MaxOmega();
 178:Core/Src/parts/actuator.cpp ****                                 new_omega[i] = voltage[i] * max_omega / max_voltage;
 179:Core/Src/parts/actuator.cpp **** 
 180:Core/Src/parts/actuator.cpp ****                                 wheels_[i].set_Omega(new_omega[i]);
 181:Core/Src/parts/actuator.cpp ****                         }
 182:Core/Src/parts/actuator.cpp **** 
 183:Core/Src/parts/actuator.cpp ****                         if (HAL_GetTick() - tick_start > max_time) {
 184:Core/Src/parts/actuator.cpp ****                                 wheels_[i].set_Omega(0);
 185:Core/Src/parts/actuator.cpp ****                                 break_loop = true;
 186:Core/Src/parts/actuator.cpp ****                         }
 187:Core/Src/parts/actuator.cpp ****                 }
 188:Core/Src/parts/actuator.cpp ****                 pid = 0;
 189:Core/Src/parts/actuator.cpp **** 
 190:Core/Src/parts/actuator.cpp ****                 for (uint8_t i = 0; i < 4; ++i) {
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 11


 191:Core/Src/parts/actuator.cpp ****                         wheels_[i].update();
 192:Core/Src/parts/actuator.cpp ****                 }
 193:Core/Src/parts/actuator.cpp ****                 
 194:Core/Src/parts/actuator.cpp ****                 if (break_loop) {
 195:Core/Src/parts/actuator.cpp ****                         break;
 196:Core/Src/parts/actuator.cpp ****                 }
 197:Core/Src/parts/actuator.cpp ****                 HAL_Delay(10);
 198:Core/Src/parts/actuator.cpp ****         }
 199:Core/Src/parts/actuator.cpp ****         tick_end = HAL_GetTick();
 200:Core/Src/parts/actuator.cpp ****         return (tick_end - tick_start);
 201:Core/Src/parts/actuator.cpp **** }
 202:Core/Src/parts/actuator.cpp **** 
 203:Core/Src/parts/actuator.cpp **** 
 204:Core/Src/parts/actuator.cpp **** static Wheel_Config gWheel_Configurations[4];
 205:Core/Src/parts/actuator.cpp **** /**
 206:Core/Src/parts/actuator.cpp ****  * @brief Function that initializes all the required components for the wheels
 207:Core/Src/parts/actuator.cpp ****  *        of the robot
 208:Core/Src/parts/actuator.cpp ****  * @retval None
 209:Core/Src/parts/actuator.cpp ****  * 
 210:Core/Src/parts/actuator.cpp ****  * 
 211:Core/Src/parts/actuator.cpp ****  * <pre>
 212:Core/Src/parts/actuator.cpp ****  * Tasks performed by this function
 213:Core/Src/parts/actuator.cpp ****  * 1) Assigns appropriate IDs to each wheel
 214:Core/Src/parts/actuator.cpp ****  * 2) Give each wheel the respective radius
 215:Core/Src/parts/actuator.cpp ****  * 3) Assign a timer and a channel to each wheel for it's motor to run in PWM
 216:Core/Src/parts/actuator.cpp ****  *    mode. A timer is shared among all the available wheels since we have
 217:Core/Src/parts/actuator.cpp ****  *    four wheels.
 218:Core/Src/parts/actuator.cpp ****  * 4) Assigns the ppr of each wheel's encoder
 219:Core/Src/parts/actuator.cpp ****  * 5) Assigns the direction pins for each motor's direction
 220:Core/Src/parts/actuator.cpp ****  * 6) Assigns timer for each wheel's encoder
 221:Core/Src/parts/actuator.cpp ****  * 7) Starts the timers to run each wheel in respective configured modes like PWM
 222:Core/Src/parts/actuator.cpp ****  *    mode and the Encoder mode
 223:Core/Src/parts/actuator.cpp ****  * </pre>
 224:Core/Src/parts/actuator.cpp ****  */
 225:Core/Src/parts/actuator.cpp **** void Actuator::wheels_Init(void)
 226:Core/Src/parts/actuator.cpp **** {
 227:Core/Src/parts/actuator.cpp ****         int i;
 228:Core/Src/parts/actuator.cpp ****         for (i = 0; i < 4; i++)
 229:Core/Src/parts/actuator.cpp ****         {
 230:Core/Src/parts/actuator.cpp ****                 gWheel_Configurations[i].id = i;
 231:Core/Src/parts/actuator.cpp ****                 gWheel_Configurations[i].radius = 0.0675;
 232:Core/Src/parts/actuator.cpp ****                 // All motors are connected to same timer : TIM8
 233:Core/Src/parts/actuator.cpp ****                 gWheel_Configurations[i].htim = &htim8;
 234:Core/Src/parts/actuator.cpp ****                 //! Need to make sure the following value is correct
 235:Core/Src/parts/actuator.cpp ****                 gWheel_Configurations[i].enc_ppr = 249.6;
 236:Core/Src/parts/actuator.cpp ****         }
 237:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in2_port = GPIOD;
 238:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in2_pin = GPIO_PIN_0;
 239:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in1_port = GPIOE;
 240:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in1_pin = GPIO_PIN_5; 
 241:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].channel = TIM_CHANNEL_1;
 242:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].henc = &htim4;
 243:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].max_omega = 69;
 244:Core/Src/parts/actuator.cpp **** 
 245:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in2_port = GPIOA;
 246:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in2_pin = GPIO_PIN_10;
 247:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in1_port = GPIOB;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 12


 248:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in1_pin = GPIO_PIN_5;
 249:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].channel = TIM_CHANNEL_2;
 250:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].henc = &htim2;
 251:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].max_omega = 70;
 252:Core/Src/parts/actuator.cpp ****         
 253:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in2_port = GPIOE;
 254:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in2_pin = GPIO_PIN_3;
 255:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in1_port = GPIOD;
 256:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in1_pin = GPIO_PIN_2;
 257:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].channel = TIM_CHANNEL_3;
 258:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].henc = &htim3;
 259:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].max_omega = 68;
 260:Core/Src/parts/actuator.cpp **** 
 261:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in2_port = GPIOC;
 262:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in2_pin = GPIO_PIN_13;
 263:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in1_port = GPIOE;
 264:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in1_pin = GPIO_PIN_1;
 265:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].channel = TIM_CHANNEL_4;
 266:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].henc = &htim1;
 267:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].max_omega = 68;
 268:Core/Src/parts/actuator.cpp **** 
 269:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 270:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Config(&gWheel_Configurations[i]);
 271:Core/Src/parts/actuator.cpp ****                 wheels_[i].start_Periphs();
 272:Core/Src/parts/actuator.cpp ****         }
 273:Core/Src/parts/actuator.cpp **** }
 274:Core/Src/parts/actuator.cpp **** 
 275:Core/Src/parts/actuator.cpp **** 
 276:Core/Src/parts/actuator.cpp **** static Discrete_PID gDisc_PID[4];
 232              		.loc 4 276 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236 0000 10B5     		push	{r4, lr}
 237              	.LCFI0:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 4, -8
 240              		.cfi_offset 14, -4
 241              		.loc 4 276 0
 242 0002 054C     		ldr	r4, .L21
 243              	.L19:
 244              		.loc 4 276 0 is_stmt 0 discriminator 5
 245 0004 054B     		ldr	r3, .L21+4
 246 0006 9C42     		cmp	r4, r3
 247 0008 05D0     		beq	.L17
 248              		.loc 4 276 0 discriminator 4
 249 000a 54F8243D 		ldr	r3, [r4, #-36]!
 250 000e 5B68     		ldr	r3, [r3, #4]
 251 0010 2046     		mov	r0, r4
 252 0012 9847     		blx	r3
 253              	.LVL22:
 254 0014 F6E7     		b	.L19
 255              	.L17:
 256              		.loc 4 276 0
 257 0016 10BD     		pop	{r4, pc}
 258              	.L22:
 259              		.align	2
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 13


 260              	.L21:
 261 0018 90000000 		.word	.LANCHOR0+144
 262 001c 00000000 		.word	.LANCHOR0
 263              		.cfi_endproc
 264              	.LFE499:
 266              		.section	.text.__tcf_1,"ax",%progbits
 267              		.align	1
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	__tcf_1:
 274              	.LFB500:
 277:Core/Src/parts/actuator.cpp **** static PID gPID[4];
 275              		.loc 4 277 0 is_stmt 1
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280              		.loc 4 277 0
 281 0000 034B     		ldr	r3, .L26
 282              	.L25:
 283              		.loc 4 277 0 is_stmt 0 discriminator 5
 284 0002 044A     		ldr	r2, .L26+4
 285 0004 9342     		cmp	r3, r2
 286 0006 01D0     		beq	.L23
 287              		.loc 4 277 0 discriminator 4
 288 0008 043B     		subs	r3, r3, #4
 289              	.LVL23:
 290 000a FAE7     		b	.L25
 291              	.LVL24:
 292              	.L23:
 293              		.loc 4 277 0
 294 000c 7047     		bx	lr
 295              	.L27:
 296 000e 00BF     		.align	2
 297              	.L26:
 298 0010 10000000 		.word	.LANCHOR1+16
 299 0014 00000000 		.word	.LANCHOR1
 300              		.cfi_endproc
 301              	.LFE500:
 303              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 304              		.align	1
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu fpv4-sp-d16
 310              	_Z41__static_initialization_and_destruction_0ii:
 311              	.LFB498:
 278:Core/Src/parts/actuator.cpp **** 
 279:Core/Src/parts/actuator.cpp **** static float gI_Factor = 2;
 280:Core/Src/parts/actuator.cpp **** static float gP_Factor = 2;
 281:Core/Src/parts/actuator.cpp **** /**
 282:Core/Src/parts/actuator.cpp ****  * @brief Function that initializes all the required components for the wheel's
 283:Core/Src/parts/actuator.cpp ****  *        pid controller
 284:Core/Src/parts/actuator.cpp ****  * @retval None
 285:Core/Src/parts/actuator.cpp ****  * 
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 14


 286:Core/Src/parts/actuator.cpp ****  * 
 287:Core/Src/parts/actuator.cpp ****  * <pre>
 288:Core/Src/parts/actuator.cpp ****  * Tasks performed by this function
 289:Core/Src/parts/actuator.cpp ****  * 1) Assigns gains for PID controller of each wheel
 290:Core/Src/parts/actuator.cpp ****  * 2) Assigns separate PID controllers for each wheel
 291:Core/Src/parts/actuator.cpp ****  * </pre>
 292:Core/Src/parts/actuator.cpp ****  */
 293:Core/Src/parts/actuator.cpp **** void Actuator::pid_Init()
 294:Core/Src/parts/actuator.cpp **** {
 295:Core/Src/parts/actuator.cpp ****         gDisc_PID[0].set_PID(0.2538, gI_Factor*6.0, 0);
 296:Core/Src/parts/actuator.cpp ****         gDisc_PID[0].set_Limits(24, -24);
 297:Core/Src/parts/actuator.cpp ****         gDisc_PID[1].set_PID(0.2469, gI_Factor*7.01, 0);
 298:Core/Src/parts/actuator.cpp ****         gDisc_PID[1].set_Limits(24, -24);
 299:Core/Src/parts/actuator.cpp ****         gDisc_PID[2].set_PID(gP_Factor*0.2582, gI_Factor*7.834, 0);
 300:Core/Src/parts/actuator.cpp ****         gDisc_PID[2].set_Limits(24, -24);
 301:Core/Src/parts/actuator.cpp ****         gDisc_PID[3].set_PID(0.261, gI_Factor*8.501, 0);
 302:Core/Src/parts/actuator.cpp ****         gDisc_PID[3].set_Limits(24, -24);
 303:Core/Src/parts/actuator.cpp **** 
 304:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 305:Core/Src/parts/actuator.cpp ****                 gPID[i].set_Algorithm(&gDisc_PID[i]);
 306:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_PIDController(&gPID[i]);
 307:Core/Src/parts/actuator.cpp ****         }
 308:Core/Src/parts/actuator.cpp **** }
 309:Core/Src/parts/actuator.cpp **** 
 310:Core/Src/parts/actuator.cpp **** void Actuator::profile(Vec3<float> vel, uint32_t dt_millis)
 311:Core/Src/parts/actuator.cpp **** {
 312:Core/Src/parts/actuator.cpp ****         // Takes a total of about 5 seconds to profile actuator
 313:Core/Src/parts/actuator.cpp ****         printf("Actuation Command : ");
 314:Core/Src/parts/actuator.cpp ****         vel.print();
 315:Core/Src/parts/actuator.cpp ****         printf("\n");
 316:Core/Src/parts/actuator.cpp **** 
 317:Core/Src/parts/actuator.cpp ****         Vec3<float> v;
 318:Core/Src/parts/actuator.cpp **** 
 319:Core/Src/parts/actuator.cpp ****         uint32_t n = (uint32_t)(4000.0 / (float)dt_millis);
 320:Core/Src/parts/actuator.cpp **** 
 321:Core/Src/parts/actuator.cpp ****         uint32_t curr_time = HAL_GetTick();
 322:Core/Src/parts/actuator.cpp ****         for (uint32_t i = 0; i < n; ++i) {
 323:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - curr_time > dt_millis) {
 324:Core/Src/parts/actuator.cpp ****                         curr_time = HAL_GetTick();
 325:Core/Src/parts/actuator.cpp **** 
 326:Core/Src/parts/actuator.cpp ****                         printf("Actuated : ");
 327:Core/Src/parts/actuator.cpp ****                         v = actuate(vel, dt_millis);
 328:Core/Src/parts/actuator.cpp ****                         v = v.mult_EW(1000);
 329:Core/Src/parts/actuator.cpp ****                         v.print();
 330:Core/Src/parts/actuator.cpp ****                         printf("\n");
 331:Core/Src/parts/actuator.cpp ****                 }
 332:Core/Src/parts/actuator.cpp ****                 
 333:Core/Src/parts/actuator.cpp ****         }
 334:Core/Src/parts/actuator.cpp **** 
 335:Core/Src/parts/actuator.cpp ****         stop(dt_millis, 2);
 336:Core/Src/parts/actuator.cpp **** }
 337:Core/Src/parts/actuator.cpp **** 
 338:Core/Src/parts/actuator.cpp **** void Actuator::check()
 339:Core/Src/parts/actuator.cpp **** {
 340:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 341:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(4*i);
 342:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 15


 343:Core/Src/parts/actuator.cpp ****         }
 344:Core/Src/parts/actuator.cpp ****         uint32_t curr_time = HAL_GetTick();
 345:Core/Src/parts/actuator.cpp ****         uint32_t sample_time = curr_time;
 346:Core/Src/parts/actuator.cpp ****         while (HAL_GetTick() - curr_time < 5000) {
 347:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - sample_time > 10) {
 348:Core/Src/parts/actuator.cpp ****                         sample_time = HAL_GetTick();
 349:Core/Src/parts/actuator.cpp ****                         for (uint8_t i = 0; i < 4; ++i) {
 350:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 351:Core/Src/parts/actuator.cpp ****                         }
 352:Core/Src/parts/actuator.cpp ****                         printf("\n");
 353:Core/Src/parts/actuator.cpp ****                 }
 354:Core/Src/parts/actuator.cpp ****         }
 355:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 356:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 357:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 358:Core/Src/parts/actuator.cpp ****         }
 359:Core/Src/parts/actuator.cpp ****         HAL_Delay(500);
 360:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 361:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(-10);
 362:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 363:Core/Src/parts/actuator.cpp ****         }
 364:Core/Src/parts/actuator.cpp ****         
 365:Core/Src/parts/actuator.cpp ****         sample_time = HAL_GetTick();
 366:Core/Src/parts/actuator.cpp ****         curr_time = sample_time;
 367:Core/Src/parts/actuator.cpp ****         while (HAL_GetTick() - curr_time < 5000) {
 368:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - sample_time > 10) {
 369:Core/Src/parts/actuator.cpp ****                         sample_time = HAL_GetTick();
 370:Core/Src/parts/actuator.cpp ****                         for (uint8_t i = 0; i < 4; ++i) {
 371:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 372:Core/Src/parts/actuator.cpp ****                         }
 373:Core/Src/parts/actuator.cpp ****                         printf("\n");
 374:Core/Src/parts/actuator.cpp ****                 }
 375:Core/Src/parts/actuator.cpp ****         }
 376:Core/Src/parts/actuator.cpp ****         
 377:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 378:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 379:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 380:Core/Src/parts/actuator.cpp ****         }
 381:Core/Src/parts/actuator.cpp ****         HAL_Delay(500);
 382:Core/Src/parts/actuator.cpp **** }
 312              		.loc 4 382 0 is_stmt 1
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL25:
 317 0000 0128     		cmp	r0, #1
 318 0002 00D0     		beq	.L48
 319              	.L45:
 320 0004 7047     		bx	lr
 321              	.L48:
 322              		.loc 4 382 0 is_stmt 0 discriminator 1
 323 0006 4FF6FF73 		movw	r3, #65535
 324 000a 9942     		cmp	r1, r3
 325 000c FAD1     		bne	.L45
 326              		.loc 4 382 0
 327 000e 10B5     		push	{r4, lr}
 328              	.LCFI1:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 16


 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 4, -8
 331              		.cfi_offset 14, -4
 332              	.LVL26:
 333              	.LBB303:
 334              	.LBB304:
 335              	.LBB305:
  24:Core/Inc/utils\math/mat.h ****                 fill(mat);
 336              		.loc 3 24 0 is_stmt 1
 337 0010 3E4C     		ldr	r4, .L51
 338 0012 0322     		movs	r2, #3
 339 0014 0421     		movs	r1, #4
 340              	.LVL27:
 341 0016 2046     		mov	r0, r4
 342              	.LVL28:
 343 0018 FFF7FEFF 		bl	_ZN3MatC1Ehh
 344              	.LVL29:
 345              	.LBB306:
 346              	.LBB307:
  32:Core/Inc/utils\math/mat.h **** 
  33:Core/Inc/utils\math/mat.h ****         uint8_t rows() const { return rows_; }
  34:Core/Inc/utils\math/mat.h ****         uint8_t cols() const { return cols_; }
  35:Core/Inc/utils\math/mat.h **** 
  36:Core/Inc/utils\math/mat.h ****         inline float &at(uint8_t i, uint8_t j) {
  37:Core/Inc/utils\math/mat.h ****                 if (!(i < rows_ && j < cols_)) {
  38:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
  39:Core/Inc/utils\math/mat.h ****                 }
  40:Core/Inc/utils\math/mat.h ****                 return matrix_[i][j];
  41:Core/Inc/utils\math/mat.h ****         }
  42:Core/Inc/utils\math/mat.h **** 
  43:Core/Inc/utils\math/mat.h **** 
  44:Core/Inc/utils\math/mat.h ****         Mat(const Mat &m);
  45:Core/Inc/utils\math/mat.h **** 
  46:Core/Inc/utils\math/mat.h ****         Mat &operator=(const Mat &m) {
  47:Core/Inc/utils\math/mat.h ****                 Mat temp(m);
  48:Core/Inc/utils\math/mat.h ****                 swap(*this, temp);
  49:Core/Inc/utils\math/mat.h **** 
  50:Core/Inc/utils\math/mat.h ****                 return *this;
  51:Core/Inc/utils\math/mat.h ****         }
  52:Core/Inc/utils\math/mat.h **** 
  53:Core/Inc/utils\math/mat.h ****         Mat &operator+=(const Mat &rhs);
  54:Core/Inc/utils\math/mat.h ****         Mat &operator-=(const Mat &rhs);
  55:Core/Inc/utils\math/mat.h ****         Mat &operator*=(const Mat &rhs);
  56:Core/Inc/utils\math/mat.h ****         Mat &operator*=(const Vec3<float> &rhs);
  57:Core/Inc/utils\math/mat.h **** 
  58:Core/Inc/utils\math/mat.h ****         friend Mat operator+(Mat lhs, const Mat &rhs) {
  59:Core/Inc/utils\math/mat.h ****                 lhs += rhs;
  60:Core/Inc/utils\math/mat.h ****                 return lhs;
  61:Core/Inc/utils\math/mat.h ****         }
  62:Core/Inc/utils\math/mat.h **** 
  63:Core/Inc/utils\math/mat.h ****         friend Mat operator-(Mat lhs, const Mat &rhs) {
  64:Core/Inc/utils\math/mat.h ****                 lhs -= rhs;
  65:Core/Inc/utils\math/mat.h ****                 return lhs;
  66:Core/Inc/utils\math/mat.h ****         }
  67:Core/Inc/utils\math/mat.h **** 
  68:Core/Inc/utils\math/mat.h ****         friend Mat operator*(Mat lhs, const Mat &rhs) {
  69:Core/Inc/utils\math/mat.h ****                 lhs *= rhs;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 17


  70:Core/Inc/utils\math/mat.h ****                 return lhs;
  71:Core/Inc/utils\math/mat.h ****         }
  72:Core/Inc/utils\math/mat.h **** 
  73:Core/Inc/utils\math/mat.h ****         friend Mat operator*(Mat lhs, const Vec3<float> &rhs) {
  74:Core/Inc/utils\math/mat.h ****                 lhs *= rhs;
  75:Core/Inc/utils\math/mat.h ****                 return lhs;
  76:Core/Inc/utils\math/mat.h ****         }
  77:Core/Inc/utils\math/mat.h **** 
  78:Core/Inc/utils\math/mat.h ****         Mat mult(const Mat &m);
  79:Core/Inc/utils\math/mat.h ****         Mat mult_EW(float num);
  80:Core/Inc/utils\math/mat.h ****         Mat transpose();
  81:Core/Inc/utils\math/mat.h **** 
  82:Core/Inc/utils\math/mat.h ****         // Just an alias for getting transpose of a matrix
  83:Core/Inc/utils\math/mat.h ****         inline Mat trans() { return transpose(); }
  84:Core/Inc/utils\math/mat.h **** 
  85:Core/Inc/utils\math/mat.h ****         void fill(float num) {
  86:Core/Inc/utils\math/mat.h ****                 for (uint8_t i = 0; i < rows_; ++i) {
  87:Core/Inc/utils\math/mat.h ****                         for (uint8_t j = 0; j < cols_; ++j) {
  88:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = num;
  89:Core/Inc/utils\math/mat.h ****                         }
  90:Core/Inc/utils\math/mat.h ****                 }
  91:Core/Inc/utils\math/mat.h ****         }
  92:Core/Inc/utils\math/mat.h **** 
  93:Core/Inc/utils\math/mat.h ****         template <size_t M, size_t N>
  94:Core/Inc/utils\math/mat.h ****         void fill(const float (&mat)[M][N]) {
  95:Core/Inc/utils\math/mat.h ****                 if (M != rows_ && N != cols_) {
 347              		.loc 3 95 0
 348 001c 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 349 0020 042B     		cmp	r3, #4
 350 0022 03D0     		beq	.L30
 351 0024 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 352 0028 032B     		cmp	r3, #3
 353 002a 01D1     		bne	.L49
 354              	.L30:
 355              	.LBE307:
 356              	.LBE306:
 357              	.LBE305:
 358              	.LBE304:
 359              	.LBE303:
 360              		.loc 4 382 0
 361 002c 0022     		movs	r2, #0
 362 002e 06E0     		b	.L34
 363              	.L49:
 364              	.LBB320:
 365              	.LBB318:
 366              	.LBB316:
 367              	.LBB314:
 368              	.LBB312:
  96:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 369              		.loc 3 96 0
 370 0030 6021     		movs	r1, #96
 371 0032 3748     		ldr	r0, .L51+4
 372 0034 FFF7FEFF 		bl	_Error_Handler
 373              	.LVL30:
 374 0038 F8E7     		b	.L30
 375              	.LVL31:
 376              	.L32:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 18


 377              	.LBB308:
  97:Core/Inc/utils\math/mat.h ****                 }
  98:Core/Inc/utils\math/mat.h ****                 for (uint8_t i = 0; i < M; ++i) {
 378              		.loc 3 98 0
 379 003a 0132     		adds	r2, r2, #1
 380              	.LVL32:
 381 003c D2B2     		uxtb	r2, r2
 382              	.LVL33:
 383              	.L34:
 384 003e 032A     		cmp	r2, #3
 385 0040 12D8     		bhi	.L31
 386              	.LBB309:
  99:Core/Inc/utils\math/mat.h ****                         for (uint8_t j = 0; j < N; ++j) {
 387              		.loc 3 99 0
 388 0042 0023     		movs	r3, #0
 389              	.L33:
 390              	.LVL34:
 391 0044 022B     		cmp	r3, #2
 392 0046 F8D8     		bhi	.L32
 100:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 393              		.loc 3 100 0
 394 0048 02EB4201 		add	r1, r2, r2, lsl #1
 395 004c C818     		adds	r0, r1, r3
 396 004e 3149     		ldr	r1, .L51+8
 397 0050 01EB8001 		add	r1, r1, r0, lsl #2
 398 0054 0868     		ldr	r0, [r1]	@ float
 399 0056 03EB8204 		add	r4, r3, r2, lsl #2
 400 005a 2C49     		ldr	r1, .L51
 401 005c 01EB8401 		add	r1, r1, r4, lsl #2
 402 0060 0860     		str	r0, [r1]	@ float
  99:Core/Inc/utils\math/mat.h ****                         for (uint8_t j = 0; j < N; ++j) {
 403              		.loc 3 99 0
 404 0062 0133     		adds	r3, r3, #1
 405              	.LVL35:
 406 0064 DBB2     		uxtb	r3, r3
 407              	.LVL36:
 408 0066 EDE7     		b	.L33
 409              	.LVL37:
 410              	.L31:
 411              	.LBE309:
 412              	.LBE308:
 413              	.LBE312:
 414              	.LBE314:
 415              	.LBE316:
 416              	.LBE318:
 417              	.LBE320:
  57:Core/Src/parts/actuator.cpp **** 
 418              		.loc 4 57 0
 419 0068 2B4A     		ldr	r2, .L51+12
 420 006a 2C49     		ldr	r1, .L51+16
 421 006c 2748     		ldr	r0, .L51
 422 006e FFF7FEFF 		bl	__aeabi_atexit
 423              	.LVL38:
 424              	.LBB321:
 425              	.LBB322:
 426              	.LBB323:
  24:Core/Inc/utils\math/mat.h ****                 fill(mat);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 19


 427              		.loc 3 24 0
 428 0072 2B4C     		ldr	r4, .L51+20
 429 0074 0422     		movs	r2, #4
 430 0076 0321     		movs	r1, #3
 431 0078 2046     		mov	r0, r4
 432 007a FFF7FEFF 		bl	_ZN3MatC1Ehh
 433              	.LVL39:
 434              	.LBB324:
 435              	.LBB325:
  95:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 436              		.loc 3 95 0
 437 007e 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 438 0082 032B     		cmp	r3, #3
 439 0084 03D0     		beq	.L35
 440 0086 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 441 008a 042B     		cmp	r3, #4
 442 008c 01D1     		bne	.L50
 443              	.L35:
 444              	.LBE325:
 445              	.LBE324:
 446              	.LBE323:
 447              	.LBE322:
 448              	.LBE321:
 449              	.LBB332:
 450              	.LBB319:
 451              	.LBB317:
 452              	.LBB315:
 453              	.LBB313:
 454              	.LBB311:
 455              	.LBB310:
  99:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 456              		.loc 3 99 0
 457 008e 0020     		movs	r0, #0
 458 0090 06E0     		b	.L39
 459              	.L50:
 460              	.LBE310:
 461              	.LBE311:
 462              	.LBE313:
 463              	.LBE315:
 464              	.LBE317:
 465              	.LBE319:
 466              	.LBE332:
 467              	.LBB333:
 468              	.LBB331:
 469              	.LBB330:
 470              	.LBB329:
 471              	.LBB328:
  96:Core/Inc/utils\math/mat.h ****                 }
 472              		.loc 3 96 0
 473 0092 6021     		movs	r1, #96
 474 0094 1E48     		ldr	r0, .L51+4
 475 0096 FFF7FEFF 		bl	_Error_Handler
 476              	.LVL40:
 477 009a F8E7     		b	.L35
 478              	.LVL41:
 479              	.L37:
 480              	.LBB326:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 20


  98:Core/Inc/utils\math/mat.h ****                         for (uint8_t j = 0; j < N; ++j) {
 481              		.loc 3 98 0
 482 009c 0130     		adds	r0, r0, #1
 483              	.LVL42:
 484 009e C0B2     		uxtb	r0, r0
 485              	.LVL43:
 486              	.L39:
 487 00a0 0228     		cmp	r0, #2
 488 00a2 0ED8     		bhi	.L36
 489              	.LBB327:
  99:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 490              		.loc 3 99 0
 491 00a4 0023     		movs	r3, #0
 492              	.L38:
 493              	.LVL44:
 494 00a6 032B     		cmp	r3, #3
 495 00a8 F8D8     		bhi	.L37
 496              		.loc 3 100 0
 497 00aa 03EB8002 		add	r2, r3, r0, lsl #2
 498 00ae 9200     		lsls	r2, r2, #2
 499 00b0 1C49     		ldr	r1, .L51+24
 500 00b2 1144     		add	r1, r1, r2
 501 00b4 0C68     		ldr	r4, [r1]	@ float
 502 00b6 1A49     		ldr	r1, .L51+20
 503 00b8 0A44     		add	r2, r2, r1
 504 00ba 1460     		str	r4, [r2]	@ float
  99:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 505              		.loc 3 99 0
 506 00bc 0133     		adds	r3, r3, #1
 507              	.LVL45:
 508 00be DBB2     		uxtb	r3, r3
 509              	.LVL46:
 510 00c0 F1E7     		b	.L38
 511              	.LVL47:
 512              	.L36:
 513              	.LBE327:
 514              	.LBE326:
 515              	.LBE328:
 516              	.LBE329:
 517              	.LBE330:
 518              	.LBE331:
 519              	.LBE333:
  63:Core/Src/parts/actuator.cpp **** /**
 520              		.loc 4 63 0
 521 00c2 154A     		ldr	r2, .L51+12
 522 00c4 1549     		ldr	r1, .L51+16
 523 00c6 1648     		ldr	r0, .L51+20
 524 00c8 FFF7FEFF 		bl	__aeabi_atexit
 525              	.LVL48:
 276:Core/Src/parts/actuator.cpp **** static PID gPID[4];
 526              		.loc 4 276 0
 527 00cc 0321     		movs	r1, #3
 528 00ce 164B     		ldr	r3, .L51+28
 529              	.L41:
 276:Core/Src/parts/actuator.cpp **** static PID gPID[4];
 530              		.loc 4 276 0 is_stmt 0 discriminator 4
 531 00d0 0029     		cmp	r1, #0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 21


 532 00d2 0BDB     		blt	.L40
 533              	.LVL49:
 534              	.LBB334:
 535              	.LBB335:
 536              	.LBB336:
 537              	.LBB337:
 538              	.LBB338:
 539              	.LBB339:
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
 540              		.loc 1 13 0 is_stmt 1
 541 00d4 0022     		movs	r2, #0
 542 00d6 5A60     		str	r2, [r3, #4]	@ float
 543              	.LVL50:
 544              	.LBE339:
 545              	.LBE338:
 546              	.LBB340:
 547              	.LBB341:
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
 548              		.loc 1 14 0
 549 00d8 9A60     		str	r2, [r3, #8]	@ float
 550              	.LVL51:
 551              	.LBE341:
 552              	.LBE340:
 553              	.LBB342:
 554              	.LBB343:
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
 555              		.loc 1 15 0
 556 00da DA60     		str	r2, [r3, #12]	@ float
 557              	.LVL52:
 558              	.LBE343:
 559              	.LBE342:
 560              	.LBE337:
 561              	.LBE336:
  49:Core/Inc/utils\control/pid_algorithms.h ****                 l_output_ = 0;
 562              		.loc 1 49 0
 563 00dc 1348     		ldr	r0, .L51+32
 564 00de 1860     		str	r0, [r3]
  50:Core/Inc/utils\control/pid_algorithms.h ****                 l_err_ = 0;
 565              		.loc 1 50 0
 566 00e0 9A61     		str	r2, [r3, #24]	@ float
  51:Core/Inc/utils\control/pid_algorithms.h ****                 ll_err_ = 0;
 567              		.loc 1 51 0
 568 00e2 DA61     		str	r2, [r3, #28]	@ float
  52:Core/Inc/utils\control/pid_algorithms.h ****         }
 569              		.loc 1 52 0
 570 00e4 1A62     		str	r2, [r3, #32]	@ float
 571              	.LVL53:
 572              	.LBE335:
 573              	.LBE334:
 276:Core/Src/parts/actuator.cpp **** static PID gPID[4];
 574              		.loc 4 276 0
 575 00e6 2433     		adds	r3, r3, #36
 576 00e8 0139     		subs	r1, r1, #1
 577 00ea F1E7     		b	.L41
 578              	.L40:
 276:Core/Src/parts/actuator.cpp **** static PID gPID[4];
 579              		.loc 4 276 0 is_stmt 0 discriminator 2
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 22


 580 00ec 0A4A     		ldr	r2, .L51+12
 581 00ee 1049     		ldr	r1, .L51+36
 582 00f0 0020     		movs	r0, #0
 583 00f2 FFF7FEFF 		bl	__aeabi_atexit
 584              	.LVL54:
 277:Core/Src/parts/actuator.cpp **** 
 585              		.loc 4 277 0 is_stmt 1 discriminator 2
 586 00f6 0323     		movs	r3, #3
 587              	.L43:
 277:Core/Src/parts/actuator.cpp **** 
 588              		.loc 4 277 0 is_stmt 0 discriminator 4
 589 00f8 002B     		cmp	r3, #0
 590 00fa 01DB     		blt	.L42
 277:Core/Src/parts/actuator.cpp **** 
 591              		.loc 4 277 0
 592 00fc 013B     		subs	r3, r3, #1
 593 00fe FBE7     		b	.L43
 594              	.L42:
 277:Core/Src/parts/actuator.cpp **** 
 595              		.loc 4 277 0 discriminator 2
 596 0100 054A     		ldr	r2, .L51+12
 597 0102 0C49     		ldr	r1, .L51+40
 598 0104 0020     		movs	r0, #0
 599 0106 FFF7FEFF 		bl	__aeabi_atexit
 600              	.LVL55:
 601              		.loc 4 382 0 is_stmt 1 discriminator 2
 602 010a 10BD     		pop	{r4, pc}
 603              	.L52:
 604              		.align	2
 605              	.L51:
 606 010c 00000000 		.word	.LANCHOR2
 607 0110 00000000 		.word	.LC0
 608 0114 00000000 		.word	.LANCHOR3
 609 0118 00000000 		.word	__dso_handle
 610 011c 00000000 		.word	_ZN3MatD1Ev
 611 0120 00000000 		.word	.LANCHOR4
 612 0124 00000000 		.word	.LANCHOR5
 613 0128 00000000 		.word	.LANCHOR0
 614 012c 08000000 		.word	_ZTV12Discrete_PID+8
 615 0130 00000000 		.word	__tcf_0
 616 0134 00000000 		.word	__tcf_1
 617              		.cfi_endproc
 618              	.LFE498:
 620              		.section	.text._ZN12Discrete_PIDD0Ev,"axG",%progbits,_ZN12Discrete_PIDD5Ev,comdat
 621              		.align	1
 622              		.weak	_ZN12Discrete_PIDD0Ev
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv4-sp-d16
 628              	_ZN12Discrete_PIDD0Ev:
 629              	.LFB377:
  58:Core/Inc/utils\control/pid_algorithms.h **** 
 630              		.loc 1 58 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 23


 634              	.LVL56:
 635 0000 10B5     		push	{r4, lr}
 636              	.LCFI2:
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 4, -8
 639              		.cfi_offset 14, -4
 640 0002 0446     		mov	r4, r0
  58:Core/Inc/utils\control/pid_algorithms.h **** 
 641              		.loc 1 58 0
 642 0004 2421     		movs	r1, #36
 643 0006 FFF7FEFF 		bl	_ZdlPvj
 644              	.LVL57:
 645 000a 2046     		mov	r0, r4
 646 000c 10BD     		pop	{r4, pc}
 647              		.cfi_endproc
 648              	.LFE377:
 650              		.section	.text._ZN8Actuator12get_InstanceEv,"ax",%progbits
 651              		.align	1
 652              		.global	_ZN8Actuator12get_InstanceEv
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	_ZN8Actuator12get_InstanceEv:
 659              	.LFB460:
  22:Core/Src/parts/actuator.cpp ****         static Actuator sBase_Instance;
 660              		.loc 4 22 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664 0000 08B5     		push	{r3, lr}
 665              	.LCFI3:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 3, -8
 668              		.cfi_offset 14, -4
  23:Core/Src/parts/actuator.cpp **** 
 669              		.loc 4 23 0
 670 0002 104B     		ldr	r3, .L61
 671 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 672 0006 BFF35B8F 		dmb	ish
 673 000a 13F0010F 		tst	r3, #1
 674 000e 01D0     		beq	.L60
 675              	.L56:
  26:Core/Src/parts/actuator.cpp **** 
 676              		.loc 4 26 0
 677 0010 0D48     		ldr	r0, .L61+4
 678 0012 08BD     		pop	{r3, pc}
 679              	.L60:
  23:Core/Src/parts/actuator.cpp **** 
 680              		.loc 4 23 0 discriminator 1
 681 0014 0B48     		ldr	r0, .L61
 682 0016 FFF7FEFF 		bl	__cxa_guard_acquire
 683              	.LVL58:
 684 001a 0028     		cmp	r0, #0
 685 001c F8D0     		beq	.L56
 686              	.LVL59:
 687              	.LBB344:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 24


 688              	.LBB345:
 689              	.LBB346:
  23:Core/Inc/parts/actuator.h **** 
  24:Core/Inc/parts/actuator.h ****         static Actuator& get_Instance();
  25:Core/Inc/parts/actuator.h **** 
  26:Core/Inc/parts/actuator.h ****         int init();
  27:Core/Inc/parts/actuator.h ****         Vec3<float> actuate(Vec3<float> vel, uint32_t dt_millis);
  28:Core/Inc/parts/actuator.h ****         uint32_t stop(uint32_t dt_millis, float ramp_factor = 2.0, uint32_t max_time = 1000);
  29:Core/Inc/parts/actuator.h **** 
  30:Core/Inc/parts/actuator.h ****         void profile(Vec3<float> vel, uint32_t dt_millis);
  31:Core/Inc/parts/actuator.h ****         void check();
  32:Core/Inc/parts/actuator.h **** 
  33:Core/Inc/parts/actuator.h **** private:
  34:Core/Inc/parts/actuator.h ****         Wheel wheels_[4];
  35:Core/Inc/parts/actuator.h **** 
  36:Core/Inc/parts/actuator.h ****         Actuator() { }
 690              		.loc 2 36 0 discriminator 2
 691 001e 0323     		movs	r3, #3
 692 0020 094A     		ldr	r2, .L61+4
 693              	.L58:
 694              		.loc 2 36 0 is_stmt 0
 695 0022 002B     		cmp	r3, #0
 696 0024 04DB     		blt	.L57
 697              	.LVL60:
 698              	.LBB347:
 699              	.LBB348:
 700              		.file 5 "Core/Inc/devs/wheel.h"
   1:Core/Inc/devs/wheel.h **** /*
   2:Core/Inc/devs/wheel.h ****  * wheel.h
   3:Core/Inc/devs/wheel.h ****  *
   4:Core/Inc/devs/wheel.h ****  * Created : 10/1/2018
   5:Core/Inc/devs/wheel.h ****  */
   6:Core/Inc/devs/wheel.h **** 
   7:Core/Inc/devs/wheel.h **** #ifndef _WHEEL_H_
   8:Core/Inc/devs/wheel.h **** #define _WHEEL_H_
   9:Core/Inc/devs/wheel.h **** 
  10:Core/Inc/devs/wheel.h **** #include "stm32f4xx_hal.h"
  11:Core/Inc/devs/wheel.h **** #include "tim.h"
  12:Core/Inc/devs/wheel.h **** 
  13:Core/Inc/devs/wheel.h **** #include "defines.h"
  14:Core/Inc/devs/wheel.h **** 
  15:Core/Inc/devs/wheel.h **** #include "pid_algorithms.h"
  16:Core/Inc/devs/wheel.h **** #include "pid.h"
  17:Core/Inc/devs/wheel.h **** 
  18:Core/Inc/devs/wheel.h **** enum Direction
  19:Core/Inc/devs/wheel.h **** {
  20:Core/Inc/devs/wheel.h ****         AHEAD,
  21:Core/Inc/devs/wheel.h ****         BACK,
  22:Core/Inc/devs/wheel.h ****         HALT
  23:Core/Inc/devs/wheel.h **** };
  24:Core/Inc/devs/wheel.h **** 
  25:Core/Inc/devs/wheel.h **** struct Wheel_Config
  26:Core/Inc/devs/wheel.h **** {
  27:Core/Inc/devs/wheel.h ****         uint8_t id;
  28:Core/Inc/devs/wheel.h ****         float radius;
  29:Core/Inc/devs/wheel.h **** 
  30:Core/Inc/devs/wheel.h ****         GPIO_TypeDef *in1_port;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 25


  31:Core/Inc/devs/wheel.h ****         uint16_t in1_pin;
  32:Core/Inc/devs/wheel.h ****         GPIO_TypeDef *in2_port;
  33:Core/Inc/devs/wheel.h ****         uint16_t in2_pin;
  34:Core/Inc/devs/wheel.h **** 
  35:Core/Inc/devs/wheel.h ****         TIM_HandleTypeDef *htim;        // PWM Generating Timer
  36:Core/Inc/devs/wheel.h ****         uint32_t channel;               // PWM Channel
  37:Core/Inc/devs/wheel.h **** 
  38:Core/Inc/devs/wheel.h ****         TIM_HandleTypeDef *henc;
  39:Core/Inc/devs/wheel.h ****         
  40:Core/Inc/devs/wheel.h ****         float tolerance;                // Tolerance level for zero
  41:Core/Inc/devs/wheel.h ****         float max_omega;                // Max Omega Attained by the wheel(motor)
  42:Core/Inc/devs/wheel.h ****         uint32_t enc_ppr;
  43:Core/Inc/devs/wheel.h **** 
  44:Core/Inc/devs/wheel.h ****         PID *pid_controller;            // Pointer to the wheel's PID controller
  45:Core/Inc/devs/wheel.h **** };
  46:Core/Inc/devs/wheel.h **** 
  47:Core/Inc/devs/wheel.h **** class Wheel
  48:Core/Inc/devs/wheel.h **** {
  49:Core/Inc/devs/wheel.h **** public:
  50:Core/Inc/devs/wheel.h ****         Wheel() { wheel_ = 0; }
 701              		.loc 5 50 0 is_stmt 1
 702 0026 0021     		movs	r1, #0
 703 0028 42F80C1B 		str	r1, [r2], #12
 704              	.LVL61:
 705              	.LBE348:
 706              	.LBE347:
 707              		.loc 2 36 0
 708 002c 013B     		subs	r3, r3, #1
 709 002e F8E7     		b	.L58
 710              	.L57:
 711              	.LVL62:
 712              	.LBE346:
 713              	.LBE345:
 714              	.LBE344:
  23:Core/Src/parts/actuator.cpp **** 
 715              		.loc 4 23 0
 716 0030 0448     		ldr	r0, .L61
 717 0032 FFF7FEFF 		bl	__cxa_guard_release
 718              	.LVL63:
 719 0036 054A     		ldr	r2, .L61+8
 720 0038 0549     		ldr	r1, .L61+12
 721 003a 0348     		ldr	r0, .L61+4
 722 003c FFF7FEFF 		bl	__aeabi_atexit
 723              	.LVL64:
 724 0040 E6E7     		b	.L56
 725              	.L62:
 726 0042 00BF     		.align	2
 727              	.L61:
 728 0044 00000000 		.word	.LANCHOR7
 729 0048 00000000 		.word	.LANCHOR6
 730 004c 00000000 		.word	__dso_handle
 731 0050 00000000 		.word	_ZN8ActuatorD1Ev
 732              		.cfi_endproc
 733              	.LFE460:
 735              		.section	.text._ZN8Actuator7actuateE4Vec3IfEm,"ax",%progbits
 736              		.align	1
 737              		.global	_ZN8Actuator7actuateE4Vec3IfEm
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 26


 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	_ZN8Actuator7actuateE4Vec3IfEm:
 744              	.LFB462:
  85:Core/Src/parts/actuator.cpp ****         Mat wheels_omegas = gCoupling_Matrix * vel;
 745              		.loc 4 85 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 304
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              	.LVL65:
 750 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 751              	.LCFI4:
 752              		.cfi_def_cfa_offset 32
 753              		.cfi_offset 4, -32
 754              		.cfi_offset 5, -28
 755              		.cfi_offset 6, -24
 756              		.cfi_offset 7, -20
 757              		.cfi_offset 8, -16
 758              		.cfi_offset 9, -12
 759              		.cfi_offset 10, -8
 760              		.cfi_offset 14, -4
 761 0004 CCB0     		sub	sp, sp, #304
 762              	.LCFI5:
 763              		.cfi_def_cfa_offset 336
 764 0006 0546     		mov	r5, r0
 765 0008 0F46     		mov	r7, r1
 766 000a 1446     		mov	r4, r2
 767 000c 9A46     		mov	r10, r3
  86:Core/Src/parts/actuator.cpp ****         // w = v / r
 768              		.loc 4 86 0
 769 000e 7849     		ldr	r1, .L89
 770              	.LVL66:
 771 0010 11A8     		add	r0, sp, #68
 772              	.LVL67:
 773 0012 FFF7FEFF 		bl	_ZN3MatC1ERKS_
 774              	.LVL68:
 775              	.LBB399:
 776              	.LBB400:
  74:Core/Inc/utils\math/mat.h ****                 return lhs;
 777              		.loc 3 74 0
 778 0016 2146     		mov	r1, r4
 779 0018 11A8     		add	r0, sp, #68
 780              	.LVL69:
 781 001a FFF7FEFF 		bl	_ZN3MatmLERK4Vec3IfE
 782              	.LVL70:
  75:Core/Inc/utils\math/mat.h ****         }
 783              		.loc 3 75 0
 784 001e 4422     		movs	r2, #68
 785 0020 0DEB0201 		add	r1, sp, r2
 786 0024 3BA8     		add	r0, sp, #236
 787 0026 FFF7FEFF 		bl	memcpy
 788              	.LVL71:
 789              	.LBE400:
 790              	.LBE399:
 791              	.LBB401:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 27


 792              	.LBB402:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 793              		.loc 3 37 0
 794 002a 9DF82C41 		ldrb	r4, [sp, #300]	@ zero_extendqisi2
 795              	.LVL72:
 796 002e 14B1     		cbz	r4, .L64
 797 0030 9DF82D31 		ldrb	r3, [sp, #301]	@ zero_extendqisi2
 798 0034 1BB9     		cbnz	r3, .L65
 799              	.L64:
  38:Core/Inc/utils\math/mat.h ****                 }
 800              		.loc 3 38 0
 801 0036 2621     		movs	r1, #38
 802 0038 6E48     		ldr	r0, .L89+4
 803 003a FFF7FEFF 		bl	_Error_Handler
 804              	.LVL73:
 805              	.L65:
 806              	.LBE402:
 807              	.LBE401:
  88:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(1,0) / (float)(WHEEL_RADIUS),
 808              		.loc 4 88 0
 809 003e DDED3B6A 		vldr.32	s13, [sp, #236]
 810 0042 9FED6D7A 		vldr.32	s14, .L89+8
 811 0046 C6EE877A 		vdiv.f32	s15, s13, s14
  91:Core/Src/parts/actuator.cpp **** 
 812              		.loc 4 91 0
 813 004a CDED377A 		vstr.32	s15, [sp, #220]
 814              	.LVL74:
 815              	.LBB403:
 816              	.LBB404:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 817              		.loc 3 37 0
 818 004e 012C     		cmp	r4, #1
 819 0050 02D9     		bls	.L66
 820 0052 9DF82D31 		ldrb	r3, [sp, #301]	@ zero_extendqisi2
 821 0056 1BB9     		cbnz	r3, .L67
 822              	.L66:
  38:Core/Inc/utils\math/mat.h ****                 }
 823              		.loc 3 38 0
 824 0058 2621     		movs	r1, #38
 825 005a 6648     		ldr	r0, .L89+4
 826 005c FFF7FEFF 		bl	_Error_Handler
 827              	.LVL75:
 828              	.L67:
 829              	.LBE404:
 830              	.LBE403:
  89:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(2,0) / (float)(WHEEL_RADIUS),
 831              		.loc 4 89 0
 832 0060 DDED3F6A 		vldr.32	s13, [sp, #252]
 833 0064 9FED647A 		vldr.32	s14, .L89+8
 834 0068 C6EE877A 		vdiv.f32	s15, s13, s14
  91:Core/Src/parts/actuator.cpp **** 
 835              		.loc 4 91 0
 836 006c CDED387A 		vstr.32	s15, [sp, #224]
 837              	.LVL76:
 838              	.LBB405:
 839              	.LBB406:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 28


 840              		.loc 3 37 0
 841 0070 022C     		cmp	r4, #2
 842 0072 02D9     		bls	.L68
 843 0074 9DF82D31 		ldrb	r3, [sp, #301]	@ zero_extendqisi2
 844 0078 1BB9     		cbnz	r3, .L69
 845              	.L68:
  38:Core/Inc/utils\math/mat.h ****                 }
 846              		.loc 3 38 0
 847 007a 2621     		movs	r1, #38
 848 007c 5D48     		ldr	r0, .L89+4
 849 007e FFF7FEFF 		bl	_Error_Handler
 850              	.LVL77:
 851              	.L69:
 852              	.LBE406:
 853              	.LBE405:
  90:Core/Src/parts/actuator.cpp ****                                 wheels_omegas.at(3,0) / (float)(WHEEL_RADIUS) };
 854              		.loc 4 90 0
 855 0082 DDED436A 		vldr.32	s13, [sp, #268]
 856 0086 9FED5C7A 		vldr.32	s14, .L89+8
 857 008a C6EE877A 		vdiv.f32	s15, s13, s14
  91:Core/Src/parts/actuator.cpp **** 
 858              		.loc 4 91 0
 859 008e CDED397A 		vstr.32	s15, [sp, #228]
 860              	.LVL78:
 861              	.LBB407:
 862              	.LBB408:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 863              		.loc 3 37 0
 864 0092 032C     		cmp	r4, #3
 865 0094 02D9     		bls	.L70
 866 0096 9DF82D31 		ldrb	r3, [sp, #301]	@ zero_extendqisi2
 867 009a 1BB9     		cbnz	r3, .L71
 868              	.L70:
  38:Core/Inc/utils\math/mat.h ****                 }
 869              		.loc 3 38 0
 870 009c 2621     		movs	r1, #38
 871 009e 5548     		ldr	r0, .L89+4
 872 00a0 FFF7FEFF 		bl	_Error_Handler
 873              	.LVL79:
 874              	.L71:
 875              	.LBE408:
 876              	.LBE407:
  91:Core/Src/parts/actuator.cpp **** 
 877              		.loc 4 91 0
 878 00a4 DDED476A 		vldr.32	s13, [sp, #284]
 879 00a8 9FED537A 		vldr.32	s14, .L89+8
 880 00ac C6EE877A 		vdiv.f32	s15, s13, s14
 881 00b0 CDED3A7A 		vstr.32	s15, [sp, #232]
 882              	.LVL80:
 883              	.LBB409:
 105:Core/Src/parts/actuator.cpp ****                 // if (i != 2)
 884              		.loc 4 105 0
 885 00b4 0024     		movs	r4, #0
 886              	.LVL81:
 887              	.L73:
 105:Core/Src/parts/actuator.cpp ****                 // if (i != 2)
 888              		.loc 4 105 0 is_stmt 0 discriminator 3
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 29


 889 00b6 032C     		cmp	r4, #3
 890 00b8 31D8     		bhi	.L86
 109:Core/Src/parts/actuator.cpp ****                 error[i] = set_points[i] - omega[i][0];
 891              		.loc 4 109 0 is_stmt 1 discriminator 2
 892 00ba 6600     		lsls	r6, r4, #1
 893 00bc 3319     		adds	r3, r6, r4
 894 00be 4FEA8308 		lsl	r8, r3, #2
 895 00c2 07EB0809 		add	r9, r7, r8
 896 00c6 5146     		mov	r1, r10
 897 00c8 4846     		mov	r0, r9
 898 00ca FFF7FEFF 		bl	_ZN5Wheel9get_OmegaEm
 899              	.LVL82:
 900 00ce 4CAB     		add	r3, sp, #304
 901 00d0 03EB8403 		add	r3, r3, r4, lsl #2
 902 00d4 03ED190A 		vstr.32	s0, [r3, #-100]
 110:Core/Src/parts/actuator.cpp ****                 pid = wheels_[i].get_PIDController();
 903              		.loc 4 110 0 discriminator 2
 904 00d8 53ED157A 		vldr.32	s15, [r3, #-84]
 905              	.LVL83:
 906              	.LBB410:
 907              	.LBB411:
  51:Core/Inc/devs/wheel.h ****         Wheel(Wheel_Config *wheel) { wheel_ = wheel; }
  52:Core/Inc/devs/wheel.h ****         Wheel(Wheel &&) = default;
  53:Core/Inc/devs/wheel.h ****         Wheel(const Wheel &) = default;
  54:Core/Inc/devs/wheel.h ****         Wheel &operator=(Wheel &&) = default;
  55:Core/Inc/devs/wheel.h ****         Wheel &operator=(const Wheel &) = default;
  56:Core/Inc/devs/wheel.h ****         ~Wheel() { }
  57:Core/Inc/devs/wheel.h ****         
  58:Core/Inc/devs/wheel.h ****         void set_Config(Wheel_Config *wheel) { wheel_ = wheel; }
  59:Core/Inc/devs/wheel.h ****         void set_Direction(enum Direction d) { dir_ = d; }
  60:Core/Inc/devs/wheel.h ****         void set_Omega(float omega);
  61:Core/Inc/devs/wheel.h ****         void update() const;
  62:Core/Inc/devs/wheel.h **** 
  63:Core/Inc/devs/wheel.h ****         float get_Omega(uint32_t dt_millis);
  64:Core/Inc/devs/wheel.h ****         float get_MaxOmega() { return wheel_->max_omega; }
  65:Core/Inc/devs/wheel.h **** 
  66:Core/Inc/devs/wheel.h ****         void start_Periphs();
  67:Core/Inc/devs/wheel.h **** 
  68:Core/Inc/devs/wheel.h ****         void set_PIDController(PID *pid) { wheel_->pid_controller = pid; }
  69:Core/Inc/devs/wheel.h ****         PID * get_PIDController() {
  70:Core/Inc/devs/wheel.h ****                 return wheel_->pid_controller;
 908              		.loc 5 70 0 discriminator 2
 909 00dc 57F80830 		ldr	r3, [r7, r8]
 910 00e0 D3F83080 		ldr	r8, [r3, #48]
 911              	.LVL84:
 912              	.LBE411:
 913              	.LBE410:
 914              	.LBB412:
 915              	.LBB413:
 916              		.file 6 "Core/Inc/utils\\control/pid.h"
   1:Core/Inc/utils\control/pid.h **** #ifndef _PID_H_
   2:Core/Inc/utils\control/pid.h **** #define _PID_H_
   3:Core/Inc/utils\control/pid.h **** 
   4:Core/Inc/utils\control/pid.h **** #include "pid_algorithms.h"
   5:Core/Inc/utils\control/pid.h **** 
   6:Core/Inc/utils\control/pid.h **** class PID
   7:Core/Inc/utils\control/pid.h **** {
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 30


   8:Core/Inc/utils\control/pid.h **** public:
   9:Core/Inc/utils\control/pid.h ****         PID() { }
  10:Core/Inc/utils\control/pid.h ****         PID(PID_Algorithm *algo) { set_Algorithm(algo); }
  11:Core/Inc/utils\control/pid.h ****         PID(PID &&) = default;
  12:Core/Inc/utils\control/pid.h ****         PID(const PID &) = default;
  13:Core/Inc/utils\control/pid.h ****         PID &operator=(PID &&) = default;
  14:Core/Inc/utils\control/pid.h ****         PID &operator=(const PID &) = default;
  15:Core/Inc/utils\control/pid.h ****         ~PID() { }
  16:Core/Inc/utils\control/pid.h **** 
  17:Core/Inc/utils\control/pid.h ****         void set_Algorithm(PID_Algorithm *algo) { algo_ = algo; }
  18:Core/Inc/utils\control/pid.h ****         PID_Algorithm * get_Algorithm() { return algo_; }
  19:Core/Inc/utils\control/pid.h **** 
  20:Core/Inc/utils\control/pid.h ****         float compute_PID(float err, uint32_t dt_millis) {
  21:Core/Inc/utils\control/pid.h ****                 return algo_->compute(err, dt_millis);
 917              		.loc 6 21 0 discriminator 2
 918 00e4 D8F80000 		ldr	r0, [r8]
 919 00e8 0368     		ldr	r3, [r0]
 920 00ea 1B68     		ldr	r3, [r3]
 921 00ec 5146     		mov	r1, r10
 922 00ee 37EEC00A 		vsub.f32	s0, s15, s0
 923              	.LVL85:
 924 00f2 9847     		blx	r3
 925              	.LVL86:
 926              	.LBE413:
 927              	.LBE412:
 928              	.LBB414:
 929              	.LBB415:
  18:Core/Inc/utils\control/pid.h **** 
 930              		.loc 6 18 0 discriminator 2
 931 00f4 D8F80030 		ldr	r3, [r8]
 932              	.LBE415:
 933              	.LBE414:
 934              	.LBB416:
 935              	.LBB417:
  30:Core/Inc/utils\control/pid_algorithms.h ****         float get_Lower() { return min_; }
 936              		.loc 1 30 0 discriminator 2
 937 00f8 D3ED047A 		vldr.32	s15, [r3, #16]
 938              	.LBE417:
 939              	.LBE416:
 116:Core/Src/parts/actuator.cpp ****                 max_omega = wheels_[i].get_MaxOmega();
 940              		.loc 4 116 0 discriminator 2
 941 00fc F0EEE77A 		vabs.f32	s15, s15
 942              	.LVL87:
 943              	.LBB418:
 944              	.LBB419:
  64:Core/Inc/devs/wheel.h **** 
 945              		.loc 5 64 0 discriminator 2
 946 0100 2644     		add	r6, r6, r4
 947 0102 B300     		lsls	r3, r6, #2
 948 0104 FB58     		ldr	r3, [r7, r3]
 949 0106 93ED0A7A 		vldr.32	s14, [r3, #40]
 950              	.LVL88:
 951              	.LBE419:
 952              	.LBE418:
 122:Core/Src/parts/actuator.cpp **** 
 953              		.loc 4 122 0 discriminator 2
 954 010a 27EE000A 		vmul.f32	s0, s14, s0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 31


 124:Core/Src/parts/actuator.cpp ****                 // printf("(%ld, %ld, %ld)  ", (int32_t)(set_points[i]*1000), (int32_t)(omega[i][0]
 955              		.loc 4 124 0 discriminator 2
 956 010e 80EE270A 		vdiv.f32	s0, s0, s15
 957 0112 4846     		mov	r0, r9
 958 0114 FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 959              	.LVL89:
 105:Core/Src/parts/actuator.cpp ****                 // if (i != 2)
 960              		.loc 4 105 0 discriminator 2
 961 0118 0134     		adds	r4, r4, #1
 962              	.LVL90:
 963 011a E4B2     		uxtb	r4, r4
 964              	.LVL91:
 965 011c CBE7     		b	.L73
 966              	.L86:
 967              	.LBE409:
 968              	.LBB420:
 132:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 969              		.loc 4 132 0
 970 011e 0024     		movs	r4, #0
 971              	.LVL92:
 972              	.L72:
 132:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 973              		.loc 4 132 0 is_stmt 0 discriminator 3
 974 0120 032C     		cmp	r4, #3
 975 0122 08D8     		bhi	.L74
 133:Core/Src/parts/actuator.cpp ****         }
 976              		.loc 4 133 0 is_stmt 1 discriminator 2
 977 0124 04EB4403 		add	r3, r4, r4, lsl #1
 978 0128 9800     		lsls	r0, r3, #2
 979 012a 3844     		add	r0, r0, r7
 980 012c FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 981              	.LVL93:
 132:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 982              		.loc 4 132 0 discriminator 2
 983 0130 0134     		adds	r4, r4, #1
 984              	.LVL94:
 985 0132 E4B2     		uxtb	r4, r4
 986              	.LVL95:
 987 0134 F4E7     		b	.L72
 988              	.L74:
 989              	.LBE420:
 139:Core/Src/parts/actuator.cpp **** 
 990              		.loc 4 139 0
 991 0136 3149     		ldr	r1, .L89+12
 992 0138 11A8     		add	r0, sp, #68
 993 013a FFF7FEFF 		bl	_ZN3MatC1ERKS_
 994              	.LVL96:
 995              	.LBB421:
 996              	.LBB422:
 997              	.LBB423:
  24:Core/Inc/utils\math/mat.h ****                 fill(mat);
 998              		.loc 3 24 0
 999 013e 0122     		movs	r2, #1
 1000 0140 0421     		movs	r1, #4
 1001 0142 6846     		mov	r0, sp
 1002 0144 FFF7FEFF 		bl	_ZN3MatC1Ehh
 1003              	.LVL97:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 32


 1004              	.LBB424:
 1005              	.LBB425:
  95:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 1006              		.loc 3 95 0
 1007 0148 9DF84030 		ldrb	r3, [sp, #64]	@ zero_extendqisi2
 1008 014c 042B     		cmp	r3, #4
 1009 014e 03D0     		beq	.L75
 1010 0150 9DF84130 		ldrb	r3, [sp, #65]	@ zero_extendqisi2
 1011 0154 012B     		cmp	r3, #1
 1012 0156 01D1     		bne	.L88
 1013              	.L75:
 1014              	.LBE425:
 1015              	.LBE424:
 1016              	.LBE423:
 1017              	.LBE422:
 1018              	.LBE421:
 1019              	.LBB432:
 132:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 1020              		.loc 4 132 0
 1021 0158 0022     		movs	r2, #0
 1022 015a 06E0     		b	.L79
 1023              	.L88:
 1024              	.LBE432:
 1025              	.LBB433:
 1026              	.LBB431:
 1027              	.LBB430:
 1028              	.LBB429:
 1029              	.LBB428:
  96:Core/Inc/utils\math/mat.h ****                 }
 1030              		.loc 3 96 0
 1031 015c 6021     		movs	r1, #96
 1032 015e 2548     		ldr	r0, .L89+4
 1033 0160 FFF7FEFF 		bl	_Error_Handler
 1034              	.LVL98:
 1035 0164 F8E7     		b	.L75
 1036              	.LVL99:
 1037              	.L77:
 1038              	.LBB426:
  98:Core/Inc/utils\math/mat.h ****                         for (uint8_t j = 0; j < N; ++j) {
 1039              		.loc 3 98 0
 1040 0166 0132     		adds	r2, r2, #1
 1041              	.LVL100:
 1042 0168 D2B2     		uxtb	r2, r2
 1043              	.LVL101:
 1044              	.L79:
 1045 016a 032A     		cmp	r2, #3
 1046 016c 10D8     		bhi	.L76
 1047              	.LBB427:
  99:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 1048              		.loc 3 99 0
 1049 016e 0023     		movs	r3, #0
 1050              	.L78:
 1051              	.LVL102:
 1052 0170 002B     		cmp	r3, #0
 1053 0172 F8D1     		bne	.L77
 1054              		.loc 3 100 0
 1055 0174 D118     		adds	r1, r2, r3
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 33


 1056 0176 4CA8     		add	r0, sp, #304
 1057 0178 00EB8101 		add	r1, r0, r1, lsl #2
 1058 017c 51F8640C 		ldr	r0, [r1, #-100]	@ float
 1059 0180 03EB8201 		add	r1, r3, r2, lsl #2
 1060 0184 0DEB8101 		add	r1, sp, r1, lsl #2
 1061 0188 0860     		str	r0, [r1]	@ float
  99:Core/Inc/utils\math/mat.h ****                                 matrix_[i][j] = mat[i][j];
 1062              		.loc 3 99 0
 1063 018a 0133     		adds	r3, r3, #1
 1064              	.LVL103:
 1065 018c DBB2     		uxtb	r3, r3
 1066              	.LVL104:
 1067 018e EFE7     		b	.L78
 1068              	.LVL105:
 1069              	.L76:
 1070              	.LBE427:
 1071              	.LBE426:
 1072              	.LBE428:
 1073              	.LBE429:
 1074              	.LBE430:
 1075              	.LBE431:
 1076              	.LBE433:
 1077              	.LBB434:
 1078              	.LBB435:
  69:Core/Inc/utils\math/mat.h ****                 return lhs;
 1079              		.loc 3 69 0
 1080 0190 6946     		mov	r1, sp
 1081 0192 11A8     		add	r0, sp, #68
 1082              	.LVL106:
 1083 0194 FFF7FEFF 		bl	_ZN3MatmLERKS_
 1084              	.LVL107:
  70:Core/Inc/utils\math/mat.h ****         }
 1085              		.loc 3 70 0
 1086 0198 4422     		movs	r2, #68
 1087 019a 0DEB0201 		add	r1, sp, r2
 1088 019e 22A8     		add	r0, sp, #136
 1089 01a0 FFF7FEFF 		bl	memcpy
 1090              	.LVL108:
 1091              	.LBE435:
 1092              	.LBE434:
 1093              	.LBB436:
 1094              	.LBB437:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 1095              		.loc 3 37 0
 1096 01a4 9DF8C840 		ldrb	r4, [sp, #200]	@ zero_extendqisi2
 1097              	.LVL109:
 1098 01a8 14B1     		cbz	r4, .L80
 1099 01aa 9DF8C930 		ldrb	r3, [sp, #201]	@ zero_extendqisi2
 1100 01ae 1BB9     		cbnz	r3, .L81
 1101              	.L80:
  38:Core/Inc/utils\math/mat.h ****                 }
 1102              		.loc 3 38 0
 1103 01b0 2621     		movs	r1, #38
 1104 01b2 1048     		ldr	r0, .L89+4
 1105 01b4 FFF7FEFF 		bl	_Error_Handler
 1106              	.LVL110:
 1107              	.L81:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 34


 1108              	.LBE437:
 1109              	.LBE436:
 143:Core/Src/parts/actuator.cpp ****         return last_vel;
 1110              		.loc 4 143 0
 1111 01b8 229F     		ldr	r7, [sp, #136]	@ float
 1112              	.LVL111:
 1113              	.LBB438:
 1114              	.LBB439:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 1115              		.loc 3 37 0
 1116 01ba 012C     		cmp	r4, #1
 1117 01bc 02D9     		bls	.L82
 1118 01be 9DF8C930 		ldrb	r3, [sp, #201]	@ zero_extendqisi2
 1119 01c2 1BB9     		cbnz	r3, .L83
 1120              	.L82:
  38:Core/Inc/utils\math/mat.h ****                 }
 1121              		.loc 3 38 0
 1122 01c4 2621     		movs	r1, #38
 1123 01c6 0B48     		ldr	r0, .L89+4
 1124 01c8 FFF7FEFF 		bl	_Error_Handler
 1125              	.LVL112:
 1126              	.L83:
 1127              	.LBE439:
 1128              	.LBE438:
 143:Core/Src/parts/actuator.cpp ****         return last_vel;
 1129              		.loc 4 143 0
 1130 01cc 269E     		ldr	r6, [sp, #152]	@ float
 1131              	.LVL113:
 1132              	.LBB440:
 1133              	.LBB441:
  37:Core/Inc/utils\math/mat.h ****                         _Error_Handler(__FILE__, __LINE__);
 1134              		.loc 3 37 0
 1135 01ce 022C     		cmp	r4, #2
 1136 01d0 02D9     		bls	.L84
 1137 01d2 9DF8C930 		ldrb	r3, [sp, #201]	@ zero_extendqisi2
 1138 01d6 1BB9     		cbnz	r3, .L85
 1139              	.L84:
  38:Core/Inc/utils\math/mat.h ****                 }
 1140              		.loc 3 38 0
 1141 01d8 2621     		movs	r1, #38
 1142 01da 0648     		ldr	r0, .L89+4
 1143 01dc FFF7FEFF 		bl	_Error_Handler
 1144              	.LVL114:
 1145              	.L85:
 1146              	.LBE441:
 1147              	.LBE440:
 1148              	.LBB442:
 1149              	.LBB443:
 1150              	.LBB444:
 1151              	.LBB445:
 1152              		.file 7 "Core/Inc/utils\\math/vec3.h"
   1:Core/Inc/utils\math/vec3.h **** /*
   2:Core/Inc/utils\math/vec3.h ****  * vec3.h
   3:Core/Inc/utils\math/vec3.h ****  * 
   4:Core/Inc/utils\math/vec3.h ****  * Created : 11/9/2018
   5:Core/Inc/utils\math/vec3.h ****  *  Author : n-is
   6:Core/Inc/utils\math/vec3.h ****  *   email : 073bex422.nischal@pcampus.edu.np
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 35


   7:Core/Inc/utils\math/vec3.h ****  */
   8:Core/Inc/utils\math/vec3.h **** 
   9:Core/Inc/utils\math/vec3.h **** #ifndef _VEC3_H_
  10:Core/Inc/utils\math/vec3.h **** #define _VEC3_H_
  11:Core/Inc/utils\math/vec3.h **** 
  12:Core/Inc/utils\math/vec3.h **** #include "stm32f4xx_hal.h"
  13:Core/Inc/utils\math/vec3.h **** #include "main.h"
  14:Core/Inc/utils\math/vec3.h **** 
  15:Core/Inc/utils\math/vec3.h **** template <typename T>
  16:Core/Inc/utils\math/vec3.h **** void swap_Element(T &first, T &second)
  17:Core/Inc/utils\math/vec3.h **** {
  18:Core/Inc/utils\math/vec3.h ****         T temp = first;
  19:Core/Inc/utils\math/vec3.h ****         first = second;
  20:Core/Inc/utils\math/vec3.h ****         second = temp;
  21:Core/Inc/utils\math/vec3.h **** }
  22:Core/Inc/utils\math/vec3.h **** 
  23:Core/Inc/utils\math/vec3.h **** template <class T>
  24:Core/Inc/utils\math/vec3.h **** class Vec3
  25:Core/Inc/utils\math/vec3.h **** {
  26:Core/Inc/utils\math/vec3.h **** public:
  27:Core/Inc/utils\math/vec3.h ****         Vec3() { set_Values(0,0,0); }
  28:Core/Inc/utils\math/vec3.h ****         Vec3(T x, T y, T z) { set_Values(x,y,z); }
  29:Core/Inc/utils\math/vec3.h **** 
  30:Core/Inc/utils\math/vec3.h ****         Vec3(Vec3 &&) = default;
  31:Core/Inc/utils\math/vec3.h ****         Vec3 &operator=(Vec3 &&) = default;
  32:Core/Inc/utils\math/vec3.h ****         ~Vec3() { }
  33:Core/Inc/utils\math/vec3.h **** 
  34:Core/Inc/utils\math/vec3.h ****         T getX() const { return x_; }
  35:Core/Inc/utils\math/vec3.h ****         T getY() const { return y_; }
  36:Core/Inc/utils\math/vec3.h ****         T getZ() const { return z_; }
  37:Core/Inc/utils\math/vec3.h ****         void setX(T x) { x_ = x; }
 1153              		.loc 7 37 0
 1154 01e0 2F60     		str	r7, [r5]	@ float
 1155              	.LVL115:
 1156              	.LBE445:
 1157              	.LBE444:
 1158              	.LBB446:
 1159              	.LBB447:
  38:Core/Inc/utils\math/vec3.h ****         void setY(T y) { y_ = y; }
 1160              		.loc 7 38 0
 1161 01e2 6E60     		str	r6, [r5, #4]	@ float
 1162              	.LVL116:
 1163              	.LBE447:
 1164              	.LBE446:
 1165              	.LBB448:
 1166              	.LBB449:
  39:Core/Inc/utils\math/vec3.h ****         void setZ(T z) { z_ = z; }
 1167              		.loc 7 39 0
 1168 01e4 2A9B     		ldr	r3, [sp, #168]	@ float
 1169              	.LVL117:
 1170 01e6 AB60     		str	r3, [r5, #8]	@ float
 1171              	.LVL118:
 1172              	.LBE449:
 1173              	.LBE448:
 1174              	.LBE443:
 1175              	.LBE442:
 145:Core/Src/parts/actuator.cpp **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 36


 1176              		.loc 4 145 0
 1177 01e8 2846     		mov	r0, r5
 1178 01ea 4CB0     		add	sp, sp, #304
 1179              	.LCFI6:
 1180              		.cfi_def_cfa_offset 32
 1181              		@ sp needed
 1182 01ec BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1183              	.LVL119:
 1184              	.L90:
 1185              		.align	2
 1186              	.L89:
 1187 01f0 00000000 		.word	.LANCHOR2
 1188 01f4 00000000 		.word	.LC0
 1189 01f8 713D8A3D 		.word	1032469873
 1190 01fc 00000000 		.word	.LANCHOR4
 1191              		.cfi_endproc
 1192              	.LFE462:
 1194              		.section	.text._ZN8Actuator4stopEmfm,"ax",%progbits
 1195              		.align	1
 1196              		.global	_ZN8Actuator4stopEmfm
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv4-sp-d16
 1202              	_ZN8Actuator4stopEmfm:
 1203              	.LFB463:
 149:Core/Src/parts/actuator.cpp ****         float omega[4];
 1204              		.loc 4 149 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 8
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              	.LVL120:
 1209 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1210              	.LCFI7:
 1211              		.cfi_def_cfa_offset 36
 1212              		.cfi_offset 4, -36
 1213              		.cfi_offset 5, -32
 1214              		.cfi_offset 6, -28
 1215              		.cfi_offset 7, -24
 1216              		.cfi_offset 8, -20
 1217              		.cfi_offset 9, -16
 1218              		.cfi_offset 10, -12
 1219              		.cfi_offset 11, -8
 1220              		.cfi_offset 14, -4
 1221 0004 2DED028B 		vpush.64	{d8}
 1222              	.LCFI8:
 1223              		.cfi_def_cfa_offset 44
 1224              		.cfi_offset 80, -44
 1225              		.cfi_offset 81, -40
 1226 0008 83B0     		sub	sp, sp, #12
 1227              	.LCFI9:
 1228              		.cfi_def_cfa_offset 56
 1229 000a 0746     		mov	r7, r0
 1230 000c 0091     		str	r1, [sp]
 1231 000e B0EE408A 		vmov.f32	s16, s0
 1232 0012 9346     		mov	fp, r2
 1233              	.LVL121:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 37


 160:Core/Src/parts/actuator.cpp ****         uint32_t tick_end;
 1234              		.loc 4 160 0
 1235 0014 FFF7FEFF 		bl	HAL_GetTick
 1236              	.LVL122:
 1237 0018 8246     		mov	r10, r0
 1238              	.LVL123:
 1239              	.LBB450:
 163:Core/Src/parts/actuator.cpp ****                 
 1240              		.loc 4 163 0
 1241 001a 4FF00009 		mov	r9, #0
 1242              	.LBE450:
 158:Core/Src/parts/actuator.cpp **** 
 1243              		.loc 4 158 0
 1244 001e CDF80490 		str	r9, [sp, #4]
 1245 0022 5FE0     		b	.L100
 1246              	.LVL124:
 1247              	.L106:
 1248              	.LBB466:
 1249              	.LBB451:
 1250              	.LBB452:
 169:Core/Src/parts/actuator.cpp ****                         }else {
 1251              		.loc 4 169 0
 1252 0024 9FED360A 		vldr.32	s0, .L107
 1253 0028 2846     		mov	r0, r5
 1254 002a FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 1255              	.LVL125:
 1256              	.L96:
 183:Core/Src/parts/actuator.cpp ****                                 wheels_[i].set_Omega(0);
 1257              		.loc 4 183 0
 1258 002e FFF7FEFF 		bl	HAL_GetTick
 1259              	.LVL126:
 1260 0032 A0EB0A00 		sub	r0, r0, r10
 1261 0036 5845     		cmp	r0, fp
 1262 0038 37D8     		bhi	.L105
 1263              	.LVL127:
 1264              	.L97:
 165:Core/Src/parts/actuator.cpp ****                         omega[i] = wheels_[i].get_Omega(dt_millis);
 1265              		.loc 4 165 0 discriminator 2
 1266 003a 0134     		adds	r4, r4, #1
 1267              	.LVL128:
 1268 003c E4B2     		uxtb	r4, r4
 1269              	.LVL129:
 1270              	.L98:
 165:Core/Src/parts/actuator.cpp ****                         omega[i] = wheels_[i].get_Omega(dt_millis);
 1271              		.loc 4 165 0 is_stmt 0 discriminator 1
 1272 003e 032C     		cmp	r4, #3
 1273 0040 3BD8     		bhi	.L101
 166:Core/Src/parts/actuator.cpp **** 
 1274              		.loc 4 166 0 is_stmt 1
 1275 0042 04EB4403 		add	r3, r4, r4, lsl #1
 1276 0046 9D00     		lsls	r5, r3, #2
 1277 0048 3D44     		add	r5, r5, r7
 1278 004a 0099     		ldr	r1, [sp]
 1279 004c 2846     		mov	r0, r5
 1280 004e FFF7FEFF 		bl	_ZN5Wheel9get_OmegaEm
 1281              	.LVL130:
 168:Core/Src/parts/actuator.cpp ****                                 wheels_[i].set_Omega(0);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 38


 1282              		.loc 4 168 0
 1283 0052 B0EEC07A 		vabs.f32	s14, s0
 1284 0056 F1EE047A 		vmov.f32	s15, #5.0e+0
 1285 005a B4EEE77A 		vcmpe.f32	s14, s15
 1286 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1287 0062 DFD4     		bmi	.L106
 1288              	.LVL131:
 1289              	.LBB453:
 1290              	.LBB454:
 1291              		.loc 5 70 0
 1292 0064 6600     		lsls	r6, r4, #1
 1293 0066 3219     		adds	r2, r6, r4
 1294 0068 9300     		lsls	r3, r2, #2
 1295 006a FB58     		ldr	r3, [r7, r3]
 1296 006c D3F83080 		ldr	r8, [r3, #48]
 1297              	.LVL132:
 1298              	.LBE454:
 1299              	.LBE453:
 172:Core/Src/parts/actuator.cpp ****                                 voltage[i] = pid->compute_PID(error[i], dt_millis);
 1300              		.loc 4 172 0
 1301 0070 C0EE087A 		vdiv.f32	s15, s0, s16
 1302              	.LVL133:
 1303              	.LBB455:
 1304              	.LBB456:
 1305              		.loc 6 21 0
 1306 0074 D8F80000 		ldr	r0, [r8]
 1307 0078 0368     		ldr	r3, [r0]
 1308 007a 1B68     		ldr	r3, [r3]
 1309 007c 0099     		ldr	r1, [sp]
 1310 007e B1EE670A 		vneg.f32	s0, s15
 1311              	.LVL134:
 1312 0082 9847     		blx	r3
 1313              	.LVL135:
 1314              	.LBE456:
 1315              	.LBE455:
 1316              	.LBB457:
 1317              	.LBB458:
  18:Core/Inc/utils\control/pid.h **** 
 1318              		.loc 6 18 0
 1319 0084 D8F80030 		ldr	r3, [r8]
 1320              	.LBE458:
 1321              	.LBE457:
 1322              	.LBB459:
 1323              	.LBB460:
  30:Core/Inc/utils\control/pid_algorithms.h ****         float get_Lower() { return min_; }
 1324              		.loc 1 30 0
 1325 0088 D3ED047A 		vldr.32	s15, [r3, #16]
 1326              	.LBE460:
 1327              	.LBE459:
 176:Core/Src/parts/actuator.cpp ****                                 max_omega = wheels_[i].get_MaxOmega();
 1328              		.loc 4 176 0
 1329 008c F0EEE77A 		vabs.f32	s15, s15
 1330              	.LVL136:
 1331              	.LBB461:
 1332              	.LBB462:
  64:Core/Inc/devs/wheel.h **** 
 1333              		.loc 5 64 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 39


 1334 0090 2644     		add	r6, r6, r4
 1335 0092 B300     		lsls	r3, r6, #2
 1336 0094 FB58     		ldr	r3, [r7, r3]
 1337 0096 93ED0A7A 		vldr.32	s14, [r3, #40]
 1338              	.LVL137:
 1339              	.LBE462:
 1340              	.LBE461:
 178:Core/Src/parts/actuator.cpp **** 
 1341              		.loc 4 178 0
 1342 009a 27EE000A 		vmul.f32	s0, s14, s0
 180:Core/Src/parts/actuator.cpp ****                         }
 1343              		.loc 4 180 0
 1344 009e 80EE270A 		vdiv.f32	s0, s0, s15
 1345 00a2 2846     		mov	r0, r5
 1346 00a4 FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 1347              	.LVL138:
 1348 00a8 C1E7     		b	.L96
 1349              	.L105:
 184:Core/Src/parts/actuator.cpp ****                                 break_loop = true;
 1350              		.loc 4 184 0
 1351 00aa 9FED150A 		vldr.32	s0, .L107
 1352 00ae 2846     		mov	r0, r5
 1353 00b0 FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 1354              	.LVL139:
 185:Core/Src/parts/actuator.cpp ****                         }
 1355              		.loc 4 185 0
 1356 00b4 0123     		movs	r3, #1
 1357 00b6 0193     		str	r3, [sp, #4]
 1358 00b8 BFE7     		b	.L97
 1359              	.LVL140:
 1360              	.L101:
 1361              	.LBE452:
 1362              	.LBB463:
 190:Core/Src/parts/actuator.cpp ****                         wheels_[i].update();
 1363              		.loc 4 190 0
 1364 00ba 0024     		movs	r4, #0
 1365              	.LVL141:
 1366              	.L93:
 190:Core/Src/parts/actuator.cpp ****                         wheels_[i].update();
 1367              		.loc 4 190 0 is_stmt 0 discriminator 3
 1368 00bc 032C     		cmp	r4, #3
 1369 00be 08D8     		bhi	.L99
 191:Core/Src/parts/actuator.cpp ****                 }
 1370              		.loc 4 191 0 is_stmt 1 discriminator 2
 1371 00c0 04EB4403 		add	r3, r4, r4, lsl #1
 1372 00c4 9800     		lsls	r0, r3, #2
 1373 00c6 3844     		add	r0, r0, r7
 1374 00c8 FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 1375              	.LVL142:
 190:Core/Src/parts/actuator.cpp ****                         wheels_[i].update();
 1376              		.loc 4 190 0 discriminator 2
 1377 00cc 0134     		adds	r4, r4, #1
 1378              	.LVL143:
 1379 00ce E4B2     		uxtb	r4, r4
 1380              	.LVL144:
 1381 00d0 F4E7     		b	.L93
 1382              	.L99:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 40


 1383              	.LBE463:
 194:Core/Src/parts/actuator.cpp ****                         break;
 1384              		.loc 4 194 0
 1385 00d2 019B     		ldr	r3, [sp, #4]
 1386 00d4 5BB9     		cbnz	r3, .L92
 197:Core/Src/parts/actuator.cpp ****         }
 1387              		.loc 4 197 0 discriminator 2
 1388 00d6 0A20     		movs	r0, #10
 1389 00d8 FFF7FEFF 		bl	HAL_Delay
 1390              	.LVL145:
 1391              	.LBE451:
 163:Core/Src/parts/actuator.cpp ****                 
 1392              		.loc 4 163 0 discriminator 2
 1393 00dc 09F10109 		add	r9, r9, #1
 1394              	.LVL146:
 1395 00e0 5FFA89F9 		uxtb	r9, r9
 1396              	.LVL147:
 1397              	.L100:
 163:Core/Src/parts/actuator.cpp ****                 
 1398              		.loc 4 163 0 is_stmt 0 discriminator 1
 1399 00e4 B9F1090F 		cmp	r9, #9
 1400 00e8 01D8     		bhi	.L92
 1401              	.LBB465:
 1402              	.LBB464:
 165:Core/Src/parts/actuator.cpp ****                         omega[i] = wheels_[i].get_Omega(dt_millis);
 1403              		.loc 4 165 0 is_stmt 1
 1404 00ea 0024     		movs	r4, #0
 1405 00ec A7E7     		b	.L98
 1406              	.L92:
 1407              	.LBE464:
 1408              	.LBE465:
 1409              	.LBE466:
 199:Core/Src/parts/actuator.cpp ****         return (tick_end - tick_start);
 1410              		.loc 4 199 0
 1411 00ee FFF7FEFF 		bl	HAL_GetTick
 1412              	.LVL148:
 201:Core/Src/parts/actuator.cpp **** 
 1413              		.loc 4 201 0
 1414 00f2 A0EB0A00 		sub	r0, r0, r10
 1415              	.LVL149:
 1416 00f6 03B0     		add	sp, sp, #12
 1417              	.LCFI10:
 1418              		.cfi_def_cfa_offset 44
 1419              	.LVL150:
 1420              		@ sp needed
 1421 00f8 BDEC028B 		vldm	sp!, {d8}
 1422              	.LCFI11:
 1423              		.cfi_restore 80
 1424              		.cfi_restore 81
 1425              		.cfi_def_cfa_offset 36
 1426              	.LVL151:
 1427 00fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1428              	.LVL152:
 1429              	.L108:
 1430              		.align	2
 1431              	.L107:
 1432 0100 00000000 		.word	0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 41


 1433              		.cfi_endproc
 1434              	.LFE463:
 1436              		.section	.text._ZN8Actuator11wheels_InitEv,"ax",%progbits
 1437              		.align	1
 1438              		.global	_ZN8Actuator11wheels_InitEv
 1439              		.syntax unified
 1440              		.thumb
 1441              		.thumb_func
 1442              		.fpu fpv4-sp-d16
 1444              	_ZN8Actuator11wheels_InitEv:
 1445              	.LFB464:
 226:Core/Src/parts/actuator.cpp ****         int i;
 1446              		.loc 4 226 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              	.LVL153:
 1451 0000 70B5     		push	{r4, r5, r6, lr}
 1452              	.LCFI12:
 1453              		.cfi_def_cfa_offset 16
 1454              		.cfi_offset 4, -16
 1455              		.cfi_offset 5, -12
 1456              		.cfi_offset 6, -8
 1457              		.cfi_offset 14, -4
 1458 0002 0546     		mov	r5, r0
 1459              	.LVL154:
 228:Core/Src/parts/actuator.cpp ****         {
 1460              		.loc 4 228 0
 1461 0004 0023     		movs	r3, #0
 1462              	.LVL155:
 1463              	.L111:
 228:Core/Src/parts/actuator.cpp ****         {
 1464              		.loc 4 228 0 is_stmt 0 discriminator 3
 1465 0006 032B     		cmp	r3, #3
 1466 0008 0DDC     		bgt	.L110
 230:Core/Src/parts/actuator.cpp ****                 gWheel_Configurations[i].radius = 0.0675;
 1467              		.loc 4 230 0 is_stmt 1 discriminator 2
 1468 000a 3248     		ldr	r0, .L115
 1469 000c 3422     		movs	r2, #52
 1470 000e 02FB03F2 		mul	r2, r2, r3
 1471 0012 8118     		adds	r1, r0, r2
 1472 0014 8354     		strb	r3, [r0, r2]
 231:Core/Src/parts/actuator.cpp ****                 // All motors are connected to same timer : TIM8
 1473              		.loc 4 231 0 discriminator 2
 1474 0016 304A     		ldr	r2, .L115+4
 1475 0018 4A60     		str	r2, [r1, #4]	@ float
 233:Core/Src/parts/actuator.cpp ****                 //! Need to make sure the following value is correct
 1476              		.loc 4 233 0 discriminator 2
 1477 001a 304A     		ldr	r2, .L115+8
 1478 001c 8A61     		str	r2, [r1, #24]
 235:Core/Src/parts/actuator.cpp ****         }
 1479              		.loc 4 235 0 discriminator 2
 1480 001e F922     		movs	r2, #249
 1481 0020 CA62     		str	r2, [r1, #44]
 228:Core/Src/parts/actuator.cpp ****         {
 1482              		.loc 4 228 0 discriminator 2
 1483 0022 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 42


 1484              	.LVL156:
 1485 0024 EFE7     		b	.L111
 1486              	.L110:
 237:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in2_pin = GPIO_PIN_0;
 1487              		.loc 4 237 0
 1488 0026 2B4B     		ldr	r3, .L115
 1489              	.LVL157:
 1490 0028 2D4E     		ldr	r6, .L115+12
 1491 002a 1E61     		str	r6, [r3, #16]
 238:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in1_port = GPIOE;
 1492              		.loc 4 238 0
 1493 002c 0122     		movs	r2, #1
 1494 002e 9A82     		strh	r2, [r3, #20]	@ movhi
 239:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].in1_pin = GPIO_PIN_5; 
 1495              		.loc 4 239 0
 1496 0030 2C4A     		ldr	r2, .L115+16
 1497 0032 9A60     		str	r2, [r3, #8]
 240:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].channel = TIM_CHANNEL_1;
 1498              		.loc 4 240 0
 1499 0034 2021     		movs	r1, #32
 1500 0036 9981     		strh	r1, [r3, #12]	@ movhi
 241:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].henc = &htim4;
 1501              		.loc 4 241 0
 1502 0038 0024     		movs	r4, #0
 1503 003a DC61     		str	r4, [r3, #28]
 242:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[0].max_omega = 69;
 1504              		.loc 4 242 0
 1505 003c 2A48     		ldr	r0, .L115+20
 1506 003e 1862     		str	r0, [r3, #32]
 243:Core/Src/parts/actuator.cpp **** 
 1507              		.loc 4 243 0
 1508 0040 2A48     		ldr	r0, .L115+24
 1509 0042 9862     		str	r0, [r3, #40]	@ float
 245:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in2_pin = GPIO_PIN_10;
 1510              		.loc 4 245 0
 1511 0044 2A48     		ldr	r0, .L115+28
 1512 0046 5864     		str	r0, [r3, #68]
 246:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in1_port = GPIOB;
 1513              		.loc 4 246 0
 1514 0048 4FF48060 		mov	r0, #1024
 1515 004c A3F84800 		strh	r0, [r3, #72]	@ movhi
 247:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].in1_pin = GPIO_PIN_5;
 1516              		.loc 4 247 0
 1517 0050 00F18040 		add	r0, r0, #1073741824
 1518 0054 00F50030 		add	r0, r0, #131072
 1519 0058 D863     		str	r0, [r3, #60]
 248:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].channel = TIM_CHANNEL_2;
 1520              		.loc 4 248 0
 1521 005a A3F84010 		strh	r1, [r3, #64]	@ movhi
 249:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].henc = &htim2;
 1522              		.loc 4 249 0
 1523 005e 0420     		movs	r0, #4
 1524 0060 1865     		str	r0, [r3, #80]
 250:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[1].max_omega = 70;
 1525              		.loc 4 250 0
 1526 0062 2449     		ldr	r1, .L115+32
 1527 0064 5965     		str	r1, [r3, #84]
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 43


 251:Core/Src/parts/actuator.cpp ****         
 1528              		.loc 4 251 0
 1529 0066 2449     		ldr	r1, .L115+36
 1530 0068 D965     		str	r1, [r3, #92]	@ float
 253:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in2_pin = GPIO_PIN_3;
 1531              		.loc 4 253 0
 1532 006a 9A67     		str	r2, [r3, #120]
 254:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in1_port = GPIOD;
 1533              		.loc 4 254 0
 1534 006c 0821     		movs	r1, #8
 1535 006e A3F87C10 		strh	r1, [r3, #124]	@ movhi
 255:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].in1_pin = GPIO_PIN_2;
 1536              		.loc 4 255 0
 1537 0072 1E67     		str	r6, [r3, #112]
 256:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].channel = TIM_CHANNEL_3;
 1538              		.loc 4 256 0
 1539 0074 A3F87400 		strh	r0, [r3, #116]	@ movhi
 257:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].henc = &htim3;
 1540              		.loc 4 257 0
 1541 0078 C3F88410 		str	r1, [r3, #132]
 258:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[2].max_omega = 68;
 1542              		.loc 4 258 0
 1543 007c 1F49     		ldr	r1, .L115+40
 1544 007e C3F88810 		str	r1, [r3, #136]
 259:Core/Src/parts/actuator.cpp **** 
 1545              		.loc 4 259 0
 1546 0082 1F49     		ldr	r1, .L115+44
 1547 0084 C3F89010 		str	r1, [r3, #144]	@ float
 261:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in2_pin = GPIO_PIN_13;
 1548              		.loc 4 261 0
 1549 0088 1E48     		ldr	r0, .L115+48
 1550 008a C3F8AC00 		str	r0, [r3, #172]
 262:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in1_port = GPIOE;
 1551              		.loc 4 262 0
 1552 008e 4FF40050 		mov	r0, #8192
 1553 0092 A3F8B000 		strh	r0, [r3, #176]	@ movhi
 263:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].in1_pin = GPIO_PIN_1;
 1554              		.loc 4 263 0
 1555 0096 C3F8A420 		str	r2, [r3, #164]
 264:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].channel = TIM_CHANNEL_4;
 1556              		.loc 4 264 0
 1557 009a 0222     		movs	r2, #2
 1558 009c A3F8A820 		strh	r2, [r3, #168]	@ movhi
 265:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].henc = &htim1;
 1559              		.loc 4 265 0
 1560 00a0 0C22     		movs	r2, #12
 1561 00a2 C3F8B820 		str	r2, [r3, #184]
 266:Core/Src/parts/actuator.cpp ****         gWheel_Configurations[3].max_omega = 68;
 1562              		.loc 4 266 0
 1563 00a6 184A     		ldr	r2, .L115+52
 1564 00a8 C3F8BC20 		str	r2, [r3, #188]
 267:Core/Src/parts/actuator.cpp **** 
 1565              		.loc 4 267 0
 1566 00ac C3F8C410 		str	r1, [r3, #196]	@ float
 1567              	.LVL158:
 1568              	.L113:
 1569              	.LBB467:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 44


 269:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Config(&gWheel_Configurations[i]);
 1570              		.loc 4 269 0 discriminator 3
 1571 00b0 032C     		cmp	r4, #3
 1572 00b2 0ED8     		bhi	.L109
 270:Core/Src/parts/actuator.cpp ****                 wheels_[i].start_Periphs();
 1573              		.loc 4 270 0 discriminator 2
 1574 00b4 074B     		ldr	r3, .L115
 1575 00b6 3422     		movs	r2, #52
 1576 00b8 02FB0432 		mla	r2, r2, r4, r3
 1577              	.LVL159:
 1578              	.LBB468:
 1579              	.LBB469:
  58:Core/Inc/devs/wheel.h ****         void set_Direction(enum Direction d) { dir_ = d; }
 1580              		.loc 5 58 0 discriminator 2
 1581 00bc 6300     		lsls	r3, r4, #1
 1582 00be 1819     		adds	r0, r3, r4
 1583 00c0 8100     		lsls	r1, r0, #2
 1584 00c2 0846     		mov	r0, r1
 1585 00c4 6A50     		str	r2, [r5, r1]
 1586              	.LVL160:
 1587              	.LBE469:
 1588              	.LBE468:
 271:Core/Src/parts/actuator.cpp ****         }
 1589              		.loc 4 271 0 discriminator 2
 1590 00c6 2844     		add	r0, r0, r5
 1591 00c8 FFF7FEFF 		bl	_ZN5Wheel13start_PeriphsEv
 1592              	.LVL161:
 269:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Config(&gWheel_Configurations[i]);
 1593              		.loc 4 269 0 discriminator 2
 1594 00cc 0134     		adds	r4, r4, #1
 1595              	.LVL162:
 1596 00ce E4B2     		uxtb	r4, r4
 1597              	.LVL163:
 1598 00d0 EEE7     		b	.L113
 1599              	.L109:
 1600              	.LBE467:
 273:Core/Src/parts/actuator.cpp **** 
 1601              		.loc 4 273 0
 1602 00d2 70BD     		pop	{r4, r5, r6, pc}
 1603              	.LVL164:
 1604              	.L116:
 1605              		.align	2
 1606              	.L115:
 1607 00d4 00000000 		.word	.LANCHOR8
 1608 00d8 713D8A3D 		.word	1032469873
 1609 00dc 00000000 		.word	htim8
 1610 00e0 000C0240 		.word	1073875968
 1611 00e4 00100240 		.word	1073876992
 1612 00e8 00000000 		.word	htim4
 1613 00ec 00008A42 		.word	1116340224
 1614 00f0 00000240 		.word	1073872896
 1615 00f4 00000000 		.word	htim2
 1616 00f8 00008C42 		.word	1116471296
 1617 00fc 00000000 		.word	htim3
 1618 0100 00008842 		.word	1116209152
 1619 0104 00080240 		.word	1073874944
 1620 0108 00000000 		.word	htim1
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 45


 1621              		.cfi_endproc
 1622              	.LFE464:
 1624              		.section	.text._ZN8Actuator8pid_InitEv,"ax",%progbits
 1625              		.align	1
 1626              		.global	_ZN8Actuator8pid_InitEv
 1627              		.syntax unified
 1628              		.thumb
 1629              		.thumb_func
 1630              		.fpu fpv4-sp-d16
 1632              	_ZN8Actuator8pid_InitEv:
 1633              	.LFB465:
 294:Core/Src/parts/actuator.cpp ****         gDisc_PID[0].set_PID(0.2538, gI_Factor*6.0, 0);
 1634              		.loc 4 294 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639              	.LVL165:
 1640 0000 30B4     		push	{r4, r5}
 1641              	.LCFI13:
 1642              		.cfi_def_cfa_offset 8
 1643              		.cfi_offset 4, -8
 1644              		.cfi_offset 5, -4
 1645              	.LVL166:
 1646              	.LBB470:
 1647              	.LBB471:
 1648              	.LBB472:
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
 1649              		.loc 1 13 0
 1650 0002 1C4B     		ldr	r3, .L121
 1651 0004 1C4A     		ldr	r2, .L121+4
 1652 0006 5A60     		str	r2, [r3, #4]	@ float
 1653              	.LVL167:
 1654              	.LBE472:
 1655              	.LBE471:
 1656              	.LBB473:
 1657              	.LBB474:
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
 1658              		.loc 1 14 0
 1659 0008 1C4A     		ldr	r2, .L121+8
 1660 000a 9A60     		str	r2, [r3, #8]	@ float
 1661              	.LVL168:
 1662              	.LBE474:
 1663              	.LBE473:
 1664              	.LBB475:
 1665              	.LBB476:
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
 1666              		.loc 1 15 0
 1667 000c 0024     		movs	r4, #0
 1668 000e DC60     		str	r4, [r3, #12]	@ float
 1669              	.LVL169:
 1670              	.LBE476:
 1671              	.LBE475:
 1672              	.LBE470:
 1673              	.LBB477:
 1674              	.LBB478:
  26:Core/Inc/utils\control/pid_algorithms.h ****                 min_ = min_out;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 46


 1675              		.loc 1 26 0
 1676 0010 1B49     		ldr	r1, .L121+12
 1677 0012 1961     		str	r1, [r3, #16]	@ float
  27:Core/Inc/utils\control/pid_algorithms.h ****         }
 1678              		.loc 1 27 0
 1679 0014 1B4A     		ldr	r2, .L121+16
 1680 0016 5A61     		str	r2, [r3, #20]	@ float
 1681              	.LVL170:
 1682              	.LBE478:
 1683              	.LBE477:
 1684              	.LBB479:
 1685              	.LBB480:
 1686              	.LBB481:
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
 1687              		.loc 1 13 0
 1688 0018 1B4D     		ldr	r5, .L121+20
 1689 001a 9D62     		str	r5, [r3, #40]	@ float
 1690              	.LVL171:
 1691              	.LBE481:
 1692              	.LBE480:
 1693              	.LBB482:
 1694              	.LBB483:
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
 1695              		.loc 1 14 0
 1696 001c 1B4D     		ldr	r5, .L121+24
 1697 001e DD62     		str	r5, [r3, #44]	@ float
 1698              	.LVL172:
 1699              	.LBE483:
 1700              	.LBE482:
 1701              	.LBB484:
 1702              	.LBB485:
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
 1703              		.loc 1 15 0
 1704 0020 1C63     		str	r4, [r3, #48]	@ float
 1705              	.LVL173:
 1706              	.LBE485:
 1707              	.LBE484:
 1708              	.LBE479:
 1709              	.LBB486:
 1710              	.LBB487:
  26:Core/Inc/utils\control/pid_algorithms.h ****                 min_ = min_out;
 1711              		.loc 1 26 0
 1712 0022 5963     		str	r1, [r3, #52]	@ float
  27:Core/Inc/utils\control/pid_algorithms.h ****         }
 1713              		.loc 1 27 0
 1714 0024 9A63     		str	r2, [r3, #56]	@ float
 1715              	.LVL174:
 1716              	.LBE487:
 1717              	.LBE486:
 1718              	.LBB488:
 1719              	.LBB489:
 1720              	.LBB490:
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
 1721              		.loc 1 13 0
 1722 0026 1A4D     		ldr	r5, .L121+28
 1723 0028 DD64     		str	r5, [r3, #76]	@ float
 1724              	.LVL175:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 47


 1725              	.LBE490:
 1726              	.LBE489:
 1727              	.LBB491:
 1728              	.LBB492:
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
 1729              		.loc 1 14 0
 1730 002a 1A4D     		ldr	r5, .L121+32
 1731 002c 1D65     		str	r5, [r3, #80]	@ float
 1732              	.LVL176:
 1733              	.LBE492:
 1734              	.LBE491:
 1735              	.LBB493:
 1736              	.LBB494:
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
 1737              		.loc 1 15 0
 1738 002e 5C65     		str	r4, [r3, #84]	@ float
 1739              	.LVL177:
 1740              	.LBE494:
 1741              	.LBE493:
 1742              	.LBE488:
 1743              	.LBB495:
 1744              	.LBB496:
  26:Core/Inc/utils\control/pid_algorithms.h ****                 min_ = min_out;
 1745              		.loc 1 26 0
 1746 0030 9965     		str	r1, [r3, #88]	@ float
  27:Core/Inc/utils\control/pid_algorithms.h ****         }
 1747              		.loc 1 27 0
 1748 0032 DA65     		str	r2, [r3, #92]	@ float
 1749              	.LVL178:
 1750              	.LBE496:
 1751              	.LBE495:
 1752              	.LBB497:
 1753              	.LBB498:
 1754              	.LBB499:
  13:Core/Inc/utils\control/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
 1755              		.loc 1 13 0
 1756 0034 184D     		ldr	r5, .L121+36
 1757 0036 1D67     		str	r5, [r3, #112]	@ float
 1758              	.LVL179:
 1759              	.LBE499:
 1760              	.LBE498:
 1761              	.LBB500:
 1762              	.LBB501:
  14:Core/Inc/utils\control/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
 1763              		.loc 1 14 0
 1764 0038 184D     		ldr	r5, .L121+40
 1765 003a 5D67     		str	r5, [r3, #116]	@ float
 1766              	.LVL180:
 1767              	.LBE501:
 1768              	.LBE500:
 1769              	.LBB502:
 1770              	.LBB503:
  15:Core/Inc/utils\control/pid_algorithms.h ****         void set_PID(float p, float i, float d) {
 1771              		.loc 1 15 0
 1772 003c 9C67     		str	r4, [r3, #120]	@ float
 1773              	.LVL181:
 1774              	.LBE503:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 48


 1775              	.LBE502:
 1776              	.LBE497:
 1777              	.LBB504:
 1778              	.LBB505:
  26:Core/Inc/utils\control/pid_algorithms.h ****                 min_ = min_out;
 1779              		.loc 1 26 0
 1780 003e D967     		str	r1, [r3, #124]	@ float
  27:Core/Inc/utils\control/pid_algorithms.h ****         }
 1781              		.loc 1 27 0
 1782 0040 C3F88020 		str	r2, [r3, #128]	@ float
 1783              	.LVL182:
 1784              	.LBE505:
 1785              	.LBE504:
 1786              	.LBB506:
 304:Core/Src/parts/actuator.cpp ****                 gPID[i].set_Algorithm(&gDisc_PID[i]);
 1787              		.loc 4 304 0
 1788 0044 0023     		movs	r3, #0
 1789              	.LVL183:
 1790              	.L119:
 304:Core/Src/parts/actuator.cpp ****                 gPID[i].set_Algorithm(&gDisc_PID[i]);
 1791              		.loc 4 304 0 is_stmt 0 discriminator 3
 1792 0046 032B     		cmp	r3, #3
 1793 0048 11D8     		bhi	.L117
 305:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_PIDController(&gPID[i]);
 1794              		.loc 4 305 0 is_stmt 1 discriminator 2
 1795 004a 03EBC301 		add	r1, r3, r3, lsl #3
 1796 004e 8A00     		lsls	r2, r1, #2
 1797 0050 0849     		ldr	r1, .L121
 1798 0052 1144     		add	r1, r1, r2
 1799              	.LVL184:
 1800              	.LBB507:
 1801              	.LBB508:
  17:Core/Inc/utils\control/pid.h ****         PID_Algorithm * get_Algorithm() { return algo_; }
 1802              		.loc 6 17 0 discriminator 2
 1803 0054 124A     		ldr	r2, .L121+44
 1804 0056 42F82310 		str	r1, [r2, r3, lsl #2]
 1805              	.LVL185:
 1806              	.LBE508:
 1807              	.LBE507:
 306:Core/Src/parts/actuator.cpp ****         }
 1808              		.loc 4 306 0 discriminator 2
 1809 005a 02EB8302 		add	r2, r2, r3, lsl #2
 1810              	.LVL186:
 1811              	.LBB509:
 1812              	.LBB510:
  68:Core/Inc/devs/wheel.h ****         PID * get_PIDController() {
 1813              		.loc 5 68 0 discriminator 2
 1814 005e 03EB4304 		add	r4, r3, r3, lsl #1
 1815 0062 A100     		lsls	r1, r4, #2
 1816 0064 4158     		ldr	r1, [r0, r1]
 1817 0066 0A63     		str	r2, [r1, #48]
 1818              	.LVL187:
 1819              	.LBE510:
 1820              	.LBE509:
 304:Core/Src/parts/actuator.cpp ****                 gPID[i].set_Algorithm(&gDisc_PID[i]);
 1821              		.loc 4 304 0 discriminator 2
 1822 0068 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 49


 1823              	.LVL188:
 1824 006a DBB2     		uxtb	r3, r3
 1825              	.LVL189:
 1826 006c EBE7     		b	.L119
 1827              	.L117:
 1828              	.LBE506:
 308:Core/Src/parts/actuator.cpp **** 
 1829              		.loc 4 308 0
 1830 006e 30BC     		pop	{r4, r5}
 1831              	.LCFI14:
 1832              		.cfi_restore 5
 1833              		.cfi_restore 4
 1834              		.cfi_def_cfa_offset 0
 1835 0070 7047     		bx	lr
 1836              	.L122:
 1837 0072 00BF     		.align	2
 1838              	.L121:
 1839 0074 00000000 		.word	.LANCHOR0
 1840 0078 13F2813E 		.word	1048703507
 1841 007c 00004041 		.word	1094713344
 1842 0080 0000C041 		.word	1103101952
 1843 0084 0000C0C1 		.word	-1044381696
 1844 0088 5BD37C3E 		.word	1048367963
 1845 008c EC516041 		.word	1096831468
 1846 0090 CA32043F 		.word	1057239754
 1847 0094 21B07A41 		.word	1098559521
 1848 0098 CBA1853E 		.word	1048945099
 1849 009c 19048841 		.word	1099432985
 1850 00a0 00000000 		.word	.LANCHOR1
 1851              		.cfi_endproc
 1852              	.LFE465:
 1854              		.section	.text._ZN8Actuator4initEv,"ax",%progbits
 1855              		.align	1
 1856              		.global	_ZN8Actuator4initEv
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	_ZN8Actuator4initEv:
 1863              	.LFB461:
  42:Core/Src/parts/actuator.cpp ****         // Initialize all wheels of the robot
 1864              		.loc 4 42 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 1868              	.LVL190:
 1869 0000 10B5     		push	{r4, lr}
 1870              	.LCFI15:
 1871              		.cfi_def_cfa_offset 8
 1872              		.cfi_offset 4, -8
 1873              		.cfi_offset 14, -4
 1874 0002 0446     		mov	r4, r0
  44:Core/Src/parts/actuator.cpp ****         // Initializes PID parameters for all wheels
 1875              		.loc 4 44 0
 1876 0004 FFF7FEFF 		bl	_ZN8Actuator11wheels_InitEv
 1877              	.LVL191:
  46:Core/Src/parts/actuator.cpp **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 50


 1878              		.loc 4 46 0
 1879 0008 2046     		mov	r0, r4
 1880 000a FFF7FEFF 		bl	_ZN8Actuator8pid_InitEv
 1881              	.LVL192:
  49:Core/Src/parts/actuator.cpp **** 
 1882              		.loc 4 49 0
 1883 000e 0020     		movs	r0, #0
 1884 0010 10BD     		pop	{r4, pc}
 1885              		.cfi_endproc
 1886              	.LFE461:
 1888              		.global	__aeabi_f2d
 1889              		.global	__aeabi_ddiv
 1890              		.global	__aeabi_d2uiz
 1891              		.section	.text._ZN8Actuator7profileE4Vec3IfEm,"ax",%progbits
 1892              		.align	1
 1893              		.global	_ZN8Actuator7profileE4Vec3IfEm
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu fpv4-sp-d16
 1899              	_ZN8Actuator7profileE4Vec3IfEm:
 1900              	.LFB466:
 311:Core/Src/parts/actuator.cpp ****         // Takes a total of about 5 seconds to profile actuator
 1901              		.loc 4 311 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 48
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              	.LVL193:
 1906 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1907              	.LCFI16:
 1908              		.cfi_def_cfa_offset 32
 1909              		.cfi_offset 4, -32
 1910              		.cfi_offset 5, -28
 1911              		.cfi_offset 6, -24
 1912              		.cfi_offset 7, -20
 1913              		.cfi_offset 8, -16
 1914              		.cfi_offset 9, -12
 1915              		.cfi_offset 10, -8
 1916              		.cfi_offset 14, -4
 1917 0004 8CB0     		sub	sp, sp, #48
 1918              	.LCFI17:
 1919              		.cfi_def_cfa_offset 80
 1920 0006 8146     		mov	r9, r0
 1921 0008 0E46     		mov	r6, r1
 1922 000a 1546     		mov	r5, r2
 313:Core/Src/parts/actuator.cpp ****         vel.print();
 1923              		.loc 4 313 0
 1924 000c 4748     		ldr	r0, .L130
 1925              	.LVL194:
 1926 000e FFF7FEFF 		bl	printf
 1927              	.LVL195:
 1928              	.LBB536:
 1929              	.LBB537:
  40:Core/Inc/utils\math/vec3.h **** 
  41:Core/Inc/utils\math/vec3.h ****         void set_Values(T x, T y, T z) {
  42:Core/Inc/utils\math/vec3.h ****                 setX(x);
  43:Core/Inc/utils\math/vec3.h ****                 setY(y);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 51


  44:Core/Inc/utils\math/vec3.h ****                 setZ(z);
  45:Core/Inc/utils\math/vec3.h ****         }
  46:Core/Inc/utils\math/vec3.h **** 
  47:Core/Inc/utils\math/vec3.h **** 
  48:Core/Inc/utils\math/vec3.h ****         Vec3 mult_EW(float num) {
  49:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(*this);
  50:Core/Inc/utils\math/vec3.h ****                 temp.x_ *= num;
  51:Core/Inc/utils\math/vec3.h ****                 temp.y_ *= num;
  52:Core/Inc/utils\math/vec3.h ****                 temp.z_ *= num;
  53:Core/Inc/utils\math/vec3.h **** 
  54:Core/Inc/utils\math/vec3.h ****                 return temp;
  55:Core/Inc/utils\math/vec3.h ****         }
  56:Core/Inc/utils\math/vec3.h **** 
  57:Core/Inc/utils\math/vec3.h ****         template <typename T1>
  58:Core/Inc/utils\math/vec3.h ****         Vec3 mult_EW(Vec3<T1> v) {
  59:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(v);
  60:Core/Inc/utils\math/vec3.h ****                 temp.x_ *= x_;
  61:Core/Inc/utils\math/vec3.h ****                 temp.y_ *= y_;
  62:Core/Inc/utils\math/vec3.h ****                 temp.z_ *= z_;
  63:Core/Inc/utils\math/vec3.h **** 
  64:Core/Inc/utils\math/vec3.h ****                 return temp;
  65:Core/Inc/utils\math/vec3.h ****         }
  66:Core/Inc/utils\math/vec3.h **** 
  67:Core/Inc/utils\math/vec3.h **** 
  68:Core/Inc/utils\math/vec3.h ****         Vec3 add_EW(float num) {
  69:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(*this);
  70:Core/Inc/utils\math/vec3.h ****                 temp.x_ += num;
  71:Core/Inc/utils\math/vec3.h ****                 temp.y_ += num;
  72:Core/Inc/utils\math/vec3.h ****                 temp.z_ += num;
  73:Core/Inc/utils\math/vec3.h **** 
  74:Core/Inc/utils\math/vec3.h ****                 return temp;
  75:Core/Inc/utils\math/vec3.h ****         }
  76:Core/Inc/utils\math/vec3.h **** 
  77:Core/Inc/utils\math/vec3.h ****         template <typename T1>
  78:Core/Inc/utils\math/vec3.h ****         Vec3 add_EW(Vec3<T1> v) {
  79:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(v);
  80:Core/Inc/utils\math/vec3.h ****                 temp.x_ += x_;
  81:Core/Inc/utils\math/vec3.h ****                 temp.y_ += y_;
  82:Core/Inc/utils\math/vec3.h ****                 temp.z_ += z_;
  83:Core/Inc/utils\math/vec3.h **** 
  84:Core/Inc/utils\math/vec3.h ****                 return temp;
  85:Core/Inc/utils\math/vec3.h ****         }
  86:Core/Inc/utils\math/vec3.h **** 
  87:Core/Inc/utils\math/vec3.h **** 
  88:Core/Inc/utils\math/vec3.h ****         Vec3 sub_EW(float num) {
  89:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(*this);
  90:Core/Inc/utils\math/vec3.h ****                 temp.x_ -= num;
  91:Core/Inc/utils\math/vec3.h ****                 temp.y_ -= num;
  92:Core/Inc/utils\math/vec3.h ****                 temp.z_ -= num;
  93:Core/Inc/utils\math/vec3.h **** 
  94:Core/Inc/utils\math/vec3.h ****                 return temp;
  95:Core/Inc/utils\math/vec3.h ****         }
  96:Core/Inc/utils\math/vec3.h **** 
  97:Core/Inc/utils\math/vec3.h ****         template <typename T1>
  98:Core/Inc/utils\math/vec3.h ****         Vec3 sub_EW(Vec3<T1> v) {
  99:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(v);
 100:Core/Inc/utils\math/vec3.h ****                 temp.x_ -= x_;
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 52


 101:Core/Inc/utils\math/vec3.h ****                 temp.y_ -= y_;
 102:Core/Inc/utils\math/vec3.h ****                 temp.z_ -= z_;
 103:Core/Inc/utils\math/vec3.h **** 
 104:Core/Inc/utils\math/vec3.h ****                 return temp;
 105:Core/Inc/utils\math/vec3.h ****         }
 106:Core/Inc/utils\math/vec3.h **** 
 107:Core/Inc/utils\math/vec3.h **** 
 108:Core/Inc/utils\math/vec3.h ****         Vec3 div_EW(float num) {
 109:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(*this);
 110:Core/Inc/utils\math/vec3.h ****                 temp.x_ /= (float)num;
 111:Core/Inc/utils\math/vec3.h ****                 temp.y_ /= (float)num;
 112:Core/Inc/utils\math/vec3.h ****                 temp.z_ /= (float)num;
 113:Core/Inc/utils\math/vec3.h **** 
 114:Core/Inc/utils\math/vec3.h ****                 return temp;
 115:Core/Inc/utils\math/vec3.h ****         }
 116:Core/Inc/utils\math/vec3.h **** 
 117:Core/Inc/utils\math/vec3.h ****         template <typename T1>
 118:Core/Inc/utils\math/vec3.h ****         Vec3 div_EW(Vec3<T1> v) {
 119:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(*this);
 120:Core/Inc/utils\math/vec3.h ****                 temp.x_ /= (float)v.x_;
 121:Core/Inc/utils\math/vec3.h ****                 temp.y_ /= (float)v.y_;
 122:Core/Inc/utils\math/vec3.h ****                 temp.z_ /= (float)v.z_;
 123:Core/Inc/utils\math/vec3.h **** 
 124:Core/Inc/utils\math/vec3.h ****                 return temp;
 125:Core/Inc/utils\math/vec3.h ****         }
 126:Core/Inc/utils\math/vec3.h **** 
 127:Core/Inc/utils\math/vec3.h ****         
 128:Core/Inc/utils\math/vec3.h ****         Vec3(const Vec3 &v) {
 129:Core/Inc/utils\math/vec3.h ****                 x_ = v.x_;
 130:Core/Inc/utils\math/vec3.h ****                 y_ = v.y_;
 131:Core/Inc/utils\math/vec3.h ****                 z_ = v.z_;
 132:Core/Inc/utils\math/vec3.h ****         }
 133:Core/Inc/utils\math/vec3.h ****         
 134:Core/Inc/utils\math/vec3.h ****         Vec3 &operator=(const Vec3 &v) {
 135:Core/Inc/utils\math/vec3.h ****                 Vec3 temp(v);
 136:Core/Inc/utils\math/vec3.h ****                 swap(*this, temp);
 137:Core/Inc/utils\math/vec3.h **** 
 138:Core/Inc/utils\math/vec3.h ****                 return *this;
 139:Core/Inc/utils\math/vec3.h ****         }
 140:Core/Inc/utils\math/vec3.h **** 
 141:Core/Inc/utils\math/vec3.h ****         Vec3 &operator+=(const Vec3 &rhs) {
 142:Core/Inc/utils\math/vec3.h ****                 x_ += rhs.x_;
 143:Core/Inc/utils\math/vec3.h ****                 y_ += rhs.y_;
 144:Core/Inc/utils\math/vec3.h ****                 z_ += rhs.z_;
 145:Core/Inc/utils\math/vec3.h **** 
 146:Core/Inc/utils\math/vec3.h ****                 return *this;
 147:Core/Inc/utils\math/vec3.h ****         }
 148:Core/Inc/utils\math/vec3.h ****         
 149:Core/Inc/utils\math/vec3.h ****         Vec3 &operator-=(const Vec3 &rhs) {
 150:Core/Inc/utils\math/vec3.h ****                 x_ -= rhs.x_;
 151:Core/Inc/utils\math/vec3.h ****                 y_ -= rhs.y_;
 152:Core/Inc/utils\math/vec3.h ****                 z_ -= rhs.z_;
 153:Core/Inc/utils\math/vec3.h **** 
 154:Core/Inc/utils\math/vec3.h ****                 return *this;
 155:Core/Inc/utils\math/vec3.h ****         }
 156:Core/Inc/utils\math/vec3.h **** 
 157:Core/Inc/utils\math/vec3.h ****         friend Vec3 operator+(Vec3 lhs, const Vec3 &rhs) {
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 53


 158:Core/Inc/utils\math/vec3.h ****                 lhs += rhs;
 159:Core/Inc/utils\math/vec3.h ****                 return lhs;
 160:Core/Inc/utils\math/vec3.h ****         }
 161:Core/Inc/utils\math/vec3.h **** 
 162:Core/Inc/utils\math/vec3.h ****         friend Vec3 operator-(Vec3 lhs, const Vec3 &rhs) {
 163:Core/Inc/utils\math/vec3.h ****                 lhs -= rhs;
 164:Core/Inc/utils\math/vec3.h ****                 return lhs;
 165:Core/Inc/utils\math/vec3.h ****         }
 166:Core/Inc/utils\math/vec3.h **** 
 167:Core/Inc/utils\math/vec3.h ****         void print() const {
 168:Core/Inc/utils\math/vec3.h ****                 printf("%ld, %ld, %ld", (int32_t)x_, (int32_t)y_, (int32_t)z_);
 1930              		.loc 7 168 0
 1931 0012 D6ED007A 		vldr.32	s15, [r6]
 1932 0016 96ED017A 		vldr.32	s14, [r6, #4]
 1933 001a D6ED026A 		vldr.32	s13, [r6, #8]
 1934 001e FDEEE66A 		vcvt.s32.f32	s13, s13
 1935 0022 16EE903A 		vmov	r3, s13	@ int
 1936 0026 BDEEC77A 		vcvt.s32.f32	s14, s14
 1937 002a 17EE102A 		vmov	r2, s14	@ int
 1938 002e FDEEE77A 		vcvt.s32.f32	s15, s15
 1939 0032 17EE901A 		vmov	r1, s15	@ int
 1940 0036 3E48     		ldr	r0, .L130+4
 1941 0038 FFF7FEFF 		bl	printf
 1942              	.LVL196:
 1943              	.LBE537:
 1944              	.LBE536:
 315:Core/Src/parts/actuator.cpp **** 
 1945              		.loc 4 315 0
 1946 003c 0A20     		movs	r0, #10
 1947 003e FFF7FEFF 		bl	putchar
 1948              	.LVL197:
 319:Core/Src/parts/actuator.cpp **** 
 1949              		.loc 4 319 0
 1950 0042 07EE905A 		vmov	s15, r5	@ int
 1951 0046 F8EE677A 		vcvt.f32.u32	s15, s15
 1952 004a 17EE900A 		vmov	r0, s15
 1953 004e FFF7FEFF 		bl	__aeabi_f2d
 1954              	.LVL198:
 1955 0052 0246     		mov	r2, r0
 1956 0054 0B46     		mov	r3, r1
 1957 0056 0020     		movs	r0, #0
 1958 0058 3649     		ldr	r1, .L130+8
 1959 005a FFF7FEFF 		bl	__aeabi_ddiv
 1960              	.LVL199:
 1961 005e FFF7FEFF 		bl	__aeabi_d2uiz
 1962              	.LVL200:
 1963 0062 8046     		mov	r8, r0
 1964              	.LVL201:
 321:Core/Src/parts/actuator.cpp ****         for (uint32_t i = 0; i < n; ++i) {
 1965              		.loc 4 321 0
 1966 0064 FFF7FEFF 		bl	HAL_GetTick
 1967              	.LVL202:
 1968 0068 0746     		mov	r7, r0
 1969              	.LVL203:
 1970              	.LBB538:
 322:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - curr_time > dt_millis) {
 1971              		.loc 4 322 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 54


 1972 006a 0024     		movs	r4, #0
 1973 006c 00E0     		b	.L128
 1974              	.LVL204:
 1975              	.L127:
 322:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - curr_time > dt_millis) {
 1976              		.loc 4 322 0 is_stmt 0 discriminator 2
 1977 006e 0134     		adds	r4, r4, #1
 1978              	.LVL205:
 1979              	.L128:
 322:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - curr_time > dt_millis) {
 1980              		.loc 4 322 0 discriminator 1
 1981 0070 4445     		cmp	r4, r8
 1982 0072 4FD2     		bcs	.L126
 323:Core/Src/parts/actuator.cpp ****                         curr_time = HAL_GetTick();
 1983              		.loc 4 323 0 is_stmt 1
 1984 0074 FFF7FEFF 		bl	HAL_GetTick
 1985              	.LVL206:
 1986 0078 C01B     		subs	r0, r0, r7
 1987 007a A842     		cmp	r0, r5
 1988 007c F7D9     		bls	.L127
 324:Core/Src/parts/actuator.cpp **** 
 1989              		.loc 4 324 0
 1990 007e FFF7FEFF 		bl	HAL_GetTick
 1991              	.LVL207:
 1992 0082 0746     		mov	r7, r0
 1993              	.LVL208:
 326:Core/Src/parts/actuator.cpp ****                         v = actuate(vel, dt_millis);
 1994              		.loc 4 326 0
 1995 0084 2C48     		ldr	r0, .L130+12
 1996              	.LVL209:
 1997 0086 FFF7FEFF 		bl	printf
 1998              	.LVL210:
 1999              	.LBB539:
 2000              	.LBB540:
 2001              	.LBB541:
 129:Core/Inc/utils\math/vec3.h ****                 y_ = v.y_;
 2002              		.loc 7 129 0
 2003 008a 3368     		ldr	r3, [r6]	@ float
 2004 008c 0693     		str	r3, [sp, #24]	@ float
 130:Core/Inc/utils\math/vec3.h ****                 z_ = v.z_;
 2005              		.loc 7 130 0
 2006 008e 7368     		ldr	r3, [r6, #4]	@ float
 2007 0090 0793     		str	r3, [sp, #28]	@ float
 131:Core/Inc/utils\math/vec3.h ****         }
 2008              		.loc 7 131 0
 2009 0092 B368     		ldr	r3, [r6, #8]	@ float
 2010 0094 0893     		str	r3, [sp, #32]	@ float
 2011              	.LVL211:
 2012              	.LBE541:
 2013              	.LBE540:
 2014              	.LBE539:
 327:Core/Src/parts/actuator.cpp ****                         v = v.mult_EW(1000);
 2015              		.loc 4 327 0
 2016 0096 0DF10C0A 		add	r10, sp, #12
 2017 009a 2B46     		mov	r3, r5
 2018 009c 06AA     		add	r2, sp, #24
 2019 009e 4946     		mov	r1, r9
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 55


 2020 00a0 5046     		mov	r0, r10
 2021 00a2 FFF7FEFF 		bl	_ZN8Actuator7actuateE4Vec3IfEm
 2022              	.LVL212:
 2023 00a6 6B46     		mov	r3, sp
 2024 00a8 9AE80700 		ldm	r10, {r0, r1, r2}
 2025 00ac 83E80700 		stm	r3, {r0, r1, r2}
 2026              	.LVL213:
 2027              	.LBB542:
 2028              	.LBB543:
  50:Core/Inc/utils\math/vec3.h ****                 temp.y_ *= num;
 2029              		.loc 7 50 0
 2030 00b0 9FED227A 		vldr.32	s14, .L130+16
 2031 00b4 DDED007A 		vldr.32	s15, [sp]
 2032 00b8 67EE877A 		vmul.f32	s15, s15, s14
 2033 00bc CDED097A 		vstr.32	s15, [sp, #36]
  51:Core/Inc/utils\math/vec3.h ****                 temp.z_ *= num;
 2034              		.loc 7 51 0
 2035 00c0 DDED017A 		vldr.32	s15, [sp, #4]
 2036 00c4 67EE877A 		vmul.f32	s15, s15, s14
 2037 00c8 CDED0A7A 		vstr.32	s15, [sp, #40]
  52:Core/Inc/utils\math/vec3.h **** 
 2038              		.loc 7 52 0
 2039 00cc DDED027A 		vldr.32	s15, [sp, #8]
 2040 00d0 67EE877A 		vmul.f32	s15, s15, s14
 2041 00d4 CDED0B7A 		vstr.32	s15, [sp, #44]
 2042              	.LVL214:
 2043              	.LBE543:
 2044              	.LBE542:
 328:Core/Src/parts/actuator.cpp ****                         v.print();
 2045              		.loc 4 328 0
 2046 00d8 0CAA     		add	r2, sp, #48
 2047 00da 12E90700 		ldmdb	r2, {r0, r1, r2}
 2048 00de 83E80700 		stm	r3, {r0, r1, r2}
 2049              	.LVL215:
 2050              	.LBB544:
 2051              	.LBB545:
 2052              		.loc 7 168 0
 2053 00e2 DDED027A 		vldr.32	s15, [sp, #8]
 2054 00e6 FDEEE77A 		vcvt.s32.f32	s15, s15
 2055 00ea 17EE903A 		vmov	r3, s15	@ int
 2056              	.LVL216:
 2057 00ee DDED017A 		vldr.32	s15, [sp, #4]
 2058 00f2 FDEEE77A 		vcvt.s32.f32	s15, s15
 2059 00f6 17EE902A 		vmov	r2, s15	@ int
 2060 00fa DDED007A 		vldr.32	s15, [sp]
 2061 00fe FDEEE77A 		vcvt.s32.f32	s15, s15
 2062 0102 17EE901A 		vmov	r1, s15	@ int
 2063 0106 0A48     		ldr	r0, .L130+4
 2064 0108 FFF7FEFF 		bl	printf
 2065              	.LVL217:
 2066              	.LBE545:
 2067              	.LBE544:
 330:Core/Src/parts/actuator.cpp ****                 }
 2068              		.loc 4 330 0
 2069 010c 0A20     		movs	r0, #10
 2070 010e FFF7FEFF 		bl	putchar
 2071              	.LVL218:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 56


 2072 0112 ACE7     		b	.L127
 2073              	.L126:
 2074              	.LBE538:
 335:Core/Src/parts/actuator.cpp **** }
 2075              		.loc 4 335 0
 2076 0114 4FF47A72 		mov	r2, #1000
 2077 0118 B0EE000A 		vmov.f32	s0, #2.0e+0
 2078 011c 2946     		mov	r1, r5
 2079 011e 4846     		mov	r0, r9
 2080 0120 FFF7FEFF 		bl	_ZN8Actuator4stopEmfm
 2081              	.LVL219:
 336:Core/Src/parts/actuator.cpp **** 
 2082              		.loc 4 336 0
 2083 0124 0CB0     		add	sp, sp, #48
 2084              	.LCFI18:
 2085              		.cfi_def_cfa_offset 32
 2086              		@ sp needed
 2087 0126 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2088              	.LVL220:
 2089              	.L131:
 2090 012a 00BF     		.align	2
 2091              	.L130:
 2092 012c 00000000 		.word	.LC1
 2093 0130 18000000 		.word	.LC2
 2094 0134 0040AF40 		.word	1085227008
 2095 0138 28000000 		.word	.LC3
 2096 013c 00007A44 		.word	1148846080
 2097              		.cfi_endproc
 2098              	.LFE466:
 2100              		.section	.text._ZN8Actuator5checkEv,"ax",%progbits
 2101              		.align	1
 2102              		.global	_ZN8Actuator5checkEv
 2103              		.syntax unified
 2104              		.thumb
 2105              		.thumb_func
 2106              		.fpu fpv4-sp-d16
 2108              	_ZN8Actuator5checkEv:
 2109              	.LFB467:
 339:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 2110              		.loc 4 339 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL221:
 2115 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2116              	.LCFI19:
 2117              		.cfi_def_cfa_offset 24
 2118              		.cfi_offset 3, -24
 2119              		.cfi_offset 4, -20
 2120              		.cfi_offset 5, -16
 2121              		.cfi_offset 6, -12
 2122              		.cfi_offset 7, -8
 2123              		.cfi_offset 14, -4
 2124 0002 0546     		mov	r5, r0
 2125              	.LVL222:
 2126              	.LBB546:
 340:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(4*i);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 57


 2127              		.loc 4 340 0
 2128 0004 0024     		movs	r4, #0
 2129              	.LVL223:
 2130              	.L134:
 340:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(4*i);
 2131              		.loc 4 340 0 is_stmt 0 discriminator 3
 2132 0006 032C     		cmp	r4, #3
 2133 0008 11D8     		bhi	.L133
 341:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 2134              		.loc 4 341 0 is_stmt 1 discriminator 2
 2135 000a 04EB4403 		add	r3, r4, r4, lsl #1
 2136 000e 9E00     		lsls	r6, r3, #2
 2137 0010 2E44     		add	r6, r6, r5
 2138 0012 A300     		lsls	r3, r4, #2
 2139 0014 00EE103A 		vmov	s0, r3	@ int
 2140 0018 B8EEC00A 		vcvt.f32.s32	s0, s0
 2141 001c 3046     		mov	r0, r6
 2142 001e FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 2143              	.LVL224:
 342:Core/Src/parts/actuator.cpp ****         }
 2144              		.loc 4 342 0 discriminator 2
 2145 0022 3046     		mov	r0, r6
 2146 0024 FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 2147              	.LVL225:
 340:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(4*i);
 2148              		.loc 4 340 0 discriminator 2
 2149 0028 0134     		adds	r4, r4, #1
 2150              	.LVL226:
 2151 002a E4B2     		uxtb	r4, r4
 2152              	.LVL227:
 2153 002c EBE7     		b	.L134
 2154              	.L133:
 2155              	.LBE546:
 344:Core/Src/parts/actuator.cpp ****         uint32_t sample_time = curr_time;
 2156              		.loc 4 344 0
 2157 002e FFF7FEFF 		bl	HAL_GetTick
 2158              	.LVL228:
 2159 0032 0646     		mov	r6, r0
 2160              	.LVL229:
 345:Core/Src/parts/actuator.cpp ****         while (HAL_GetTick() - curr_time < 5000) {
 2161              		.loc 4 345 0
 2162 0034 0746     		mov	r7, r0
 2163              	.LVL230:
 2164              	.L136:
 346:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - sample_time > 10) {
 2165              		.loc 4 346 0
 2166 0036 FFF7FEFF 		bl	HAL_GetTick
 2167              	.LVL231:
 2168 003a 801B     		subs	r0, r0, r6
 2169 003c 41F28733 		movw	r3, #4999
 2170 0040 9842     		cmp	r0, r3
 2171 0042 24D8     		bhi	.L149
 2172              	.LBB547:
 347:Core/Src/parts/actuator.cpp ****                         sample_time = HAL_GetTick();
 2173              		.loc 4 347 0
 2174 0044 FFF7FEFF 		bl	HAL_GetTick
 2175              	.LVL232:
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 58


 2176 0048 C01B     		subs	r0, r0, r7
 2177 004a 0A28     		cmp	r0, #10
 2178 004c F3D9     		bls	.L136
 2179              	.LBB548:
 348:Core/Src/parts/actuator.cpp ****                         for (uint8_t i = 0; i < 4; ++i) {
 2180              		.loc 4 348 0
 2181 004e FFF7FEFF 		bl	HAL_GetTick
 2182              	.LVL233:
 2183 0052 0746     		mov	r7, r0
 2184              	.LVL234:
 2185              	.LBB549:
 349:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2186              		.loc 4 349 0
 2187 0054 0024     		movs	r4, #0
 2188              	.LVL235:
 2189              	.L138:
 349:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2190              		.loc 4 349 0 is_stmt 0 discriminator 3
 2191 0056 032C     		cmp	r4, #3
 2192 0058 15D8     		bhi	.L137
 350:Core/Src/parts/actuator.cpp ****                         }
 2193              		.loc 4 350 0 is_stmt 1 discriminator 2
 2194 005a 04EB4403 		add	r3, r4, r4, lsl #1
 2195 005e 9800     		lsls	r0, r3, #2
 2196 0060 0A21     		movs	r1, #10
 2197 0062 2844     		add	r0, r0, r5
 2198 0064 FFF7FEFF 		bl	_ZN5Wheel9get_OmegaEm
 2199              	.LVL236:
 2200 0068 DFED407A 		vldr.32	s15, .L152
 2201 006c 20EE270A 		vmul.f32	s0, s0, s15
 2202 0070 BDEEC00A 		vcvt.s32.f32	s0, s0
 2203 0074 10EE103A 		vmov	r3, s0	@ int
 2204 0078 19B2     		sxth	r1, r3
 2205 007a 3D48     		ldr	r0, .L152+4
 2206 007c FFF7FEFF 		bl	printf
 2207              	.LVL237:
 349:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2208              		.loc 4 349 0 discriminator 2
 2209 0080 0134     		adds	r4, r4, #1
 2210              	.LVL238:
 2211 0082 E4B2     		uxtb	r4, r4
 2212              	.LVL239:
 2213 0084 E7E7     		b	.L138
 2214              	.L137:
 2215              	.LBE549:
 352:Core/Src/parts/actuator.cpp ****                 }
 2216              		.loc 4 352 0
 2217 0086 0A20     		movs	r0, #10
 2218 0088 FFF7FEFF 		bl	putchar
 2219              	.LVL240:
 2220              	.LBE548:
 2221 008c D3E7     		b	.L136
 2222              	.LVL241:
 2223              	.L149:
 2224              	.LBE547:
 2225              	.LBB550:
 355:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 59


 2226              		.loc 4 355 0
 2227 008e 0024     		movs	r4, #0
 2228              	.LVL242:
 2229              	.L135:
 355:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 2230              		.loc 4 355 0 is_stmt 0 discriminator 3
 2231 0090 032C     		cmp	r4, #3
 2232 0092 0ED8     		bhi	.L140
 356:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 2233              		.loc 4 356 0 is_stmt 1 discriminator 2
 2234 0094 04EB4403 		add	r3, r4, r4, lsl #1
 2235 0098 9E00     		lsls	r6, r3, #2
 2236 009a 2E44     		add	r6, r6, r5
 2237 009c 9FED350A 		vldr.32	s0, .L152+8
 2238 00a0 3046     		mov	r0, r6
 2239 00a2 FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 2240              	.LVL243:
 357:Core/Src/parts/actuator.cpp ****         }
 2241              		.loc 4 357 0 discriminator 2
 2242 00a6 3046     		mov	r0, r6
 2243 00a8 FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 2244              	.LVL244:
 355:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 2245              		.loc 4 355 0 discriminator 2
 2246 00ac 0134     		adds	r4, r4, #1
 2247              	.LVL245:
 2248 00ae E4B2     		uxtb	r4, r4
 2249              	.LVL246:
 2250 00b0 EEE7     		b	.L135
 2251              	.L140:
 2252              	.LBE550:
 359:Core/Src/parts/actuator.cpp ****         for (uint8_t i = 0; i < 4; ++i) {
 2253              		.loc 4 359 0
 2254 00b2 4FF4FA70 		mov	r0, #500
 2255 00b6 FFF7FEFF 		bl	HAL_Delay
 2256              	.LVL247:
 2257              	.LBB551:
 360:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(-10);
 2258              		.loc 4 360 0
 2259 00ba 0024     		movs	r4, #0
 2260              	.LVL248:
 2261              	.L142:
 360:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(-10);
 2262              		.loc 4 360 0 is_stmt 0 discriminator 3
 2263 00bc 032C     		cmp	r4, #3
 2264 00be 0ED8     		bhi	.L141
 361:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 2265              		.loc 4 361 0 is_stmt 1 discriminator 2
 2266 00c0 04EB4403 		add	r3, r4, r4, lsl #1
 2267 00c4 9E00     		lsls	r6, r3, #2
 2268 00c6 2E44     		add	r6, r6, r5
 2269 00c8 BAEE040A 		vmov.f32	s0, #-1.0e+1
 2270 00cc 3046     		mov	r0, r6
 2271 00ce FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 2272              	.LVL249:
 362:Core/Src/parts/actuator.cpp ****         }
 2273              		.loc 4 362 0 discriminator 2
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 60


 2274 00d2 3046     		mov	r0, r6
 2275 00d4 FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 2276              	.LVL250:
 360:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(-10);
 2277              		.loc 4 360 0 discriminator 2
 2278 00d8 0134     		adds	r4, r4, #1
 2279              	.LVL251:
 2280 00da E4B2     		uxtb	r4, r4
 2281              	.LVL252:
 2282 00dc EEE7     		b	.L142
 2283              	.L141:
 2284              	.LBE551:
 365:Core/Src/parts/actuator.cpp ****         curr_time = sample_time;
 2285              		.loc 4 365 0
 2286 00de FFF7FEFF 		bl	HAL_GetTick
 2287              	.LVL253:
 2288 00e2 0646     		mov	r6, r0
 2289              	.LVL254:
 2290 00e4 0746     		mov	r7, r0
 2291              	.LVL255:
 2292              	.L144:
 367:Core/Src/parts/actuator.cpp ****                 if (HAL_GetTick() - sample_time > 10) {
 2293              		.loc 4 367 0
 2294 00e6 FFF7FEFF 		bl	HAL_GetTick
 2295              	.LVL256:
 2296 00ea 801B     		subs	r0, r0, r6
 2297 00ec 41F28733 		movw	r3, #4999
 2298 00f0 9842     		cmp	r0, r3
 2299 00f2 24D8     		bhi	.L150
 2300              	.LBB552:
 368:Core/Src/parts/actuator.cpp ****                         sample_time = HAL_GetTick();
 2301              		.loc 4 368 0
 2302 00f4 FFF7FEFF 		bl	HAL_GetTick
 2303              	.LVL257:
 2304 00f8 C01B     		subs	r0, r0, r7
 2305 00fa 0A28     		cmp	r0, #10
 2306 00fc F3D9     		bls	.L144
 2307              	.LBB553:
 369:Core/Src/parts/actuator.cpp ****                         for (uint8_t i = 0; i < 4; ++i) {
 2308              		.loc 4 369 0
 2309 00fe FFF7FEFF 		bl	HAL_GetTick
 2310              	.LVL258:
 2311 0102 0746     		mov	r7, r0
 2312              	.LVL259:
 2313              	.LBB554:
 370:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2314              		.loc 4 370 0
 2315 0104 0024     		movs	r4, #0
 2316              	.LVL260:
 2317              	.L146:
 370:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2318              		.loc 4 370 0 is_stmt 0 discriminator 3
 2319 0106 032C     		cmp	r4, #3
 2320 0108 15D8     		bhi	.L145
 371:Core/Src/parts/actuator.cpp ****                         }
 2321              		.loc 4 371 0 is_stmt 1 discriminator 2
 2322 010a 04EB4403 		add	r3, r4, r4, lsl #1
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 61


 2323 010e 9800     		lsls	r0, r3, #2
 2324 0110 0A21     		movs	r1, #10
 2325 0112 2844     		add	r0, r0, r5
 2326 0114 FFF7FEFF 		bl	_ZN5Wheel9get_OmegaEm
 2327              	.LVL261:
 2328 0118 DFED147A 		vldr.32	s15, .L152
 2329 011c 20EE270A 		vmul.f32	s0, s0, s15
 2330 0120 BDEEC00A 		vcvt.s32.f32	s0, s0
 2331 0124 10EE103A 		vmov	r3, s0	@ int
 2332 0128 19B2     		sxth	r1, r3
 2333 012a 1148     		ldr	r0, .L152+4
 2334 012c FFF7FEFF 		bl	printf
 2335              	.LVL262:
 370:Core/Src/parts/actuator.cpp ****                                 printf("%d  ", (int16_t)(wheels_[i].get_Omega(10)*1000));
 2336              		.loc 4 370 0 discriminator 2
 2337 0130 0134     		adds	r4, r4, #1
 2338              	.LVL263:
 2339 0132 E4B2     		uxtb	r4, r4
 2340              	.LVL264:
 2341 0134 E7E7     		b	.L146
 2342              	.L145:
 2343              	.LBE554:
 373:Core/Src/parts/actuator.cpp ****                 }
 2344              		.loc 4 373 0
 2345 0136 0A20     		movs	r0, #10
 2346 0138 FFF7FEFF 		bl	putchar
 2347              	.LVL265:
 2348              	.LBE553:
 2349 013c D3E7     		b	.L144
 2350              	.LVL266:
 2351              	.L150:
 2352              	.LBE552:
 2353              	.LBB555:
 377:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 2354              		.loc 4 377 0
 2355 013e 0024     		movs	r4, #0
 2356              	.LVL267:
 2357              	.L143:
 377:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
 2358              		.loc 4 377 0 is_stmt 0 discriminator 3
 2359 0140 032C     		cmp	r4, #3
 2360 0142 0ED8     		bhi	.L148
 378:Core/Src/parts/actuator.cpp ****                 wheels_[i].update();
 2361              		.loc 4 378 0 is_stmt 1 discriminator 2
 2362 0144 04EB4403 		add	r3, r4, r4, lsl #1
 2363 0148 9E00     		lsls	r6, r3, #2
 2364 014a 2E44     		add	r6, r6, r5
 2365 014c 9FED090A 		vldr.32	s0, .L152+8
 2366 0150 3046     		mov	r0, r6
 2367 0152 FFF7FEFF 		bl	_ZN5Wheel9set_OmegaEf
 2368              	.LVL268:
 379:Core/Src/parts/actuator.cpp ****         }
 2369              		.loc 4 379 0 discriminator 2
 2370 0156 3046     		mov	r0, r6
 2371 0158 FFF7FEFF 		bl	_ZNK5Wheel6updateEv
 2372              	.LVL269:
 377:Core/Src/parts/actuator.cpp ****                 wheels_[i].set_Omega(0);
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 62


 2373              		.loc 4 377 0 discriminator 2
 2374 015c 0134     		adds	r4, r4, #1
 2375              	.LVL270:
 2376 015e E4B2     		uxtb	r4, r4
 2377              	.LVL271:
 2378 0160 EEE7     		b	.L143
 2379              	.L148:
 2380              	.LBE555:
 381:Core/Src/parts/actuator.cpp **** }
 2381              		.loc 4 381 0
 2382 0162 4FF4FA70 		mov	r0, #500
 2383 0166 FFF7FEFF 		bl	HAL_Delay
 2384              	.LVL272:
 2385              		.loc 4 382 0
 2386 016a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2387              	.LVL273:
 2388              	.L153:
 2389              		.align	2
 2390              	.L152:
 2391 016c 00007A44 		.word	1148846080
 2392 0170 00000000 		.word	.LC4
 2393 0174 00000000 		.word	0
 2394              		.cfi_endproc
 2395              	.LFE467:
 2397              		.section	.text._GLOBAL__sub_I__ZN8Actuator12get_InstanceEv,"ax",%progbits
 2398              		.align	1
 2399              		.syntax unified
 2400              		.thumb
 2401              		.thumb_func
 2402              		.fpu fpv4-sp-d16
 2404              	_GLOBAL__sub_I__ZN8Actuator12get_InstanceEv:
 2405              	.LFB501:
 2406              		.loc 4 382 0
 2407              		.cfi_startproc
 2408              		@ args = 0, pretend = 0, frame = 0
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410 0000 08B5     		push	{r3, lr}
 2411              	.LCFI20:
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 3, -8
 2414              		.cfi_offset 14, -4
 2415              		.loc 4 382 0
 2416 0002 4FF6FF71 		movw	r1, #65535
 2417 0006 0120     		movs	r0, #1
 2418 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 2419              	.LVL274:
 2420 000c 08BD     		pop	{r3, pc}
 2421              		.cfi_endproc
 2422              	.LFE501:
 2424              		.section	.init_array,"aw",%init_array
 2425              		.align	2
 2426 0000 00000000 		.word	_GLOBAL__sub_I__ZN8Actuator12get_InstanceEv(target1)
 2427              		.weak	_ZTS13PID_Algorithm
 2428              		.section	.rodata._ZTS13PID_Algorithm,"aG",%progbits,_ZTS13PID_Algorithm,comdat
 2429              		.align	2
 2432              	_ZTS13PID_Algorithm:
 2433 0000 31335049 		.ascii	"13PID_Algorithm\000"
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 63


 2433      445F416C 
 2433      676F7269 
 2433      74686D00 
 2434              		.weak	_ZTI13PID_Algorithm
 2435              		.section	.rodata._ZTI13PID_Algorithm,"aG",%progbits,_ZTI13PID_Algorithm,comdat
 2436              		.align	2
 2439              	_ZTI13PID_Algorithm:
 2440 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 2441 0004 00000000 		.word	_ZTS13PID_Algorithm
 2442              		.weak	_ZTS12Discrete_PID
 2443              		.section	.rodata._ZTS12Discrete_PID,"aG",%progbits,_ZTS12Discrete_PID,comdat
 2444              		.align	2
 2447              	_ZTS12Discrete_PID:
 2448 0000 31324469 		.ascii	"12Discrete_PID\000"
 2448      73637265 
 2448      74655F50 
 2448      494400
 2449              		.weak	_ZTI12Discrete_PID
 2450              		.section	.rodata._ZTI12Discrete_PID,"aG",%progbits,_ZTI12Discrete_PID,comdat
 2451              		.align	2
 2454              	_ZTI12Discrete_PID:
 2455 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 2456 0004 00000000 		.word	_ZTS12Discrete_PID
 2457 0008 00000000 		.word	_ZTI13PID_Algorithm
 2458              		.weak	_ZTV12Discrete_PID
 2459              		.section	.rodata._ZTV12Discrete_PID,"aG",%progbits,_ZTV12Discrete_PID,comdat
 2460              		.align	2
 2463              	_ZTV12Discrete_PID:
 2464 0000 00000000 		.word	0
 2465 0004 00000000 		.word	_ZTI12Discrete_PID
 2466 0008 00000000 		.word	_ZN12Discrete_PID7computeEfm
 2467 000c 00000000 		.word	_ZN12Discrete_PIDD1Ev
 2468 0010 00000000 		.word	_ZN12Discrete_PIDD0Ev
 2469              		.section	.bss._ZGVZN8Actuator12get_InstanceEvE14sBase_Instance,"aw",%nobits
 2470              		.align	2
 2471              		.set	.LANCHOR7,. + 0
 2474              	_ZGVZN8Actuator12get_InstanceEvE14sBase_Instance:
 2475 0000 00000000 		.space	4
 2476              		.section	.bss._ZL16gCoupling_Matrix,"aw",%nobits
 2477              		.align	2
 2478              		.set	.LANCHOR2,. + 0
 2481              	_ZL16gCoupling_Matrix:
 2482 0000 00000000 		.space	68
 2482      00000000 
 2482      00000000 
 2482      00000000 
 2482      00000000 
 2483              		.section	.bss._ZL21gWheel_Configurations,"aw",%nobits
 2484              		.align	2
 2485              		.set	.LANCHOR8,. + 0
 2488              	_ZL21gWheel_Configurations:
 2489 0000 00000000 		.space	208
 2489      00000000 
 2489      00000000 
 2489      00000000 
 2489      00000000 
 2490              		.section	.bss._ZL24gInverse_Coupling_Matrix,"aw",%nobits
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 64


 2491              		.align	2
 2492              		.set	.LANCHOR4,. + 0
 2495              	_ZL24gInverse_Coupling_Matrix:
 2496 0000 00000000 		.space	68
 2496      00000000 
 2496      00000000 
 2496      00000000 
 2496      00000000 
 2497              		.section	.bss._ZL4gPID,"aw",%nobits
 2498              		.align	2
 2499              		.set	.LANCHOR1,. + 0
 2502              	_ZL4gPID:
 2503 0000 00000000 		.space	16
 2503      00000000 
 2503      00000000 
 2503      00000000 
 2504              		.section	.bss._ZL9gDisc_PID,"aw",%nobits
 2505              		.align	2
 2506              		.set	.LANCHOR0,. + 0
 2509              	_ZL9gDisc_PID:
 2510 0000 00000000 		.space	144
 2510      00000000 
 2510      00000000 
 2510      00000000 
 2510      00000000 
 2511              		.section	.bss._ZZN8Actuator12get_InstanceEvE14sBase_Instance,"aw",%nobits
 2512              		.align	2
 2513              		.set	.LANCHOR6,. + 0
 2516              	_ZZN8Actuator12get_InstanceEvE14sBase_Instance:
 2517 0000 00000000 		.space	48
 2517      00000000 
 2517      00000000 
 2517      00000000 
 2517      00000000 
 2518              		.section	.rodata._Z41__static_initialization_and_destruction_0ii.str1.4,"aMS",%progbits,1
 2519              		.align	2
 2520              	.LC0:
 2521 0000 436F7265 		.ascii	"Core/Inc/utils\\math/mat.h\000"
 2521      2F496E63 
 2521      2F757469 
 2521      6C735C6D 
 2521      6174682F 
 2522              		.section	.rodata._ZL15gCoupling_Array,"a",%progbits
 2523              		.align	2
 2524              		.set	.LANCHOR3,. + 0
 2527              	_ZL15gCoupling_Array:
 2528 0000 0000803F 		.word	1065353216
 2529 0004 0000803F 		.word	1065353216
 2530 0008 0000803F 		.word	1065353216
 2531 000c 0000803F 		.word	1065353216
 2532 0010 000080BF 		.word	-1082130432
 2533 0014 0000803F 		.word	1065353216
 2534 0018 000080BF 		.word	-1082130432
 2535 001c 000080BF 		.word	-1082130432
 2536 0020 0000803F 		.word	1065353216
 2537 0024 000080BF 		.word	-1082130432
 2538 0028 0000803F 		.word	1065353216
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 65


 2539 002c 0000803F 		.word	1065353216
 2540              		.section	.rodata._ZL23gInverse_Coupling_Array,"a",%progbits
 2541              		.align	2
 2542              		.set	.LANCHOR5,. + 0
 2545              	_ZL23gInverse_Coupling_Array:
 2546 0000 0000803E 		.word	1048576000
 2547 0004 0000803E 		.word	1048576000
 2548 0008 000080BE 		.word	-1098907648
 2549 000c 000080BE 		.word	-1098907648
 2550 0010 0000803E 		.word	1048576000
 2551 0014 000080BE 		.word	-1098907648
 2552 0018 000080BE 		.word	-1098907648
 2553 001c 0000803E 		.word	1048576000
 2554 0020 0000803E 		.word	1048576000
 2555 0024 0000803E 		.word	1048576000
 2556 0028 0000803E 		.word	1048576000
 2557 002c 0000803E 		.word	1048576000
 2558              		.section	.rodata._ZN8Actuator5checkEv.str1.4,"aMS",%progbits,1
 2559              		.align	2
 2560              	.LC4:
 2561 0000 25642020 		.ascii	"%d  \000"
 2561      00
 2562              		.section	.rodata._ZN8Actuator7profileE4Vec3IfEm.str1.4,"aMS",%progbits,1
 2563              		.align	2
 2564              	.LC1:
 2565 0000 41637475 		.ascii	"Actuation Command : \000"
 2565      6174696F 
 2565      6E20436F 
 2565      6D6D616E 
 2565      64203A20 
 2566 0015 000000   		.space	3
 2567              	.LC2:
 2568 0018 256C642C 		.ascii	"%ld, %ld, %ld\000"
 2568      20256C64 
 2568      2C20256C 
 2568      6400
 2569 0026 0000     		.space	2
 2570              	.LC3:
 2571 0028 41637475 		.ascii	"Actuated : \000"
 2571      61746564 
 2571      203A2000 
 2572              		.text
 2573              	.Letext0:
 2574              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2575              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2576              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2577              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 2578              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2579              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2580              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2581              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2582              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2583              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2584              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2585              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2586              		.file 20 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Include/core_cm
 2587              		.file 21 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/STM32
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 66


 2588              		.file 22 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/STM32
 2589              		.file 23 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/STM32
 2590              		.file 24 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Driver/
 2591              		.file 25 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Driver/
 2592              		.file 26 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Driver/
 2593              		.file 27 "C:/Users/n-is/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Driver/
 2594              		.file 28 "Core/Inc/periphs/tim.h"
 2595              		.file 29 "Core/Inc/main.h"
 2596              		.file 30 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 2597              		.file 31 "<built-in>"
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 actuator.cpp
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:18     .text._ZN12Discrete_PIDD2Ev:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:25     .text._ZN12Discrete_PIDD2Ev:00000000 _ZN12Discrete_PIDD2Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:25     .text._ZN12Discrete_PIDD2Ev:00000000 _ZN12Discrete_PIDD1Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:42     .text._ZN12Discrete_PID7computeEfm:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:49     .text._ZN12Discrete_PID7computeEfm:00000000 _ZN12Discrete_PID7computeEfm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:153    .text._ZN12Discrete_PID7computeEfm:00000090 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:158    .text._ZN8ActuatorD2Ev:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:165    .text._ZN8ActuatorD2Ev:00000000 _ZN8ActuatorD2Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:165    .text._ZN8ActuatorD2Ev:00000000 _ZN8ActuatorD1Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:199    .text._ZN3MatD2Ev:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:206    .text._ZN3MatD2Ev:00000000 _ZN3MatD2Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:206    .text._ZN3MatD2Ev:00000000 _ZN3MatD1Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:223    .text.__tcf_0:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:229    .text.__tcf_0:00000000 __tcf_0
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:261    .text.__tcf_0:00000018 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:267    .text.__tcf_1:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:273    .text.__tcf_1:00000000 __tcf_1
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:298    .text.__tcf_1:00000010 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:304    .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:310    .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:606    .text._Z41__static_initialization_and_destruction_0ii:0000010c $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2463   .rodata._ZTV12Discrete_PID:00000000 _ZTV12Discrete_PID
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:621    .text._ZN12Discrete_PIDD0Ev:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:628    .text._ZN12Discrete_PIDD0Ev:00000000 _ZN12Discrete_PIDD0Ev
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:651    .text._ZN8Actuator12get_InstanceEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:658    .text._ZN8Actuator12get_InstanceEv:00000000 _ZN8Actuator12get_InstanceEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:728    .text._ZN8Actuator12get_InstanceEv:00000044 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:736    .text._ZN8Actuator7actuateE4Vec3IfEm:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:743    .text._ZN8Actuator7actuateE4Vec3IfEm:00000000 _ZN8Actuator7actuateE4Vec3IfEm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1187   .text._ZN8Actuator7actuateE4Vec3IfEm:000001f0 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1195   .text._ZN8Actuator4stopEmfm:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1202   .text._ZN8Actuator4stopEmfm:00000000 _ZN8Actuator4stopEmfm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1432   .text._ZN8Actuator4stopEmfm:00000100 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1437   .text._ZN8Actuator11wheels_InitEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1444   .text._ZN8Actuator11wheels_InitEv:00000000 _ZN8Actuator11wheels_InitEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1607   .text._ZN8Actuator11wheels_InitEv:000000d4 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1625   .text._ZN8Actuator8pid_InitEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1632   .text._ZN8Actuator8pid_InitEv:00000000 _ZN8Actuator8pid_InitEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1839   .text._ZN8Actuator8pid_InitEv:00000074 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1855   .text._ZN8Actuator4initEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1862   .text._ZN8Actuator4initEv:00000000 _ZN8Actuator4initEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1892   .text._ZN8Actuator7profileE4Vec3IfEm:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:1899   .text._ZN8Actuator7profileE4Vec3IfEm:00000000 _ZN8Actuator7profileE4Vec3IfEm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2092   .text._ZN8Actuator7profileE4Vec3IfEm:0000012c $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2101   .text._ZN8Actuator5checkEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2108   .text._ZN8Actuator5checkEv:00000000 _ZN8Actuator5checkEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2391   .text._ZN8Actuator5checkEv:0000016c $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2398   .text._GLOBAL__sub_I__ZN8Actuator12get_InstanceEv:00000000 $t
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2404   .text._GLOBAL__sub_I__ZN8Actuator12get_InstanceEv:00000000 _GLOBAL__sub_I__ZN8Actuator12get_InstanceEv
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2425   .init_array:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2432   .rodata._ZTS13PID_Algorithm:00000000 _ZTS13PID_Algorithm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2429   .rodata._ZTS13PID_Algorithm:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2439   .rodata._ZTI13PID_Algorithm:00000000 _ZTI13PID_Algorithm
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2436   .rodata._ZTI13PID_Algorithm:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2447   .rodata._ZTS12Discrete_PID:00000000 _ZTS12Discrete_PID
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 68


C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2444   .rodata._ZTS12Discrete_PID:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2454   .rodata._ZTI12Discrete_PID:00000000 _ZTI12Discrete_PID
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2451   .rodata._ZTI12Discrete_PID:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2460   .rodata._ZTV12Discrete_PID:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2470   .bss._ZGVZN8Actuator12get_InstanceEvE14sBase_Instance:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2474   .bss._ZGVZN8Actuator12get_InstanceEvE14sBase_Instance:00000000 _ZGVZN8Actuator12get_InstanceEvE14sBase_Instance
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2477   .bss._ZL16gCoupling_Matrix:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2481   .bss._ZL16gCoupling_Matrix:00000000 _ZL16gCoupling_Matrix
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2484   .bss._ZL21gWheel_Configurations:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2488   .bss._ZL21gWheel_Configurations:00000000 _ZL21gWheel_Configurations
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2491   .bss._ZL24gInverse_Coupling_Matrix:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2495   .bss._ZL24gInverse_Coupling_Matrix:00000000 _ZL24gInverse_Coupling_Matrix
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2498   .bss._ZL4gPID:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2502   .bss._ZL4gPID:00000000 _ZL4gPID
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2505   .bss._ZL9gDisc_PID:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2509   .bss._ZL9gDisc_PID:00000000 _ZL9gDisc_PID
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2512   .bss._ZZN8Actuator12get_InstanceEvE14sBase_Instance:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2516   .bss._ZZN8Actuator12get_InstanceEvE14sBase_Instance:00000000 _ZZN8Actuator12get_InstanceEvE14sBase_Instance
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2519   .rodata._Z41__static_initialization_and_destruction_0ii.str1.4:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2523   .rodata._ZL15gCoupling_Array:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2527   .rodata._ZL15gCoupling_Array:00000000 _ZL15gCoupling_Array
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2541   .rodata._ZL23gInverse_Coupling_Array:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2545   .rodata._ZL23gInverse_Coupling_Array:00000000 _ZL23gInverse_Coupling_Array
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2559   .rodata._ZN8Actuator5checkEv.str1.4:00000000 $d
C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s:2563   .rodata._ZN8Actuator7profileE4Vec3IfEm.str1.4:00000000 $d
                           .group:00000000 _ZN12Discrete_PIDD5Ev
                           .group:00000000 _ZN8ActuatorD5Ev
                           .group:00000000 _ZN3MatD5Ev

UNDEFINED SYMBOLS
_ZN3MatC1Ehh
_Error_Handler
__aeabi_atexit
__dso_handle
_ZdlPvj
__cxa_guard_acquire
__cxa_guard_release
_ZN3MatC1ERKS_
_ZN3MatmLERK4Vec3IfE
memcpy
_ZN5Wheel9get_OmegaEm
_ZN5Wheel9set_OmegaEf
_ZNK5Wheel6updateEv
_ZN3MatmLERKS_
HAL_GetTick
HAL_Delay
_ZN5Wheel13start_PeriphsEv
htim8
htim4
htim2
htim3
htim1
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2uiz
printf
putchar
ARM GAS  C:\Users\073be\AppData\Local\Temp\ccH5jtK9.s 			page 69


_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE
