
Geneva_Pneumatic_Improvement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000020f6  0000218a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bf  00800210  00800210  0000219a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041ec  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017df  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ca5  00000000  00000000  00007ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00009b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001820  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002996  00000000  00000000  0000bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_1>
       8:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_2>
       c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_3>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_5>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d3 c0       	rjmp	.+422    	; 0x1d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d1 c0       	rjmp	.+418    	; 0x1d4 <__bad_interrupt>
      32:	00 00       	nop
      34:	cf c0       	rjmp	.+414    	; 0x1d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	cd c0       	rjmp	.+410    	; 0x1d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c2       	rjmp	.+1088   	; 0x47e <__vector_15>
      3e:	00 00       	nop
      40:	c9 c0       	rjmp	.+402    	; 0x1d4 <__bad_interrupt>
      42:	00 00       	nop
      44:	c7 c0       	rjmp	.+398    	; 0x1d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	c5 c0       	rjmp	.+394    	; 0x1d4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c1 c0       	rjmp	.+386    	; 0x1d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_21>
      58:	bd c0       	rjmp	.+378    	; 0x1d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c0       	rjmp	.+374    	; 0x1d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b9 c0       	rjmp	.+370    	; 0x1d4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_25>
      68:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_26>
      6c:	b3 c0       	rjmp	.+358    	; 0x1d4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b1 c0       	rjmp	.+354    	; 0x1d4 <__bad_interrupt>
      72:	00 00       	nop
      74:	af c0       	rjmp	.+350    	; 0x1d4 <__bad_interrupt>
      76:	00 00       	nop
      78:	ad c0       	rjmp	.+346    	; 0x1d4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ab c0       	rjmp	.+342    	; 0x1d4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a9 c0       	rjmp	.+338    	; 0x1d4 <__bad_interrupt>
      82:	00 00       	nop
      84:	a7 c0       	rjmp	.+334    	; 0x1d4 <__bad_interrupt>
      86:	00 00       	nop
      88:	a5 c0       	rjmp	.+330    	; 0x1d4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 c0       	rjmp	.+326    	; 0x1d4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a1 c0       	rjmp	.+322    	; 0x1d4 <__bad_interrupt>
      92:	00 00       	nop
      94:	9f c0       	rjmp	.+318    	; 0x1d4 <__bad_interrupt>
      96:	00 00       	nop
      98:	9d c0       	rjmp	.+314    	; 0x1d4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9b c0       	rjmp	.+310    	; 0x1d4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	99 c0       	rjmp	.+306    	; 0x1d4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	97 c0       	rjmp	.+302    	; 0x1d4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	95 c0       	rjmp	.+298    	; 0x1d4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	93 c0       	rjmp	.+294    	; 0x1d4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	91 c0       	rjmp	.+290    	; 0x1d4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8f c0       	rjmp	.+286    	; 0x1d4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8d c0       	rjmp	.+282    	; 0x1d4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8b c0       	rjmp	.+278    	; 0x1d4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	89 c0       	rjmp	.+274    	; 0x1d4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	87 c0       	rjmp	.+270    	; 0x1d4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	85 c0       	rjmp	.+266    	; 0x1d4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_51>
      d0:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_52>
      d4:	7f c0       	rjmp	.+254    	; 0x1d4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_54>
      dc:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_55>
      e0:	79 c0       	rjmp	.+242    	; 0x1d4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e 04       	cpc	r9, r14
      e6:	d3 04       	cpc	r13, r3
      e8:	64 05       	cpc	r22, r4
      ea:	84 05       	cpc	r24, r4
      ec:	84 05       	cpc	r24, r4
      ee:	84 05       	cpc	r24, r4
      f0:	84 05       	cpc	r24, r4
      f2:	84 05       	cpc	r24, r4
      f4:	84 05       	cpc	r24, r4
      f6:	84 05       	cpc	r24, r4
      f8:	84 05       	cpc	r24, r4
      fa:	84 05       	cpc	r24, r4
      fc:	84 05       	cpc	r24, r4
      fe:	84 05       	cpc	r24, r4
     100:	84 05       	cpc	r24, r4
     102:	84 05       	cpc	r24, r4
     104:	84 05       	cpc	r24, r4
     106:	84 05       	cpc	r24, r4
     108:	84 05       	cpc	r24, r4
     10a:	84 05       	cpc	r24, r4
     10c:	84 05       	cpc	r24, r4
     10e:	84 05       	cpc	r24, r4
     110:	84 05       	cpc	r24, r4
     112:	84 05       	cpc	r24, r4
     114:	84 05       	cpc	r24, r4
     116:	84 05       	cpc	r24, r4
     118:	84 05       	cpc	r24, r4
     11a:	84 05       	cpc	r24, r4
     11c:	84 05       	cpc	r24, r4
     11e:	84 05       	cpc	r24, r4
     120:	84 05       	cpc	r24, r4
     122:	84 05       	cpc	r24, r4
     124:	84 05       	cpc	r24, r4
     126:	84 05       	cpc	r24, r4
     128:	84 05       	cpc	r24, r4
     12a:	84 05       	cpc	r24, r4
     12c:	84 05       	cpc	r24, r4
     12e:	84 05       	cpc	r24, r4
     130:	84 05       	cpc	r24, r4
     132:	84 05       	cpc	r24, r4
     134:	84 05       	cpc	r24, r4
     136:	84 05       	cpc	r24, r4
     138:	84 05       	cpc	r24, r4
     13a:	84 05       	cpc	r24, r4
     13c:	84 05       	cpc	r24, r4
     13e:	84 05       	cpc	r24, r4
     140:	84 05       	cpc	r24, r4
     142:	84 05       	cpc	r24, r4
     144:	84 05       	cpc	r24, r4
     146:	84 05       	cpc	r24, r4
     148:	84 05       	cpc	r24, r4
     14a:	5a 05       	cpc	r21, r10
     14c:	84 05       	cpc	r24, r4
     14e:	84 05       	cpc	r24, r4
     150:	84 05       	cpc	r24, r4
     152:	1a 05       	cpc	r17, r10
     154:	50 05       	cpc	r21, r0
     156:	3b 05       	cpc	r19, r11
     158:	76 05       	cpc	r23, r6
     15a:	84 05       	cpc	r24, r4
     15c:	4a 05       	cpc	r20, r10
     15e:	44 05       	cpc	r20, r4
     160:	37 05       	cpc	r19, r7
     162:	84 05       	cpc	r24, r4
     164:	84 05       	cpc	r24, r4
     166:	35 05       	cpc	r19, r5
     168:	04 05       	cpc	r16, r4
     16a:	84 05       	cpc	r24, r4
     16c:	84 05       	cpc	r24, r4
     16e:	84 05       	cpc	r24, r4
     170:	7d 05       	cpc	r23, r13

00000172 <__ctors_start>:
     172:	5f 0b       	sbc	r21, r31

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d1 e2       	ldi	r29, 0x21	; 33
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0c bf       	out	0x3c, r16	; 60

00000184 <__do_copy_data>:
     184:	12 e0       	ldi	r17, 0x02	; 2
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	e6 ef       	ldi	r30, 0xF6	; 246
     18c:	f0 e2       	ldi	r31, 0x20	; 32
     18e:	00 e0       	ldi	r16, 0x00	; 0
     190:	0b bf       	out	0x3b, r16	; 59
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
     194:	07 90       	elpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a0 31       	cpi	r26, 0x10	; 16
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
     19e:	23 e0       	ldi	r18, 0x03	; 3
     1a0:	a0 e1       	ldi	r26, 0x10	; 16
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	af 3c       	cpi	r26, 0xCF	; 207
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>

000001ae <__do_global_ctors>:
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	ca eb       	ldi	r28, 0xBA	; 186
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <__do_global_ctors+0x16>
     1b8:	21 97       	sbiw	r28, 0x01	; 1
     1ba:	01 09       	sbc	r16, r1
     1bc:	80 2f       	mov	r24, r16
     1be:	fe 01       	movw	r30, r28
     1c0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__tablejump2__>
     1c4:	c9 3b       	cpi	r28, 0xB9	; 185
     1c6:	d1 07       	cpc	r29, r17
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 07       	cpc	r16, r24
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__do_global_ctors+0xa>
     1ce:	bb d2       	rcall	.+1398   	; 0x746 <main>
     1d0:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <_exit>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <_ZN7EncoderC1Ev>:
{
	return Encoder_rpm;
}

void Encoder::Encoder_Increase_Angle_Counter(void)
{
     1d6:	fc 01       	movw	r30, r24
     1d8:	16 8a       	std	Z+22, r1	; 0x16
     1da:	17 8a       	std	Z+23, r1	; 0x17
     1dc:	10 8e       	std	Z+24, r1	; 0x18
     1de:	11 8e       	std	Z+25, r1	; 0x19
     1e0:	17 8e       	std	Z+31, r1	; 0x1f
     1e2:	16 8e       	std	Z+30, r1	; 0x1e
     1e4:	11 82       	std	Z+1, r1	; 0x01
     1e6:	10 82       	st	Z, r1
     1e8:	11 a2       	std	Z+33, r1	; 0x21
     1ea:	10 a2       	std	Z+32, r1	; 0x20
     1ec:	13 a2       	std	Z+35, r1	; 0x23
     1ee:	12 a2       	std	Z+34, r1	; 0x22
     1f0:	08 95       	ret

000001f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>:
     1f2:	85 b5       	in	r24, 0x25	; 37
     1f4:	85 60       	ori	r24, 0x05	; 5
     1f6:	85 bd       	out	0x25, r24	; 37
     1f8:	8b e9       	ldi	r24, 0x9B	; 155
     1fa:	87 bd       	out	0x27, r24	; 39
     1fc:	ee e6       	ldi	r30, 0x6E	; 110
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	82 60       	ori	r24, 0x02	; 2
     204:	80 83       	st	Z, r24
     206:	a9 9a       	sbi	0x15, 1	; 21
     208:	16 bc       	out	0x26, r1	; 38
     20a:	08 95       	ret

0000020c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>:
     20c:	e9 e6       	ldi	r30, 0x69	; 105
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	82 60       	ori	r24, 0x02	; 2
     214:	80 83       	st	Z, r24
     216:	e8 9a       	sbi	0x1d, 0	; 29
     218:	e0 9a       	sbi	0x1c, 0	; 28
     21a:	08 95       	ret

0000021c <_ZN7Encoder18Encoder_InitializeEv>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	50 98       	cbi	0x0a, 0	; 10
     224:	08 98       	cbi	0x01, 0	; 1
     226:	f2 df       	rcall	.-28     	; 0x20c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>
     228:	ce 01       	movw	r24, r28
     22a:	e3 df       	rcall	.-58     	; 0x1f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>:
     232:	fc 01       	movw	r30, r24
     234:	00 9b       	sbis	0x00, 0	; 0
     236:	1c c0       	rjmp	.+56     	; 0x270 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x3e>
     238:	86 89       	ldd	r24, Z+22	; 0x16
     23a:	97 89       	ldd	r25, Z+23	; 0x17
     23c:	a0 8d       	ldd	r26, Z+24	; 0x18
     23e:	b1 8d       	ldd	r27, Z+25	; 0x19
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	a1 09       	sbc	r26, r1
     244:	b1 09       	sbc	r27, r1
     246:	86 8b       	std	Z+22, r24	; 0x16
     248:	97 8b       	std	Z+23, r25	; 0x17
     24a:	a0 8f       	std	Z+24, r26	; 0x18
     24c:	b1 8f       	std	Z+25, r27	; 0x19
     24e:	82 8d       	ldd	r24, Z+26	; 0x1a
     250:	93 8d       	ldd	r25, Z+27	; 0x1b
     252:	a4 8d       	ldd	r26, Z+28	; 0x1c
     254:	b5 8d       	ldd	r27, Z+29	; 0x1d
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	82 8f       	std	Z+26, r24	; 0x1a
     25e:	93 8f       	std	Z+27, r25	; 0x1b
     260:	a4 8f       	std	Z+28, r26	; 0x1c
     262:	b5 8f       	std	Z+29, r27	; 0x1d
     264:	86 8d       	ldd	r24, Z+30	; 0x1e
     266:	97 8d       	ldd	r25, Z+31	; 0x1f
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	97 8f       	std	Z+31, r25	; 0x1f
     26c:	86 8f       	std	Z+30, r24	; 0x1e
     26e:	08 95       	ret
     270:	00 99       	sbic	0x00, 0	; 0
     272:	1b c0       	rjmp	.+54     	; 0x2aa <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x78>
     274:	86 89       	ldd	r24, Z+22	; 0x16
     276:	97 89       	ldd	r25, Z+23	; 0x17
     278:	a0 8d       	ldd	r26, Z+24	; 0x18
     27a:	b1 8d       	ldd	r27, Z+25	; 0x19
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	86 8b       	std	Z+22, r24	; 0x16
     284:	97 8b       	std	Z+23, r25	; 0x17
     286:	a0 8f       	std	Z+24, r26	; 0x18
     288:	b1 8f       	std	Z+25, r27	; 0x19
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	93 8d       	ldd	r25, Z+27	; 0x1b
     28e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     290:	b5 8d       	ldd	r27, Z+29	; 0x1d
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	82 8f       	std	Z+26, r24	; 0x1a
     29a:	93 8f       	std	Z+27, r25	; 0x1b
     29c:	a4 8f       	std	Z+28, r26	; 0x1c
     29e:	b5 8f       	std	Z+29, r27	; 0x1d
     2a0:	86 8d       	ldd	r24, Z+30	; 0x1e
     2a2:	97 8d       	ldd	r25, Z+31	; 0x1f
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	97 8f       	std	Z+31, r25	; 0x1f
     2a8:	86 8f       	std	Z+30, r24	; 0x1e
     2aa:	08 95       	ret

000002ac <_ZN7Encoder17Encoder_Get_angleEv>:

}

int Encoder::Encoder_Get_angle()
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
	Angle = (float(Angle_count)*(float(ENCODER_MOTOR_FACTOR)/ENCODER_PPR))*360;
     2b2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     2b4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     2b6:	07 2e       	mov	r0, r23
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__floatsisf>
     2c2:	21 e8       	ldi	r18, 0x81	; 129
     2c4:	30 e8       	ldi	r19, 0x80	; 128
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5a e3       	ldi	r21, 0x3A	; 58
     2ca:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	44 eb       	ldi	r20, 0xB4	; 180
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3>
     2da:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fixsfsi>
     2de:	79 83       	std	Y+1, r23	; 0x01
     2e0:	68 83       	st	Y, r22
	return Angle;
}
     2e2:	cb 01       	movw	r24, r22
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <_ZN7Encoder20Encoder_update_SpeedEv>:

void Encoder::Encoder_update_Speed()
{
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	fc 01       	movw	r30, r24
	EncoderBuffer[3] = EncoderBuffer[2];
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	a4 85       	ldd	r26, Z+12	; 0x0c
     2fe:	b5 85       	ldd	r27, Z+13	; 0x0d
     300:	86 87       	std	Z+14, r24	; 0x0e
     302:	97 87       	std	Z+15, r25	; 0x0f
     304:	a0 8b       	std	Z+16, r26	; 0x10
     306:	b1 8b       	std	Z+17, r27	; 0x11
	EncoderBuffer[2] = EncoderBuffer[1];
     308:	46 81       	ldd	r20, Z+6	; 0x06
     30a:	57 81       	ldd	r21, Z+7	; 0x07
     30c:	60 85       	ldd	r22, Z+8	; 0x08
     30e:	71 85       	ldd	r23, Z+9	; 0x09
     310:	42 87       	std	Z+10, r20	; 0x0a
     312:	53 87       	std	Z+11, r21	; 0x0b
     314:	64 87       	std	Z+12, r22	; 0x0c
     316:	75 87       	std	Z+13, r23	; 0x0d
	EncoderBuffer[1] = EncoderBuffer[0];
     318:	c2 80       	ldd	r12, Z+2	; 0x02
     31a:	d3 80       	ldd	r13, Z+3	; 0x03
     31c:	e4 80       	ldd	r14, Z+4	; 0x04
     31e:	f5 80       	ldd	r15, Z+5	; 0x05
     320:	c6 82       	std	Z+6, r12	; 0x06
     322:	d7 82       	std	Z+7, r13	; 0x07
     324:	e0 86       	std	Z+8, r14	; 0x08
     326:	f1 86       	std	Z+9, r15	; 0x09
	EncoderBuffer[0] = Count;
     328:	06 89       	ldd	r16, Z+22	; 0x16
     32a:	17 89       	ldd	r17, Z+23	; 0x17
     32c:	20 8d       	ldd	r18, Z+24	; 0x18
     32e:	31 8d       	ldd	r19, Z+25	; 0x19
     330:	02 83       	std	Z+2, r16	; 0x02
     332:	13 83       	std	Z+3, r17	; 0x03
     334:	24 83       	std	Z+4, r18	; 0x04
     336:	35 83       	std	Z+5, r19	; 0x05
	speed   =  ((EncoderBuffer[0]+EncoderBuffer[1]+EncoderBuffer[2]+EncoderBuffer[3])>>2);
     338:	0c 0d       	add	r16, r12
     33a:	1d 1d       	adc	r17, r13
     33c:	2e 1d       	adc	r18, r14
     33e:	3f 1d       	adc	r19, r15
     340:	40 0f       	add	r20, r16
     342:	51 1f       	adc	r21, r17
     344:	62 1f       	adc	r22, r18
     346:	73 1f       	adc	r23, r19
     348:	84 0f       	add	r24, r20
     34a:	95 1f       	adc	r25, r21
     34c:	a6 1f       	adc	r26, r22
     34e:	b7 1f       	adc	r27, r23
     350:	b5 95       	asr	r27
     352:	a7 95       	ror	r26
     354:	97 95       	ror	r25
     356:	87 95       	ror	r24
     358:	b5 95       	asr	r27
     35a:	a7 95       	ror	r26
     35c:	97 95       	ror	r25
     35e:	87 95       	ror	r24
     360:	82 8b       	std	Z+18, r24	; 0x12
     362:	93 8b       	std	Z+19, r25	; 0x13
     364:	a4 8b       	std	Z+20, r26	; 0x14
     366:	b5 8b       	std	Z+21, r27	; 0x15
	Count = 0;
     368:	16 8a       	std	Z+22, r1	; 0x16
     36a:	17 8a       	std	Z+23, r1	; 0x17
     36c:	10 8e       	std	Z+24, r1	; 0x18
     36e:	11 8e       	std	Z+25, r1	; 0x19
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	df 90       	pop	r13
     37a:	cf 90       	pop	r12
     37c:	08 95       	ret

0000037e <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>:
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
		inline void Dcr_Count(){Encoder_Count--;};
     37e:	6c 98       	cbi	0x0d, 4	; 13
     380:	09 98       	cbi	0x01, 1	; 1
     382:	6c 98       	cbi	0x0d, 4	; 13
     384:	74 9a       	sbi	0x0e, 4	; 14
     386:	09 98       	cbi	0x01, 1	; 1
     388:	11 9a       	sbi	0x02, 1	; 2
     38a:	ea e6       	ldi	r30, 0x6A	; 106
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 83       	st	Z, r24
     394:	ec 9a       	sbi	0x1d, 4	; 29
     396:	e4 9a       	sbi	0x1c, 4	; 28
     398:	08 95       	ret

0000039a <_ZN13GenevaEncoderC1Ev>:
     39a:	fc 01       	movw	r30, r24
     39c:	11 82       	std	Z+1, r1	; 0x01
     39e:	10 82       	st	Z, r1
     3a0:	ee cf       	rjmp	.-36     	; 0x37e <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     3a2:	08 95       	ret

000003a4 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>:
		Dcr_Count();
	}
}

int GenevaEncoder::Enoder_Get_Angle()
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
	Geneva_Angle = (float(Encoder_Count)/PPR)*360;
     3aa:	68 81       	ld	r22, Y
     3ac:	79 81       	ldd	r23, Y+1	; 0x01
     3ae:	07 2e       	mov	r0, r23
     3b0:	00 0c       	add	r0, r0
     3b2:	88 0b       	sbc	r24, r24
     3b4:	99 0b       	sbc	r25, r25
     3b6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__floatsisf>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	44 e3       	ldi	r20, 0x34	; 52
     3c0:	53 e4       	ldi	r21, 0x43	; 67
     3c2:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divsf3>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	44 eb       	ldi	r20, 0xB4	; 180
     3cc:	53 e4       	ldi	r21, 0x43	; 67
     3ce:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3>
     3d2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fixsfsi>
     3d6:	7f 83       	std	Y+7, r23	; 0x07
     3d8:	6e 83       	std	Y+6, r22	; 0x06
	return Geneva_Angle;
}
     3da:	cb 01       	movw	r24, r22
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <_ZN11GenevaMotor7InitPWMEv>:
	SetOcrValue(0);
}

void GenevaMotor::InitPWM()
{
	OUTPUT(DD_F_G);
     3e2:	24 9a       	sbi	0x04, 4	; 4
	OUTPUT(DD_B_G);
     3e4:	27 9a       	sbi	0x04, 7	; 4
	
	OUTPUT(DD_PWM_G);
     3e6:	25 9a       	sbi	0x04, 5	; 4
	 
	PWM_TCCRA_G |= (1 << PWM_G_COM1)| (1 << PWM_G_WGM1);                                   //Fast PWM
     3e8:	e0 e8       	ldi	r30, 0x80	; 128
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	82 68       	ori	r24, 0x82	; 130
     3f0:	80 83       	st	Z, r24
	
	
	PWM_TCCRB_G |= (1 << PWM_G_WGM2) | (1 << PWM_G_WGM3) | (1 << PWM_G_CS1);
     3f2:	e1 e8       	ldi	r30, 0x81	; 129
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	8a 61       	ori	r24, 0x1A	; 26
     3fa:	80 83       	st	Z, r24
	PWM_ICR_G    = ICR_TOP;
     3fc:	89 ef       	ldi	r24, 0xF9	; 249
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     404:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     408:	08 95       	ret

0000040a <_ZN11GenevaMotor19SetForwardDirectionEv>:
}

void GenevaMotor::SetForwardDirection()
{
	SET(DD_F_G);
     40a:	2c 9a       	sbi	0x05, 4	; 5
	CLEAR(DD_B_G);
     40c:	2f 98       	cbi	0x05, 7	; 5
     40e:	08 95       	ret

00000410 <_ZN11GenevaMotor19SetReverseDirectionEv>:
}

void GenevaMotor::SetReverseDirection()
{
	CLEAR(DD_F_G);
     410:	2c 98       	cbi	0x05, 4	; 5
	SET(DD_B_G);
     412:	2f 9a       	sbi	0x05, 7	; 5
     414:	08 95       	ret

00000416 <_ZN11GenevaMotor9StopMotorEv>:
}

void GenevaMotor::StopMotor()
{
	SET(DD_F_G);
     416:	2c 9a       	sbi	0x05, 4	; 5
	SET(DD_B_G);
     418:	2f 9a       	sbi	0x05, 7	; 5
	
	PWM_OCR_G = 0;
     41a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     41e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     422:	08 95       	ret

00000424 <_ZN11GenevaMotor11SetOcrValueEi>:
}

void GenevaMotor::SetOcrValue(int ocr)
{
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	8c 01       	movw	r16, r24
     42e:	eb 01       	movw	r28, r22
	if (ocr > 0)
     430:	1c 16       	cp	r1, r28
     432:	1d 06       	cpc	r1, r29
     434:	0c f4       	brge	.+2      	; 0x438 <_ZN11GenevaMotor11SetOcrValueEi+0x14>
		SetForwardDirection();
     436:	e9 df       	rcall	.-46     	; 0x40a <_ZN11GenevaMotor19SetForwardDirectionEv>
	if(ocr >= MAX_VALUE)
     438:	c9 3f       	cpi	r28, 0xF9	; 249
     43a:	d1 05       	cpc	r29, r1
     43c:	44 f4       	brge	.+16     	; 0x44e <_ZN11GenevaMotor11SetOcrValueEi+0x2a>
		ocr = MAX_VALUE;
		
	if (ocr < 0)
     43e:	dd 23       	and	r29, r29
     440:	44 f4       	brge	.+16     	; 0x452 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
	{
		ocr = -ocr;
     442:	d1 95       	neg	r29
     444:	c1 95       	neg	r28
     446:	d1 09       	sbc	r29, r1
		SetReverseDirection();
     448:	c8 01       	movw	r24, r16
     44a:	e2 df       	rcall	.-60     	; 0x410 <_ZN11GenevaMotor19SetReverseDirectionEv>
     44c:	02 c0       	rjmp	.+4      	; 0x452 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
void GenevaMotor::SetOcrValue(int ocr)
{
	if (ocr > 0)
		SetForwardDirection();
	if(ocr >= MAX_VALUE)
		ocr = MAX_VALUE;
     44e:	c9 ef       	ldi	r28, 0xF9	; 249
     450:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ocr = -ocr;
		SetReverseDirection();
	}
	
	PWM_OCR_G = ocr;
     452:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     456:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>:


#include "GenevaMotor.h"

void GenevaMotor::Initialize_Geneva_Motor()
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	ec 01       	movw	r28, r24
	InitPWM();
     46a:	bb df       	rcall	.-138    	; 0x3e2 <_ZN11GenevaMotor7InitPWMEv>
	StopMotor();
     46c:	ce 01       	movw	r24, r28
     46e:	d3 df       	rcall	.-90     	; 0x416 <_ZN11GenevaMotor9StopMotorEv>
	SetOcrValue(0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	ce 01       	movw	r24, r28
     476:	d6 df       	rcall	.-84     	; 0x424 <_ZN11GenevaMotor11SetOcrValueEi>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <__vector_15>:
void Initialize_Global_Timer()
{
	TCNT2 = 0;
	TCCR2B |= (1<<CS20)|(1<<CS21)|(1<<CS22);
	TIMSK2 |= (1<<TOIE2);
	TIFR2  |= (1<<TOV2);
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <timer2_millis>
     494:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <timer2_millis+0x1>
     498:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <timer2_millis+0x2>
     49c:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <timer2_millis+0x3>
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <timer2_millis>
     4aa:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <timer2_millis+0x1>
     4ae:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <timer2_millis+0x2>
     4b2:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <timer2_millis+0x3>
     4b6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <timer2_fract>
     4ba:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <timer2_fract+0x1>
     4be:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <timer2_fract+0x2>
     4c2:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <timer2_fract+0x3>
     4c6:	03 96       	adiw	r24, 0x03	; 3
     4c8:	a1 1d       	adc	r26, r1
     4ca:	b1 1d       	adc	r27, r1
     4cc:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <timer2_fract>
     4d0:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <timer2_fract+0x1>
     4d4:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <timer2_fract+0x2>
     4d8:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <timer2_fract+0x3>
     4dc:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <timer2_fract>
     4e0:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <timer2_fract+0x1>
     4e4:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <timer2_fract+0x2>
     4e8:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <timer2_fract+0x3>
     4ec:	8d 37       	cpi	r24, 0x7D	; 125
     4ee:	91 05       	cpc	r25, r1
     4f0:	a1 05       	cpc	r26, r1
     4f2:	b1 05       	cpc	r27, r1
     4f4:	38 f1       	brcs	.+78     	; 0x544 <__vector_15+0xc6>
     4f6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <timer2_fract>
     4fa:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <timer2_fract+0x1>
     4fe:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <timer2_fract+0x2>
     502:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <timer2_fract+0x3>
     506:	8d 57       	subi	r24, 0x7D	; 125
     508:	91 09       	sbc	r25, r1
     50a:	a1 09       	sbc	r26, r1
     50c:	b1 09       	sbc	r27, r1
     50e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <timer2_fract>
     512:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <timer2_fract+0x1>
     516:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <timer2_fract+0x2>
     51a:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <timer2_fract+0x3>
     51e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <timer2_millis>
     522:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <timer2_millis+0x1>
     526:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <timer2_millis+0x2>
     52a:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <timer2_millis+0x3>
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	a1 1d       	adc	r26, r1
     532:	b1 1d       	adc	r27, r1
     534:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <timer2_millis>
     538:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <timer2_millis+0x1>
     53c:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <timer2_millis+0x2>
     540:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <timer2_millis+0x3>
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <_Z6millisv>:
     556:	2f b7       	in	r18, 0x3f	; 63
     558:	f8 94       	cli
     55a:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <timer2_millis>
     55e:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <timer2_millis+0x1>
     562:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <timer2_millis+0x2>
     566:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <timer2_millis+0x3>
     56a:	2f bf       	out	0x3f, r18	; 63
     56c:	08 95       	ret

0000056e <_Z21initialise_timeperiodv>:
     56e:	e1 eb       	ldi	r30, 0xB1	; 177
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	84 60       	ori	r24, 0x04	; 4
     576:	80 83       	st	Z, r24
     578:	e0 e7       	ldi	r30, 0x70	; 112
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	81 60       	ori	r24, 0x01	; 1
     580:	80 83       	st	Z, r24
     582:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     586:	08 95       	ret

00000588 <_Z10Run_Genevav>:
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <G_PID>
     58e:	80 ed       	ldi	r24, 0xD0	; 208
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <Geneva_PID+0x2e>
     596:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Geneva_PID+0x2d>
     59a:	08 95       	ret

0000059c <_Z35Initialize_Throwing12TCRT_Interruptv>:
     59c:	51 98       	cbi	0x0a, 1	; 10
     59e:	59 9a       	sbi	0x0b, 1	; 11
     5a0:	e9 e6       	ldi	r30, 0x69	; 105
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	80 62       	ori	r24, 0x20	; 32
     5a8:	80 83       	st	Z, r24
     5aa:	ea 9a       	sbi	0x1d, 2	; 29
     5ac:	e2 9a       	sbi	0x1c, 2	; 28
     5ae:	08 95       	ret

000005b0 <_Z34Initialize_Throwing3TCRT_Interruptv>:
     5b0:	52 98       	cbi	0x0a, 2	; 10
     5b2:	5a 9a       	sbi	0x0b, 2	; 11
     5b4:	e9 e6       	ldi	r30, 0x69	; 105
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 60       	ori	r24, 0x08	; 8
     5bc:	80 83       	st	Z, r24
     5be:	e9 9a       	sbi	0x1d, 1	; 29
     5c0:	e1 9a       	sbi	0x1c, 1	; 28
     5c2:	08 95       	ret

000005c4 <_Z14Initialize_Allv>:
     5c4:	eb df       	rcall	.-42     	; 0x59c <_Z35Initialize_Throwing12TCRT_Interruptv>
     5c6:	f4 df       	rcall	.-24     	; 0x5b0 <_Z34Initialize_Throwing3TCRT_Interruptv>
     5c8:	82 ee       	ldi	r24, 0xE2	; 226
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN5Motor10InitialiseEv>
     5d0:	8e eb       	ldi	r24, 0xBE	; 190
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	23 de       	rcall	.-954    	; 0x21c <_ZN7Encoder18Encoder_InitializeEv>
     5d6:	83 ee       	ldi	r24, 0xE3	; 227
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	44 df       	rcall	.-376    	; 0x464 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>
     5dc:	86 eb       	ldi	r24, 0xB6	; 182
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	ce ce       	rjmp	.-612    	; 0x37e <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     5e2:	08 95       	ret

000005e4 <_Z27Initial_Position_Of_The_ARMv>:
}

void Initial_Position_Of_The_ARM(void)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
	sei();
     5e8:	78 94       	sei
	while(!READ(Throwing_3TCRT))
     5ea:	4a 99       	sbic	0x09, 2	; 9
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <_Z27Initial_Position_Of_The_ARMv+0x1a>
	{
		M.SetOcrValue(-60);
     5ee:	64 ec       	ldi	r22, 0xC4	; 196
     5f0:	7f ef       	ldi	r23, 0xFF	; 255
     5f2:	82 ee       	ldi	r24, 0xE2	; 226
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN5Motor11SetOcrValueEi>
}

void Initial_Position_Of_The_ARM(void)
{
	sei();
	while(!READ(Throwing_3TCRT))
     5fa:	4a 9b       	sbis	0x09, 2	; 9
     5fc:	f8 cf       	rjmp	.-16     	; 0x5ee <_Z27Initial_Position_Of_The_ARMv+0xa>
	{
		M.SetOcrValue(-60);
	}
	E.Angle_count = 0;
     5fe:	ce eb       	ldi	r28, 0xBE	; 190
     600:	d2 e0       	ldi	r29, 0x02	; 2
     602:	1f 8e       	std	Y+31, r1	; 0x1f
     604:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     606:	82 ee       	ldi	r24, 0xE2	; 226
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN5Motor9StopMotorEv>
	TCRTRevolutionCount = 0;
     60e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
     612:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
	E.ExtraCount = 0;
     616:	1a 8e       	std	Y+26, r1	; 0x1a
     618:	1b 8e       	std	Y+27, r1	; 0x1b
     61a:	1c 8e       	std	Y+28, r1	; 0x1c
     61c:	1d 8e       	std	Y+29, r1	; 0x1d
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     61e:	e7 e8       	ldi	r30, 0x87	; 135
     620:	f2 e0       	ldi	r31, 0x02	; 2
     622:	16 a6       	std	Z+46, r1	; 0x2e
     624:	15 a6       	std	Z+45, r1	; 0x2d
     626:	8e 8d       	ldd	r24, Y+30	; 0x1e
     628:	9f 8d       	ldd	r25, Y+31	; 0x1f
     62a:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <Angle_PID+0x2e>
     62e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <Angle_PID+0x2d>
	
	
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(E.Angle_count);
	PIDFlag = false;
     632:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PIDFlag>
	Speed_PID.lastinput = 0;
     636:	15 a2       	std	Z+37, r1	; 0x25
     638:	16 a2       	std	Z+38, r1	; 0x26
     63a:	17 a2       	std	Z+39, r1	; 0x27
     63c:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.output    = 0;
     63e:	15 8e       	std	Z+29, r1	; 0x1d
     640:	16 8e       	std	Z+30, r1	; 0x1e
     642:	17 8e       	std	Z+31, r1	; 0x1f
     644:	10 a2       	std	Z+32, r1	; 0x20
	Speed_PID.Iterm     = 0;
     646:	11 a2       	std	Z+33, r1	; 0x21
     648:	12 a2       	std	Z+34, r1	; 0x22
     64a:	13 a2       	std	Z+35, r1	; 0x23
     64c:	14 a2       	std	Z+36, r1	; 0x24
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <_Z8GoToHomev>:

void GoToHome()
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
	sei();
     658:	78 94       	sei
	while(!READ(Home_TCRT))
     65a:	4b 99       	sbic	0x09, 3	; 9
     65c:	08 c0       	rjmp	.+16     	; 0x66e <_Z8GoToHomev+0x1a>
	{
		M.SetOcrValue(-60);	
     65e:	64 ec       	ldi	r22, 0xC4	; 196
     660:	7f ef       	ldi	r23, 0xFF	; 255
     662:	82 ee       	ldi	r24, 0xE2	; 226
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN5Motor11SetOcrValueEi>
}

void GoToHome()
{
	sei();
	while(!READ(Home_TCRT))
     66a:	4b 9b       	sbis	0x09, 3	; 9
     66c:	f8 cf       	rjmp	.-16     	; 0x65e <_Z8GoToHomev+0xa>
	{
		M.SetOcrValue(-60);	
	//	ReachedHome = false;
	}
	E.Angle_count = 0;
     66e:	ce eb       	ldi	r28, 0xBE	; 190
     670:	d2 e0       	ldi	r29, 0x02	; 2
     672:	1f 8e       	std	Y+31, r1	; 0x1f
     674:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     676:	82 ee       	ldi	r24, 0xE2	; 226
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN5Motor9StopMotorEv>
	
	TCRTRevolutionCount = 0;
     67e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
     682:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
	E.ExtraCount = 0;
     686:	1a 8e       	std	Y+26, r1	; 0x1a
     688:	1b 8e       	std	Y+27, r1	; 0x1b
     68a:	1c 8e       	std	Y+28, r1	; 0x1c
     68c:	1d 8e       	std	Y+29, r1	; 0x1d
     68e:	e7 e8       	ldi	r30, 0x87	; 135
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	16 a6       	std	Z+46, r1	; 0x2e
     694:	15 a6       	std	Z+45, r1	; 0x2d
     696:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <Angle_PID+0x2e>
     69a:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <Angle_PID+0x2d>
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(0);
	PIDFlag = false;
     69e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PIDFlag>
	Speed_PID.lastinput  = 0;
     6a2:	15 a2       	std	Z+37, r1	; 0x25
     6a4:	16 a2       	std	Z+38, r1	; 0x26
     6a6:	17 a2       	std	Z+39, r1	; 0x27
     6a8:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.Iterm      = 0;
     6aa:	11 a2       	std	Z+33, r1	; 0x21
     6ac:	12 a2       	std	Z+34, r1	; 0x22
     6ae:	13 a2       	std	Z+35, r1	; 0x23
     6b0:	14 a2       	std	Z+36, r1	; 0x24
	Speed_PID.output     = 0;
     6b2:	15 8e       	std	Z+29, r1	; 0x1d
     6b4:	16 8e       	std	Z+30, r1	; 0x1e
     6b6:	17 8e       	std	Z+31, r1	; 0x1f
     6b8:	10 a2       	std	Z+32, r1	; 0x20
		
	Stopping = true;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <Stopping>
	
	if (!Golden_Rack && !ShuttleCockArm_home)
     6c0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Golden_Rack>
     6c4:	81 11       	cpse	r24, r1
     6c6:	10 c0       	rjmp	.+32     	; 0x6e8 <_Z8GoToHomev+0x94>
     6c8:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ShuttleCockArm_home>
     6cc:	81 11       	cpse	r24, r1
     6ce:	0c c0       	rjmp	.+24     	; 0x6e8 <_Z8GoToHomev+0x94>
	{
		ShuttleCockArm_home = true;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ShuttleCockArm_home>
		previous_time_gone_home = millis();
     6d6:	3f df       	rcall	.-386    	; 0x556 <_Z6millisv>
     6d8:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <previous_time_gone_home>
     6dc:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <previous_time_gone_home+0x1>
     6e0:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <previous_time_gone_home+0x2>
     6e4:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <previous_time_gone_home+0x3>
	}	
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <_Z12FlyingDragonv>:
	}
}

void FlyingDragon()
{
	TZ3 = true;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <TZ3>
	TZ1 = false;
     6f4:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TZ1>
	TZ2 = false;
     6f8:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TZ2>
	//dir = 1;
	motor_speed = 48;         //56  49
     6fc:	20 e3       	ldi	r18, 0x30	; 48
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <motor_speed+0x1>
     704:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <motor_speed>
	Goflag = true;
     708:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <Goflag>
	PIDFlag = true;
     70c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PIDFlag>
	Negative_Ramp = true;
     710:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <Negative_Ramp>
     714:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Speed>
     718:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Speed+0x1>
     71c:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <Speed_PID+0x2e>
     720:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <Speed_PID+0x2d>
	//Ramp_up_flag = true;
	Speed_PID.SetSetPoint(Speed);
	TCRTRevolutionCount = 0;
     724:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
     728:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
	E.ExtraCount = 0;
     72c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <E+0x1a>
     730:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <E+0x1b>
     734:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <E+0x1c>
     738:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <E+0x1d>
	ReachedHome = false;
     73c:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <ReachedHome>
	
	SET(Plick_Plick);
     740:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     742:	40 9a       	sbi	0x08, 0	; 8
     744:	08 95       	ret

00000746 <main>:
 int add;
 int geneva_count;
 //uint8_t dir = -1;

int main(void)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	2f 97       	sbiw	r28, 0x0f	; 15
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
	OUTPUT(Pneumatic);
     75a:	ea e0       	ldi	r30, 0x0A	; 10
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	80 81       	ld	r24, Z
     760:	81 60       	ori	r24, 0x01	; 1
     762:	80 83       	st	Z, r24
	SET(Pneumatic);
     764:	eb e0       	ldi	r30, 0x0B	; 11
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	80 81       	ld	r24, Z
     76a:	81 60       	ori	r24, 0x01	; 1
     76c:	80 83       	st	Z, r24
	
	OUTPUT(ShuttleCockArm_P);
     76e:	9a 9a       	sbi	0x13, 2	; 19
	CLEAR(ShuttleCockArm_P);
     770:	a2 98       	cbi	0x14, 2	; 20
	
	OUTPUT(Grip_P);
     772:	98 9a       	sbi	0x13, 0	; 19
	CLEAR(Grip_P);
     774:	a0 98       	cbi	0x14, 0	; 20
	
	OUTPUT(Plick_Plick);
     776:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(Plick_Plick_2);
     778:	38 9a       	sbi	0x07, 0	; 7
	SET(Plick_Plick);
     77a:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     77c:	40 9a       	sbi	0x08, 0	; 8
	
	Initialize_All();
     77e:	22 df       	rcall	.-444    	; 0x5c4 <_Z14Initialize_Allv>
	initialise_timeperiod();
     780:	f6 de       	rcall	.-532    	; 0x56e <_Z21initialise_timeperiodv>
     782:	87 e8       	ldi	r24, 0x87	; 135
	
	
	Speed_PID.Initialize();
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN3PID10InitializeEv>
     78a:	e7 e8       	ldi	r30, 0x87	; 135
	public:
			float lastinput;
			float offset;
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
     78c:	f2 e0       	ldi	r31, 0x02	; 2
     78e:	0f 2e       	mov	r0, r31
     790:	41 2c       	mov	r4, r1
     792:	51 2c       	mov	r5, r1
     794:	f9 e7       	ldi	r31, 0x79	; 121
     796:	6f 2e       	mov	r6, r31
     798:	f3 ec       	ldi	r31, 0xC3	; 195
     79a:	7f 2e       	mov	r7, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	45 8a       	std	Z+21, r4	; 0x15
     7a0:	56 8a       	std	Z+22, r5	; 0x16
     7a2:	67 8a       	std	Z+23, r6	; 0x17
     7a4:	70 8e       	std	Z+24, r7	; 0x18
     7a6:	0f 2e       	mov	r0, r31
     7a8:	81 2c       	mov	r8, r1
     7aa:	91 2c       	mov	r9, r1
     7ac:	f9 e7       	ldi	r31, 0x79	; 121
     7ae:	af 2e       	mov	r10, r31
     7b0:	f3 e4       	ldi	r31, 0x43	; 67
     7b2:	bf 2e       	mov	r11, r31
     7b4:	f0 2d       	mov	r31, r0
     7b6:	81 8a       	std	Z+17, r8	; 0x11
     7b8:	92 8a       	std	Z+18, r9	; 0x12
     7ba:	a3 8a       	std	Z+19, r10	; 0x13
     7bc:	b4 8a       	std	Z+20, r11	; 0x14
     7be:	0f 2e       	mov	r0, r31
	Speed_PID.Set_Range(-249,249);
	Speed_PID.Set_PID(4.1,0.399,8.4);     //   6.65,0.234,3.949    8.10,0.454,11.10   7.00,0.259,3.799   7.00,0.259,3.799  10.00,0.489,10.150  8.80,0.169,5.550      //8.05,0.115,4.299	 10.95,0.329,18.650  8.10,0.169,11.10// 9.25,0.454,6.800   8.30,0.504,9.650
     7c0:	f6 e6       	ldi	r31, 0x66	; 102
     7c2:	cf 2e       	mov	r12, r31
     7c4:	dc 2c       	mov	r13, r12
     7c6:	f6 e0       	ldi	r31, 0x06	; 6
     7c8:	ef 2e       	mov	r14, r31
     7ca:	f1 e4       	ldi	r31, 0x41	; 65
     7cc:	ff 2e       	mov	r15, r31
     7ce:	f0 2d       	mov	r31, r0
     7d0:	0a eb       	ldi	r16, 0xBA	; 186
     7d2:	19 e4       	ldi	r17, 0x49	; 73
     7d4:	2c ec       	ldi	r18, 0xCC	; 204
     7d6:	3e e3       	ldi	r19, 0x3E	; 62
     7d8:	43 e3       	ldi	r20, 0x33	; 51
     7da:	53 e3       	ldi	r21, 0x33	; 51
     7dc:	63 e8       	ldi	r22, 0x83	; 131
     7de:	70 e4       	ldi	r23, 0x40	; 64
     7e0:	cf 01       	movw	r24, r30
     7e2:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN3PID7Set_PIDEfff>
     7e6:	88 e5       	ldi	r24, 0x58	; 88

	Angle_PID.Initialize();
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN3PID10InitializeEv>
     7ee:	40 92 6d 02 	sts	0x026D, r4	; 0x80026d <Angle_PID+0x15>
     7f2:	50 92 6e 02 	sts	0x026E, r5	; 0x80026e <Angle_PID+0x16>
     7f6:	60 92 6f 02 	sts	0x026F, r6	; 0x80026f <Angle_PID+0x17>
     7fa:	70 92 70 02 	sts	0x0270, r7	; 0x800270 <Angle_PID+0x18>
     7fe:	80 92 69 02 	sts	0x0269, r8	; 0x800269 <Angle_PID+0x11>
     802:	90 92 6a 02 	sts	0x026A, r9	; 0x80026a <Angle_PID+0x12>
     806:	a0 92 6b 02 	sts	0x026B, r10	; 0x80026b <Angle_PID+0x13>
     80a:	b0 92 6c 02 	sts	0x026C, r11	; 0x80026c <Angle_PID+0x14>
     80e:	0f 2e       	mov	r0, r31
	Angle_PID.Set_Range(-249,249);
	Angle_PID.Set_PID(3.49,0.080,8.699 );                  //3.19,0.029,7.599  3.49,0.080,8.699   5.19,0.1,3.699
     810:	fb e1       	ldi	r31, 0x1B	; 27
     812:	cf 2e       	mov	r12, r31
     814:	ff e2       	ldi	r31, 0x2F	; 47
     816:	df 2e       	mov	r13, r31
     818:	fb e0       	ldi	r31, 0x0B	; 11
     81a:	ef 2e       	mov	r14, r31
     81c:	f1 e4       	ldi	r31, 0x41	; 65
     81e:	ff 2e       	mov	r15, r31
     820:	f0 2d       	mov	r31, r0
     822:	0a e0       	ldi	r16, 0x0A	; 10
     824:	17 ed       	ldi	r17, 0xD7	; 215
     826:	23 ea       	ldi	r18, 0xA3	; 163
     828:	3d e3       	ldi	r19, 0x3D	; 61
     82a:	49 e2       	ldi	r20, 0x29	; 41
     82c:	5c e5       	ldi	r21, 0x5C	; 92
     82e:	6f e5       	ldi	r22, 0x5F	; 95
     830:	70 e4       	ldi	r23, 0x40	; 64
     832:	88 e5       	ldi	r24, 0x58	; 88
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN3PID7Set_PIDEfff>
     83a:	89 e2       	ldi	r24, 0x29	; 41
	
	
	Geneva_PID.Initialize();
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	e6 d7       	rcall	.+4044   	; 0x180c <_ZN3PID10InitializeEv>
     840:	e9 e2       	ldi	r30, 0x29	; 41
     842:	f2 e0       	ldi	r31, 0x02	; 2
     844:	45 8a       	std	Z+21, r4	; 0x15
     846:	56 8a       	std	Z+22, r5	; 0x16
     848:	67 8a       	std	Z+23, r6	; 0x17
     84a:	70 8e       	std	Z+24, r7	; 0x18
     84c:	81 8a       	std	Z+17, r8	; 0x11
     84e:	92 8a       	std	Z+18, r9	; 0x12
     850:	a3 8a       	std	Z+19, r10	; 0x13
     852:	b4 8a       	std	Z+20, r11	; 0x14
     854:	0f 2e       	mov	r0, r31
	Geneva_PID.Set_Range(-249,249);
	Geneva_PID.Set_PID(26.0,0,18);                        //15.50 0.015 0            60.50,0.219,4.199   54.40,0.045,10.70
     856:	c1 2c       	mov	r12, r1
     858:	d1 2c       	mov	r13, r1
     85a:	f0 e9       	ldi	r31, 0x90	; 144
     85c:	ef 2e       	mov	r14, r31
     85e:	f1 e4       	ldi	r31, 0x41	; 65
     860:	ff 2e       	mov	r15, r31
     862:	f0 2d       	mov	r31, r0
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	98 01       	movw	r18, r16
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	60 ed       	ldi	r22, 0xD0	; 208
     870:	71 e4       	ldi	r23, 0x41	; 65
     872:	cf 01       	movw	r24, r30
     874:	ed d7       	rcall	.+4058   	; 0x1850 <_ZN3PID7Set_PIDEfff>
     876:	78 94       	sei
	sei();
     878:	87 e6       	ldi	r24, 0x67	; 103
	
	uart3_init(UART_BAUD_SELECT(9600,F_CPU));
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_Z10uart3_initj>
     880:	89 e1       	ldi	r24, 0x19	; 25
	uart0_init(UART_BAUD_SELECT(38400,F_CPU));
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_Z10uart0_initj>
     888:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	9c e9       	ldi	r25, 0x9C	; 156
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <main+0x146>
     890:	00 c0       	rjmp	.+0      	; 0x892 <main+0x14c>
     892:	00 00       	nop
	
	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
     894:	a7 de       	rcall	.-690    	; 0x5e4 <_Z27Initial_Position_Of_The_ARMv>
     896:	8f e0       	ldi	r24, 0x0F	; 15
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <Angle_PID+0x2e>
     89e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <Angle_PID+0x2d>
     8a2:	84 ec       	ldi	r24, 0xC4	; 196
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
     8a4:	9f ef       	ldi	r25, 0xFF	; 255
     8a6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <motor_speed+0x1>
     8aa:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <motor_speed>
     8ae:	82 ee       	ldi	r24, 0xE2	; 226
	
	Speed = -30;
     8b0:	9f ef       	ldi	r25, 0xFF	; 255
     8b2:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
     8b6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
     8bc:	e9 e6       	ldi	r30, 0x69	; 105
     8be:	f8 e1       	ldi	r31, 0x18	; 24
     8c0:	91 50       	subi	r25, 0x01	; 1
     8c2:	e0 40       	sbci	r30, 0x00	; 0
     8c4:	f0 40       	sbci	r31, 0x00	; 0
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <main+0x17a>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <main+0x184>
     8ca:	00 00       	nop
     8cc:	46 98       	cbi	0x08, 6	; 8
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
	_delay_ms(500);
	CLEAR(Plick_Plick);
     8ce:	40 98       	cbi	0x08, 0	; 8
	CLEAR(Plick_Plick_2);
     8d0:	41 2c       	mov	r4, r1
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
     8d2:	51 2c       	mov	r5, r1
     8d4:	32 01       	movw	r6, r4
     8d6:	1d 82       	std	Y+5, r1	; 0x05
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
     8d8:	1c 82       	std	Y+4, r1	; 0x04
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
     8da:	1b 86       	std	Y+11, r1	; 0x0b
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
     8dc:	18 86       	std	Y+8, r1	; 0x08
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
     8de:	1e 82       	std	Y+6, r1	; 0x06
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
     8e0:	1b 82       	std	Y+3, r1	; 0x03
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
     8e2:	1f 82       	std	Y+7, r1	; 0x07
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
     8e4:	1e 86       	std	Y+14, r1	; 0x0e
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
     8e6:	1f 86       	std	Y+15, r1	; 0x0f
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
     8e8:	1a 82       	std	Y+2, r1	; 0x02
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
     8ea:	19 86       	std	Y+9, r1	; 0x09
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
     8ec:	1d 86       	std	Y+13, r1	; 0x0d
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
     8ee:	1a 86       	std	Y+10, r1	; 0x0a
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
     8f0:	1c 86       	std	Y+12, r1	; 0x0c
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
	
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	21 2c       	mov	r2, r1
	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(15);

	int previous_data = 0;
     8f8:	31 2c       	mov	r3, r1
     8fa:	0f 2e       	mov	r0, r31
     8fc:	f7 e8       	ldi	r31, 0x87	; 135
     8fe:	af 2e       	mov	r10, r31
     900:	f2 e0       	ldi	r31, 0x02	; 2
     902:	bf 2e       	mov	r11, r31
     904:	f0 2d       	mov	r31, r0
     906:	0f 2e       	mov	r0, r31
				Goflag = true;
				PIDFlag = true;
				Ramp_up_flag = true;
				Speed_PID.SetSetPoint( Speed);
				TCRTRevolutionCount = 0;
				E.ExtraCount = 0;
     908:	fe eb       	ldi	r31, 0xBE	; 190
     90a:	8f 2e       	mov	r8, r31
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	9f 2e       	mov	r9, r31
     910:	f0 2d       	mov	r31, r0
     912:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(300);
	}*/
	
	while (1)
	{
		uart0_puts("while loop\n");
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_Z10uart0_putsPKc>
     91a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_Z10uart3_getcv>
		data = uart3_getc();
     91e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <data>
     922:	90 e0       	ldi	r25, 0x00	; 0
		switch (data)
     924:	fc 01       	movw	r30, r24
     926:	f1 97       	sbiw	r30, 0x31	; 49
     928:	e7 34       	cpi	r30, 0x47	; 71
     92a:	f1 05       	cpc	r31, r1
     92c:	08 f0       	brcs	.+2      	; 0x930 <main+0x1ea>
     92e:	ec c0       	rjmp	.+472    	; 0xb08 <main+0x3c2>
     930:	88 27       	eor	r24, r24
     932:	ee 58       	subi	r30, 0x8E	; 142
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	8f 4f       	sbci	r24, 0xFF	; 255
     938:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__tablejump2__>
     93c:	8d e0       	ldi	r24, 0x0D	; 13
		{
			case '1':
			{	
				uart0_puts("1\n");
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_Z10uart0_putsPKc>
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	4f e0       	ldi	r20, 0x0F	; 15
     948:	87 e2       	ldi	r24, 0x27	; 39
     94a:	31 50       	subi	r19, 0x01	; 1
     94c:	40 40       	sbci	r20, 0x00	; 0
     94e:	80 40       	sbci	r24, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <main+0x204>
     952:	00 c0       	rjmp	.+0      	; 0x954 <main+0x20e>
     954:	00 00       	nop
     956:	91 e0       	ldi	r25, 0x01	; 1
				_delay_ms(800);
				TZ1 = true;
     958:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <TZ1>
     95c:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TZ2>
				TZ2 = false;
     960:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <TZ3>
				TZ3 = false;
     964:	e2 ec       	ldi	r30, 0xC2	; 194
				//dir = -1;
				motor_speed = -62;                   //60
     966:	ff ef       	ldi	r31, 0xFF	; 255
     968:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <motor_speed+0x1>
     96c:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <motor_speed>
     970:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <Goflag>
				Goflag = true;
     974:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <PIDFlag>
				PIDFlag = true;
     978:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <G_PID>
				G_PID   = false;
     97c:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <Ramp_up_flag>
				Ramp_up_flag = true;
     980:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Speed>
     984:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Speed+0x1>
     988:	f5 01       	movw	r30, r10
     98a:	96 a7       	std	Z+46, r25	; 0x2e
     98c:	85 a7       	std	Z+45, r24	; 0x2d
     98e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     992:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
     996:	f4 01       	movw	r30, r8
				E.ExtraCount = 0;
     998:	12 8e       	std	Z+26, r1	; 0x1a
     99a:	13 8e       	std	Z+27, r1	; 0x1b
     99c:	14 8e       	std	Z+28, r1	; 0x1c
     99e:	15 8e       	std	Z+29, r1	; 0x1d
     9a0:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick);
     9a2:	40 9a       	sbi	0x08, 0	; 8
				SET(Plick_Plick_2);
     9a4:	b1 c0       	rjmp	.+354    	; 0xb08 <main+0x3c2>
				break;
     9a6:	ff ef       	ldi	r31, 0xFF	; 255
     9a8:	23 ed       	ldi	r18, 0xD3	; 211
     9aa:	30 e3       	ldi	r19, 0x30	; 48
     9ac:	f1 50       	subi	r31, 0x01	; 1
     9ae:	20 40       	sbci	r18, 0x00	; 0
     9b0:	30 40       	sbci	r19, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x266>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <main+0x270>
     9b6:	00 00       	nop
     9b8:	41 e0       	ldi	r20, 0x01	; 1
			}
			case '2':
			{
				_delay_ms(1000);
				TZ2 = true;
     9ba:	40 93 f1 02 	sts	0x02F1, r20	; 0x8002f1 <TZ2>
     9be:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TZ1>
				TZ1 = false;
     9c2:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <TZ3>
				TZ3 = false;
     9c6:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <G_PID>
				//dir = -1;
				G_PID = false;
     9ca:	82 ec       	ldi	r24, 0xC2	; 194
				motor_speed = -62;                                                               // -55;
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <motor_speed+0x1>
     9d2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <motor_speed>
     9d6:	40 93 f5 02 	sts	0x02F5, r20	; 0x8002f5 <Goflag>
				Goflag = true;
     9da:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <PIDFlag>
				PIDFlag = true;
     9de:	40 93 f4 02 	sts	0x02F4, r20	; 0x8002f4 <Ramp_up_flag>
				Ramp_up_flag = true;
     9e2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Speed>
     9e6:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Speed+0x1>
     9ea:	f5 01       	movw	r30, r10
     9ec:	96 a7       	std	Z+46, r25	; 0x2e
     9ee:	85 a7       	std	Z+45, r24	; 0x2d
     9f0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
				Speed_PID.SetSetPoint( Speed);
				TCRTRevolutionCount = 0;
     9f4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
     9f8:	f4 01       	movw	r30, r8
				E.ExtraCount = 0;
     9fa:	12 8e       	std	Z+26, r1	; 0x1a
     9fc:	13 8e       	std	Z+27, r1	; 0x1b
     9fe:	14 8e       	std	Z+28, r1	; 0x1c
     a00:	15 8e       	std	Z+29, r1	; 0x1d
     a02:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick);
     a04:	40 9a       	sbi	0x08, 0	; 8
				SET(Plick_Plick_2);
     a06:	80 c0       	rjmp	.+256    	; 0xb08 <main+0x3c2>
				break;
     a08:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Goflag>
// 				SET(Plick_Plick_2);
// 				break;
// 			}
			case 's':
			{
				Goflag = false;
     a0c:	f1 e0       	ldi	r31, 0x01	; 1
				PIDFlag = true;
     a0e:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <PIDFlag>
     a12:	f5 01       	movw	r30, r10
     a14:	16 a6       	std	Z+46, r1	; 0x2e
     a16:	15 a6       	std	Z+45, r1	; 0x2d
				Speed_PID.SetSetPoint(0);
				M.StopMotor();
     a18:	82 ee       	ldi	r24, 0xE2	; 226
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	85 d6       	rcall	.+3338   	; 0x1728 <_ZN5Motor9StopMotorEv>
     a1e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <Speed+0x1>
				Speed = 0;
     a22:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Speed>
     a26:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
				TCRTRevolutionCount = 0;
     a2a:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
     a2e:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Ramp_up_flag>
				Ramp_up_flag = false;
     a32:	6a c0       	rjmp	.+212    	; 0xb08 <main+0x3c2>
				break;
     a34:	0f 2e       	mov	r0, r31
			}
			case 'h':
			{ 
				Angle_PID.Set_PID(7.29,0,5.299);      //10.2,0,6.899  6.59,0.10,10.1   7.9,0,4.0
     a36:	f8 e6       	ldi	r31, 0x68	; 104
     a38:	cf 2e       	mov	r12, r31
     a3a:	f1 e9       	ldi	r31, 0x91	; 145
     a3c:	df 2e       	mov	r13, r31
     a3e:	f9 ea       	ldi	r31, 0xA9	; 169
     a40:	ef 2e       	mov	r14, r31
     a42:	f0 e4       	ldi	r31, 0x40	; 64
     a44:	ff 2e       	mov	r15, r31
     a46:	f0 2d       	mov	r31, r0
     a48:	00 e0       	ldi	r16, 0x00	; 0
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	98 01       	movw	r18, r16
     a4e:	4e ea       	ldi	r20, 0xAE	; 174
     a50:	57 e4       	ldi	r21, 0x47	; 71
     a52:	69 ee       	ldi	r22, 0xE9	; 233
     a54:	70 e4       	ldi	r23, 0x40	; 64
     a56:	88 e5       	ldi	r24, 0x58	; 88
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	fa d6       	rcall	.+3572   	; 0x1850 <_ZN3PID7Set_PIDEfff>
     a5c:	eb e0       	ldi	r30, 0x0B	; 11
				CLEAR(Pneumatic);
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	80 81       	ld	r24, Z
     a62:	8e 7f       	andi	r24, 0xFE	; 254
				GoToHome();
     a64:	80 83       	st	Z, r24
     a66:	f6 dd       	rcall	.-1044   	; 0x654 <_Z8GoToHomev>
				break;
     a68:	4f c0       	rjmp	.+158    	; 0xb08 <main+0x3c2>
			}
			case 'r':
			{
				Run_Geneva();
     a6a:	8e dd       	rcall	.-1252   	; 0x588 <_Z10Run_Genevav>
     a6c:	4d c0       	rjmp	.+154    	; 0xb08 <main+0x3c2>
				break;
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
			}
			case 'o':
			{
				Grab_ShuttleCock = true;
     a70:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <Grab_ShuttleCock>
     a74:	49 c0       	rjmp	.+146    	; 0xb08 <main+0x3c2>
				break;
     a76:	21 e0       	ldi	r18, 0x01	; 1
			}
			
			case 'j':
			{
				gotRack        = true;
     a78:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <gotRack>
     a7c:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <first_Golden>
				run_geneva_once = true;
				run_geneva_in_loop = false;
				first_Golden = true;
     a80:	1d 82       	std	Y+5, r1	; 0x05
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
				run_geneva_in_loop = false;
     a82:	31 e0       	ldi	r19, 0x01	; 1
			}
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
     a84:	3c 83       	std	Y+4, r19	; 0x04
     a86:	40 c0       	rjmp	.+128    	; 0xb08 <main+0x3c2>
				run_geneva_in_loop = false;
				first_Golden = true;
				break;
     a88:	eb e0       	ldi	r30, 0x0B	; 11
			}
			
			case 'n':
			{
				SET(Pneumatic);
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	80 81       	ld	r24, Z
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	80 83       	st	Z, r24
     a92:	3a c0       	rjmp	.+116    	; 0xb08 <main+0x3c2>
				break;
     a94:	eb e0       	ldi	r30, 0x0B	; 11
			}
			
			case 'm':
			{
				CLEAR(Pneumatic);
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	80 81       	ld	r24, Z
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 83       	st	Z, r24
     a9e:	34 c0       	rjmp	.+104    	; 0xb08 <main+0x3c2>
				break;
     aa0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <motor_speed>
			}
			
			case 'i':
			{
				motor_speed += 1;
     aa4:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <motor_speed+0x1>
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <motor_speed+0x1>
     aae:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <motor_speed>
     ab2:	2a c0       	rjmp	.+84     	; 0xb08 <main+0x3c2>
				break;
     ab4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <motor_speed>
			}
			
			case 'd':
			{
				motor_speed -= 1;
     ab8:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <motor_speed+0x1>
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <motor_speed+0x1>
     ac2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <motor_speed>
     ac6:	20 c0       	rjmp	.+64     	; 0xb08 <main+0x3c2>
				break;
     ac8:	27 e3       	ldi	r18, 0x37	; 55
			}
			
			case '3':
			{
				dir = 1;
				Speed = 55;
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	30 93 21 02 	sts	0x0221, r19	; 0x800221 <Speed+0x1>
     ad0:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <Speed>
     ad4:	31 e0       	ldi	r19, 0x01	; 1
				Negative_Ramp = true;
     ad6:	30 93 e6 02 	sts	0x02E6, r19	; 0x8002e6 <Negative_Ramp>
     ada:	30 93 e9 02 	sts	0x02E9, r19	; 0x8002e9 <Golden_Rack>
				Golden_Rack = true;
     ade:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <first_Golden>
				run_geneva_once = true;
				first_Golden = true;
     ae2:	41 e0       	ldi	r20, 0x01	; 1
			{
				dir = 1;
				Speed = 55;
				Negative_Ramp = true;
				Golden_Rack = true;
				run_geneva_once = true;
     ae4:	4c 83       	std	Y+4, r20	; 0x04
     ae6:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
			
			case '3':
			{
				dir = 1;
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	0e c0       	rjmp	.+28     	; 0xb08 <main+0x3c2>
				Speed = 55;
				Negative_Ramp = true;
				Golden_Rack = true;
				run_geneva_once = true;
				first_Golden = true;
				break;
     aec:	e6 eb       	ldi	r30, 0xB6	; 182
		inline void Reset_Count(){Encoder_Count = 0;};
     aee:	f2 e0       	ldi	r31, 0x02	; 2
     af0:	11 82       	std	Z+1, r1	; 0x01
     af2:	10 82       	st	Z, r1
     af4:	f1 e0       	ldi	r31, 0x01	; 1
			}
			
			case 'k':
			{
				run_geneva_in_loop = true;
     af6:	fd 83       	std	Y+5, r31	; 0x05
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <main+0x3c2>
     afa:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <Home>
				break;
			}
					
			case 'w':
			{
				if (!Home)
     afe:	81 11       	cpse	r24, r1
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <main+0x3c2>
     b02:	21 e0       	ldi	r18, 0x01	; 1
				{
					ReceiveShuttleCock = true;	
     b04:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <ReceiveShuttleCock>
			}

			default:break;
		}
		
		data = 0;
     b08:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <data>

		/*********************************************************************************************************************************/
			if (ShuttleCockArm_home)
     b0c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ShuttleCockArm_home>
     b10:	88 23       	and	r24, r24
     b12:	b9 f0       	breq	.+46     	; 0xb42 <main+0x3fc>
			{
				if (millis()-previous_time_gone_home >= 700)
     b14:	20 dd       	rcall	.-1472   	; 0x556 <_Z6millisv>
     b16:	00 91 23 02 	lds	r16, 0x0223	; 0x800223 <previous_time_gone_home>
     b1a:	10 91 24 02 	lds	r17, 0x0224	; 0x800224 <previous_time_gone_home+0x1>
     b1e:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <previous_time_gone_home+0x2>
     b22:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <previous_time_gone_home+0x3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	80 1b       	sub	r24, r16
     b2c:	91 0b       	sbc	r25, r17
     b2e:	a2 0b       	sbc	r26, r18
     b30:	b3 0b       	sbc	r27, r19
     b32:	8c 3b       	cpi	r24, 0xBC	; 188
     b34:	92 40       	sbci	r25, 0x02	; 2
     b36:	a1 05       	cpc	r26, r1
     b38:	b1 05       	cpc	r27, r1
     b3a:	18 f0       	brcs	.+6      	; 0xb42 <main+0x3fc>
     b3c:	a2 9a       	sbi	0x14, 2	; 20
				{
					SET(ShuttleCockArm_P);
     b3e:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ShuttleCockArm_home>
					ShuttleCockArm_home = false;
     b42:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <Grab_ShuttleCock>
				}
			}
			
		
		/******************************************Grabbing Shuttle Cock On Masters Command************************************************/
		if (Grab_ShuttleCock)
     b46:	88 23       	and	r24, r24
     b48:	01 f1       	breq	.+64     	; 0xb8a <main+0x444>
     b4a:	4f 81       	ldd	r20, Y+7	; 0x07
		{
			if (!Grabbed && !Armed && !Loaded && !UnGrab && !UnArmed)
     b4c:	41 11       	cpse	r20, r1
     b4e:	c5 c3       	rjmp	.+1930   	; 0x12da <main+0xb94>
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 11       	cpse	r24, r1
     b54:	1a c0       	rjmp	.+52     	; 0xb8a <main+0x444>
     b56:	9e 81       	ldd	r25, Y+6	; 0x06
     b58:	91 11       	cpse	r25, r1
     b5a:	17 c0       	rjmp	.+46     	; 0xb8a <main+0x444>
     b5c:	e8 85       	ldd	r30, Y+8	; 0x08
     b5e:	e1 11       	cpse	r30, r1
     b60:	14 c0       	rjmp	.+40     	; 0xb8a <main+0x444>
     b62:	fb 85       	ldd	r31, Y+11	; 0x0b
     b64:	f1 11       	cpse	r31, r1
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <main+0x444>
			{
				CLEAR(ShuttleCockArm_P);
     b68:	a2 98       	cbi	0x14, 2	; 20
				Grabbed = true;
				previous_time = millis();
     b6a:	f5 dc       	rcall	.-1558   	; 0x556 <_Z6millisv>
     b6c:	2b 01       	movw	r4, r22
     b6e:	3c 01       	movw	r6, r24
     b70:	b4 c3       	rjmp	.+1896   	; 0x12da <main+0xb94>
     b72:	a0 9a       	sbi	0x14, 0	; 20
			}
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
     b74:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <Grab_ShuttleCock>
				Armed = true;
				Grab_ShuttleCock = false;
     b78:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <ReceiveShuttleCock>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b7c:	81 11       	cpse	r24, r1
     b7e:	0e c0       	rjmp	.+28     	; 0xb9c <main+0x456>
     b80:	21 e0       	ldi	r18, 0x01	; 1
				previous_time = millis();
			}
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
				Armed = true;
     b82:	2b 83       	std	Y+3, r18	; 0x03
     b84:	31 e0       	ldi	r19, 0x01	; 1
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b86:	3f 83       	std	Y+7, r19	; 0x07
     b88:	6b c0       	rjmp	.+214    	; 0xc60 <main+0x51a>
     b8a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <ReceiveShuttleCock>
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <main+0x44e>
     b92:	66 c0       	rjmp	.+204    	; 0xc60 <main+0x51a>
     b94:	4b 81       	ldd	r20, Y+3	; 0x03
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     b96:	44 23       	and	r20, r20
     b98:	89 f0       	breq	.+34     	; 0xbbc <main+0x476>
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <main+0x45a>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b9e:	8f 83       	std	Y+7, r24	; 0x07
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     ba2:	91 11       	cpse	r25, r1
     ba4:	aa c3       	rjmp	.+1876   	; 0x12fa <main+0xbb4>
     ba6:	e8 85       	ldd	r30, Y+8	; 0x08
     ba8:	e1 11       	cpse	r30, r1
     baa:	21 c0       	rjmp	.+66     	; 0xbee <main+0x4a8>
     bac:	fb 85       	ldd	r31, Y+11	; 0x0b
     bae:	f1 11       	cpse	r31, r1
			{
				SET(ShuttleCockArm_P);
     bb0:	21 c0       	rjmp	.+66     	; 0xbf4 <main+0x4ae>
				Loaded = true;
				previous_time = millis();
     bb2:	a2 9a       	sbi	0x14, 2	; 20
     bb4:	d0 dc       	rcall	.-1632   	; 0x556 <_Z6millisv>
     bb6:	2b 01       	movw	r4, r22
     bb8:	3c 01       	movw	r6, r24
     bba:	9f c3       	rjmp	.+1854   	; 0x12fa <main+0xbb4>
			}
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
     bbc:	2e 81       	ldd	r18, Y+6	; 0x06
     bbe:	22 23       	and	r18, r18
     bc0:	f1 f0       	breq	.+60     	; 0xbfe <main+0x4b8>
     bc2:	c9 dc       	rcall	.-1646   	; 0x556 <_Z6millisv>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	84 19       	sub	r24, r4
     bca:	95 09       	sbc	r25, r5
     bcc:	a6 09       	sbc	r26, r6
     bce:	b7 09       	sbc	r27, r7
     bd0:	84 38       	cpi	r24, 0x84	; 132
     bd2:	93 40       	sbci	r25, 0x03	; 3
     bd4:	a1 05       	cpc	r26, r1
     bd6:	b1 05       	cpc	r27, r1
     bd8:	80 f0       	brcs	.+32     	; 0xbfa <main+0x4b4>
			{
				SET(Pneumatic);
     bda:	eb e0       	ldi	r30, 0x0B	; 11
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 81       	ld	r24, Z
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	80 83       	st	Z, r24
				UnGrab = true;
				Loaded = false;
				previous_time = millis();
     be4:	b8 dc       	rcall	.-1680   	; 0x556 <_Z6millisv>
     be6:	2b 01       	movw	r4, r22
     be8:	3c 01       	movw	r6, r24
     bea:	1e 82       	std	Y+6, r1	; 0x06
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
			{
				SET(Pneumatic);
				UnGrab = true;
				Loaded = false;
     bec:	0b c0       	rjmp	.+22     	; 0xc04 <main+0x4be>
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	fb 83       	std	Y+3, r31	; 0x03
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <main+0x4b8>
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	2b 83       	std	Y+3, r18	; 0x03
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <main+0x4b8>
     bfa:	31 e0       	ldi	r19, 0x01	; 1
     bfc:	3e 83       	std	Y+6, r19	; 0x06
				previous_time = millis();
			}
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
     bfe:	48 85       	ldd	r20, Y+8	; 0x08
     c00:	44 23       	and	r20, r20
     c02:	a1 f0       	breq	.+40     	; 0xc2c <main+0x4e6>
     c04:	a8 dc       	rcall	.-1712   	; 0x556 <_Z6millisv>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	84 19       	sub	r24, r4
     c0c:	95 09       	sbc	r25, r5
     c0e:	a6 09       	sbc	r26, r6
     c10:	b7 09       	sbc	r27, r7
     c12:	88 3c       	cpi	r24, 0xC8	; 200
     c14:	91 05       	cpc	r25, r1
     c16:	a1 05       	cpc	r26, r1
     c18:	b1 05       	cpc	r27, r1
			{
				CLEAR(Grip_P);
     c1a:	30 f0       	brcs	.+12     	; 0xc28 <main+0x4e2>
				UnArmed = true;
				UnGrab = false;
				previous_time = millis();	
     c1c:	a0 98       	cbi	0x14, 0	; 20
     c1e:	9b dc       	rcall	.-1738   	; 0x556 <_Z6millisv>
     c20:	2b 01       	movw	r4, r22
     c22:	3c 01       	movw	r6, r24
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
			{
				CLEAR(Grip_P);
				UnArmed = true;
				UnGrab = false;
     c24:	18 86       	std	Y+8, r1	; 0x08
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <main+0x4ec>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	88 87       	std	Y+8, r24	; 0x08
				previous_time = millis();	
			}
			if (UnArmed && (millis()-previous_time) >= 100)
     c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c2e:	99 23       	and	r25, r25
     c30:	b9 f0       	breq	.+46     	; 0xc60 <main+0x51a>
     c32:	91 dc       	rcall	.-1758   	; 0x556 <_Z6millisv>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	84 19       	sub	r24, r4
     c3a:	95 09       	sbc	r25, r5
     c3c:	a6 09       	sbc	r26, r6
     c3e:	b7 09       	sbc	r27, r7
     c40:	84 36       	cpi	r24, 0x64	; 100
     c42:	91 05       	cpc	r25, r1
     c44:	a1 05       	cpc	r26, r1
     c46:	b1 05       	cpc	r27, r1
     c48:	48 f0       	brcs	.+18     	; 0xc5c <main+0x516>
			{
				CLEAR(ShuttleCockArm_P);
     c4a:	a2 98       	cbi	0x14, 2	; 20
				ReceiveShuttleCock = false;
     c4c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <ReceiveShuttleCock>
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
				UnArmed = false;
     c50:	1b 86       	std	Y+11, r1	; 0x0b
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
     c52:	18 86       	std	Y+8, r1	; 0x08
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
     c54:	1e 82       	std	Y+6, r1	; 0x06
			if (UnArmed && (millis()-previous_time) >= 100)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
     c56:	1b 82       	std	Y+3, r1	; 0x03
			}
			if (UnArmed && (millis()-previous_time) >= 100)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
     c58:	1f 82       	std	Y+7, r1	; 0x07
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <main+0x51a>
     c5c:	e1 e0       	ldi	r30, 0x01	; 1
				UnGrab  = false;
				UnArmed = false;
			}
		}
		
		if(abs(E1.Enoder_Get_Angle()) >= 720)
     c5e:	eb 87       	std	Y+11, r30	; 0x0b
     c60:	86 eb       	ldi	r24, 0xB6	; 182
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	9f db       	rcall	.-2242   	; 0x3a4 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
     c66:	99 23       	and	r25, r25
     c68:	1c f4       	brge	.+6      	; 0xc70 <main+0x52a>
     c6a:	91 95       	neg	r25
     c6c:	81 95       	neg	r24
     c6e:	91 09       	sbc	r25, r1
     c70:	80 3d       	cpi	r24, 0xD0	; 208
     c72:	92 40       	sbci	r25, 0x02	; 2
     c74:	dc f0       	brlt	.+54     	; 0xcac <main+0x566>
		{
			G.StopMotor();
     c76:	83 ee       	ldi	r24, 0xE3	; 227
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	cd db       	rcall	.-2150   	; 0x416 <_ZN11GenevaMotor9StopMotorEv>
     c7c:	e6 eb       	ldi	r30, 0xB6	; 182
     c7e:	f2 e0       	ldi	r31, 0x02	; 2
     c80:	11 82       	std	Z+1, r1	; 0x01
     c82:	10 82       	st	Z, r1
     c84:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <Geneva_PID+0x2e>
     c88:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <Geneva_PID+0x2d>
     c8c:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <Geneva_PID+0x21>
			E1.Reset_Count();
			Geneva_PID.SetSetPoint(0);
			Geneva_PID.Iterm = 0;
     c90:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <Geneva_PID+0x22>
     c94:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <Geneva_PID+0x23>
     c98:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <Geneva_PID+0x24>
			Geneva_PID.output = 0;
     c9c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Geneva_PID+0x1d>
     ca0:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <Geneva_PID+0x1e>
     ca4:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <Geneva_PID+0x1f>
		}
/***********************************************************************************************************************************/
		if (run_geneva_in_loop)
     ca8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <Geneva_PID+0x20>
		{
			Run_Geneva();
     cac:	fd 81       	ldd	r31, Y+5	; 0x05
		}
 /****************************************************Golden Rack Section***********************************************************/		
  		if (gotRack)
     cae:	f1 11       	cpse	r31, r1
     cb0:	6b dc       	rcall	.-1834   	; 0x588 <_Z10Run_Genevav>
     cb2:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <gotRack>
  		{
			if (run_geneva_once)
     cb6:	88 23       	and	r24, r24
     cb8:	11 f1       	breq	.+68     	; 0xcfe <main+0x5b8>
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
			{
				Run_Geneva();
     cbc:	22 23       	and	r18, r18
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <main+0x582>
				run_geneva_once = false;
				//run_geneva_in_loop = false;
				previous_time = millis();
     cc0:	63 dc       	rcall	.-1850   	; 0x588 <_Z10Run_Genevav>
     cc2:	49 dc       	rcall	.-1902   	; 0x556 <_Z6millisv>
     cc4:	2b 01       	movw	r4, r22
     cc6:	3c 01       	movw	r6, r24
			}
			
			if (first_Golden && (millis()-previous_time) >= 2000)
     cc8:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <first_Golden>
     ccc:	88 23       	and	r24, r24
     cce:	a1 f0       	breq	.+40     	; 0xcf8 <main+0x5b2>
     cd0:	42 dc       	rcall	.-1916   	; 0x556 <_Z6millisv>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	84 19       	sub	r24, r4
     cd8:	95 09       	sbc	r25, r5
     cda:	a6 09       	sbc	r26, r6
     cdc:	b7 09       	sbc	r27, r7
     cde:	80 3d       	cpi	r24, 0xD0	; 208
     ce0:	97 40       	sbci	r25, 0x07	; 7
     ce2:	a1 05       	cpc	r26, r1
     ce4:	b1 05       	cpc	r27, r1
     ce6:	50 f0       	brcs	.+20     	; 0xcfc <main+0x5b6>
     ce8:	a2 98       	cbi	0x14, 2	; 20
			{
				CLEAR(ShuttleCockArm_P);
     cea:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <first_Golden>
				first_Golden = false;
     cee:	41 e0       	ldi	r20, 0x01	; 1
				run_geneva_once = false;
				Going_To_RUNGBAY = true;
     cf0:	40 93 e5 02 	sts	0x02E5, r20	; 0x8002e5 <Going_To_RUNGBAY>
     cf4:	1c 82       	std	Y+4, r1	; 0x04
			
			if (first_Golden && (millis()-previous_time) >= 2000)
			{
				CLEAR(ShuttleCockArm_P);
				first_Golden = false;
				run_geneva_once = false;
     cf6:	08 c0       	rjmp	.+16     	; 0xd08 <main+0x5c2>
     cf8:	1c 82       	std	Y+4, r1	; 0x04
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <main+0x5b8>
     cfc:	1c 82       	std	Y+4, r1	; 0x04
     cfe:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Going_To_RUNGBAY>
				Going_To_RUNGBAY = true;
				//gotRack = false;
			}
		  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	if (Going_To_RUNGBAY)
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <main+0x5c2>
     d06:	a8 c0       	rjmp	.+336    	; 0xe58 <main+0x712>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !caught && !GOLDEN_1)
     d0a:	81 11       	cpse	r24, r1
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <main+0x5f0>
     d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d10:	91 11       	cpse	r25, r1
     d12:	14 c0       	rjmp	.+40     	; 0xd3c <main+0x5f6>
     d14:	ea 85       	ldd	r30, Y+10	; 0x0a
     d16:	e1 11       	cpse	r30, r1
     d18:	25 c0       	rjmp	.+74     	; 0xd64 <main+0x61e>
     d1a:	f9 85       	ldd	r31, Y+9	; 0x09
     d1c:	f1 11       	cpse	r31, r1
     d1e:	22 c0       	rjmp	.+68     	; 0xd64 <main+0x61e>
     d20:	2d 85       	ldd	r18, Y+13	; 0x0d
     d22:	21 11       	cpse	r18, r1
     d24:	1f c0       	rjmp	.+62     	; 0xd64 <main+0x61e>
     d26:	3e 85       	ldd	r19, Y+14	; 0x0e
     d28:	31 11       	cpse	r19, r1
     d2a:	1c c0       	rjmp	.+56     	; 0xd64 <main+0x61e>
     d2c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <GOLDEN_1>
     d30:	81 11       	cpse	r24, r1
     d32:	18 c0       	rjmp	.+48     	; 0xd64 <main+0x61e>
			//  SET(ShuttleCockArm_P);
			Gripp = true;
			previous_time = millis();
		}
		/*_delay_ms(500);*/
		if (Gripp && (millis()-previous_time) >= 800)
     d34:	e5 c2       	rjmp	.+1482   	; 0x1300 <main+0xbba>
     d36:	4c 85       	ldd	r20, Y+12	; 0x0c
     d38:	44 23       	and	r20, r20
     d3a:	a1 f0       	breq	.+40     	; 0xd64 <main+0x61e>
     d3c:	0c dc       	rcall	.-2024   	; 0x556 <_Z6millisv>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	84 19       	sub	r24, r4
     d44:	95 09       	sbc	r25, r5
     d46:	a6 09       	sbc	r26, r6
     d48:	b7 09       	sbc	r27, r7
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	93 40       	sbci	r25, 0x03	; 3
     d4e:	a1 05       	cpc	r26, r1
     d50:	b1 05       	cpc	r27, r1
		{
			SET(Grip_P);
     d52:	30 f0       	brcs	.+12     	; 0xd60 <main+0x61a>
			armed = true;
			previous_time = millis();
     d54:	a0 9a       	sbi	0x14, 0	; 20
     d56:	ff db       	rcall	.-2050   	; 0x556 <_Z6millisv>
     d58:	2b 01       	movw	r4, r22
			Gripp = false;
     d5a:	3c 01       	movw	r6, r24
     d5c:	1c 86       	std	Y+12, r1	; 0x0c
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <main+0x624>
     d60:	f1 e0       	ldi	r31, 0x01	; 1
		}
		
		/*_delay_ms(100);*/
		
		if (armed && (millis()-previous_time) >= 150)
     d62:	fc 87       	std	Y+12, r31	; 0x0c
     d64:	2a 85       	ldd	r18, Y+10	; 0x0a
     d66:	22 23       	and	r18, r18
     d68:	a1 f0       	breq	.+40     	; 0xd92 <main+0x64c>
     d6a:	f5 db       	rcall	.-2070   	; 0x556 <_Z6millisv>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	84 19       	sub	r24, r4
     d72:	95 09       	sbc	r25, r5
     d74:	a6 09       	sbc	r26, r6
     d76:	b7 09       	sbc	r27, r7
     d78:	86 39       	cpi	r24, 0x96	; 150
     d7a:	91 05       	cpc	r25, r1
     d7c:	a1 05       	cpc	r26, r1
		{
			SET(ShuttleCockArm_P);
     d7e:	b1 05       	cpc	r27, r1
			geneva_start = true;
			previous_time = millis();
     d80:	30 f0       	brcs	.+12     	; 0xd8e <main+0x648>
     d82:	a2 9a       	sbi	0x14, 2	; 20
     d84:	e8 db       	rcall	.-2096   	; 0x556 <_Z6millisv>
     d86:	2b 01       	movw	r4, r22
			armed = false;
     d88:	3c 01       	movw	r6, r24
     d8a:	1a 86       	std	Y+10, r1	; 0x0a
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <main+0x652>
     d8e:	31 e0       	ldi	r19, 0x01	; 1
		}
		
		if (geneva_start && (millis()-previous_time) >= 50)
     d90:	3a 87       	std	Y+10, r19	; 0x0a
     d92:	4a 81       	ldd	r20, Y+2	; 0x02
     d94:	44 23       	and	r20, r20
     d96:	99 f0       	breq	.+38     	; 0xdbe <main+0x678>
     d98:	de db       	rcall	.-2116   	; 0x556 <_Z6millisv>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	84 19       	sub	r24, r4
     da0:	95 09       	sbc	r25, r5
     da2:	a6 09       	sbc	r26, r6
     da4:	b7 09       	sbc	r27, r7
     da6:	c2 97       	sbiw	r24, 0x32	; 50
     da8:	a1 05       	cpc	r26, r1
     daa:	b1 05       	cpc	r27, r1
		{
			Run_Geneva();
     dac:	30 f0       	brcs	.+12     	; 0xdba <main+0x674>
     dae:	ec db       	rcall	.-2088   	; 0x588 <_Z10Run_Genevav>
			caught = true;
			previous_time = millis();
     db0:	d2 db       	rcall	.-2140   	; 0x556 <_Z6millisv>
     db2:	2b 01       	movw	r4, r22
     db4:	3c 01       	movw	r6, r24
			geneva_start = false;
     db6:	1a 82       	std	Y+2, r1	; 0x02
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <main+0x67e>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (caught && (millis()-previous_time) >= 800)
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	99 23       	and	r25, r25
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <main+0x6ae>
     dc4:	c8 db       	rcall	.-2160   	; 0x556 <_Z6millisv>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	84 19       	sub	r24, r4
     dcc:	95 09       	sbc	r25, r5
     dce:	a6 09       	sbc	r26, r6
     dd0:	b7 09       	sbc	r27, r7
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	93 40       	sbci	r25, 0x03	; 3
     dd6:	a1 05       	cpc	r26, r1
     dd8:	b1 05       	cpc	r27, r1
		{
			SET(Pneumatic);
     dda:	50 f0       	brcs	.+20     	; 0xdf0 <main+0x6aa>
     ddc:	eb e0       	ldi	r30, 0x0B	; 11
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	80 81       	ld	r24, Z
     de2:	81 60       	ori	r24, 0x01	; 1
			ungripp = true;
			previous_time = millis();
     de4:	80 83       	st	Z, r24
     de6:	b7 db       	rcall	.-2194   	; 0x556 <_Z6millisv>
     de8:	2b 01       	movw	r4, r22
     dea:	3c 01       	movw	r6, r24
			caught = false;
     dec:	1e 86       	std	Y+14, r1	; 0x0e
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <main+0x6b4>
     df0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if(ungripp && (millis()-previous_time) >= 150)
     df2:	fe 87       	std	Y+14, r31	; 0x0e
     df4:	2d 85       	ldd	r18, Y+13	; 0x0d
     df6:	22 23       	and	r18, r18
     df8:	a1 f0       	breq	.+40     	; 0xe22 <main+0x6dc>
     dfa:	ad db       	rcall	.-2214   	; 0x556 <_Z6millisv>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	84 19       	sub	r24, r4
     e02:	95 09       	sbc	r25, r5
     e04:	a6 09       	sbc	r26, r6
     e06:	b7 09       	sbc	r27, r7
     e08:	86 39       	cpi	r24, 0x96	; 150
     e0a:	91 05       	cpc	r25, r1
     e0c:	a1 05       	cpc	r26, r1
     e0e:	b1 05       	cpc	r27, r1
     e10:	30 f0       	brcs	.+12     	; 0xe1e <main+0x6d8>
		{
			CLEAR(Grip_P);
     e12:	a0 98       	cbi	0x14, 0	; 20
			unarmed = true;
			ungripp = false;
			previous_time = millis();
     e14:	a0 db       	rcall	.-2240   	; 0x556 <_Z6millisv>
     e16:	2b 01       	movw	r4, r22
     e18:	3c 01       	movw	r6, r24
     e1a:	1d 86       	std	Y+13, r1	; 0x0d
		}
		if(ungripp && (millis()-previous_time) >= 150)
		{
			CLEAR(Grip_P);
			unarmed = true;
			ungripp = false;
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <main+0x6e2>
     e1e:	31 e0       	ldi	r19, 0x01	; 1
     e20:	3d 87       	std	Y+13, r19	; 0x0d
     e22:	49 85       	ldd	r20, Y+9	; 0x09
			previous_time = millis();
		}
		if (unarmed && (millis()-previous_time) >= 300)
     e24:	44 23       	and	r20, r20
     e26:	c1 f0       	breq	.+48     	; 0xe58 <main+0x712>
     e28:	96 db       	rcall	.-2260   	; 0x556 <_Z6millisv>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	84 19       	sub	r24, r4
     e30:	95 09       	sbc	r25, r5
     e32:	a6 09       	sbc	r26, r6
     e34:	b7 09       	sbc	r27, r7
     e36:	8c 32       	cpi	r24, 0x2C	; 44
     e38:	91 40       	sbci	r25, 0x01	; 1
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	50 f0       	brcs	.+20     	; 0xe54 <main+0x70e>
     e40:	a2 98       	cbi	0x14, 2	; 20
		{
			CLEAR(ShuttleCockArm_P);
     e42:	f1 e0       	ldi	r31, 0x01	; 1
			unarmed = false;
			GOLDEN_1 = true;
     e44:	f0 93 eb 02 	sts	0x02EB, r31	; 0x8002eb <GOLDEN_1>
     e48:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <gotRack>
			gotRack  = false;
     e4c:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <Going_To_RUNGBAY>
			previous_time = millis();
		}
		if (unarmed && (millis()-previous_time) >= 300)
		{
			CLEAR(ShuttleCockArm_P);
			unarmed = false;
     e50:	19 86       	std	Y+9, r1	; 0x09
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <main+0x712>
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	29 87       	std	Y+9, r18	; 0x09
			Going_To_RUNGBAY = false;
		}
		
	}
		  
		  if (Golden_Rack )
     e58:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Golden_Rack>
     e5c:	88 23       	and	r24, r24
     e5e:	09 f4       	brne	.+2      	; 0xe62 <main+0x71c>
     e60:	ee c0       	rjmp	.+476    	; 0x103e <main+0x8f8>
  		{
  			if ((GoldenShuttle_count < 5))
     e62:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <GoldenShuttle_count>
     e66:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <GoldenShuttle_count+0x1>
     e6a:	05 97       	sbiw	r24, 0x05	; 5
     e6c:	0c f0       	brlt	.+2      	; 0xe70 <main+0x72a>
     e6e:	e7 c0       	rjmp	.+462    	; 0x103e <main+0x8f8>
  			{
				if (GOLDEN_1)
     e70:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <GOLDEN_1>
     e74:	88 23       	and	r24, r24
     e76:	71 f0       	breq	.+28     	; 0xe94 <main+0x74e>
				{
					uart3_putc('p');
     e78:	80 e7       	ldi	r24, 0x70	; 112
     e7a:	03 d7       	rcall	.+3590   	; 0x1c82 <_Z10uart3_putch>
     e7c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <GoldenShuttle_count>
					GoldenShuttle_count++;
     e80:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <GoldenShuttle_count+0x1>
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <GoldenShuttle_count+0x1>
     e8a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <GoldenShuttle_count>
     e8e:	2f dc       	rcall	.-1954   	; 0x6ee <_Z12FlyingDragonv>
					FlyingDragon();
     e90:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <GOLDEN_1>
					GOLDEN_1 = false;
     e94:	37 e3       	ldi	r19, 0x37	; 55
     e96:	49 81       	ldd	r20, Y+1	; 0x01
				}
				  
  				if ((Speed == dir*55) && (ReachedHome))
     e98:	43 03       	mulsu	r20, r19
     e9a:	c0 01       	movw	r24, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Speed>
     ea2:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <Speed+0x1>
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	09 f0       	breq	.+2      	; 0xeae <main+0x768>
     eac:	c8 c0       	rjmp	.+400    	; 0x103e <main+0x8f8>
     eae:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ReachedHome>
     eb2:	81 11       	cpse	r24, r1
     eb4:	38 c2       	rjmp	.+1136   	; 0x1326 <main+0xbe0>
     eb6:	c3 c0       	rjmp	.+390    	; 0x103e <main+0x8f8>
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     eb8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eba:	81 11       	cpse	r24, r1
     ebc:	17 c0       	rjmp	.+46     	; 0xeec <main+0x7a6>
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	91 11       	cpse	r25, r1
     ec2:	28 c0       	rjmp	.+80     	; 0xf14 <main+0x7ce>
     ec4:	e9 85       	ldd	r30, Y+9	; 0x09
     ec6:	e1 11       	cpse	r30, r1
     ec8:	25 c0       	rjmp	.+74     	; 0xf14 <main+0x7ce>
     eca:	fd 85       	ldd	r31, Y+13	; 0x0d
     ecc:	f1 11       	cpse	r31, r1
     ece:	22 c0       	rjmp	.+68     	; 0xf14 <main+0x7ce>
     ed0:	2f 85       	ldd	r18, Y+15	; 0x0f
     ed2:	21 11       	cpse	r18, r1
     ed4:	1f c0       	rjmp	.+62     	; 0xf14 <main+0x7ce>
     ed6:	3e 85       	ldd	r19, Y+14	; 0x0e
					 {
						//SET(ShuttleCockArm_P);
 						Gripp = true;
						previous_time = millis();
     ed8:	31 11       	cpse	r19, r1
     eda:	1c c0       	rjmp	.+56     	; 0xf14 <main+0x7ce>
     edc:	3c db       	rcall	.-2440   	; 0x556 <_Z6millisv>
     ede:	2b 01       	movw	r4, r22
     ee0:	3c 01       	movw	r6, r24
					}
  					/*_delay_ms(500);*/
					if (Gripp && (millis()-previous_time) >= 200)
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <main+0x7a6>
     ee4:	4c 85       	ldd	r20, Y+12	; 0x0c
     ee6:	44 23       	and	r20, r20
     ee8:	09 f4       	brne	.+2      	; 0xeec <main+0x7a6>
     eea:	d2 c2       	rjmp	.+1444   	; 0x1490 <main+0xd4a>
     eec:	34 db       	rcall	.-2456   	; 0x556 <_Z6millisv>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	84 19       	sub	r24, r4
     ef4:	95 09       	sbc	r25, r5
     ef6:	a6 09       	sbc	r26, r6
     ef8:	b7 09       	sbc	r27, r7
     efa:	88 3c       	cpi	r24, 0xC8	; 200
     efc:	91 05       	cpc	r25, r1
     efe:	a1 05       	cpc	r26, r1
					{
						SET(Grip_P);
     f00:	b1 05       	cpc	r27, r1
						 armed = true;
						 previous_time = millis(); 
     f02:	30 f0       	brcs	.+12     	; 0xf10 <main+0x7ca>
     f04:	a0 9a       	sbi	0x14, 0	; 20
     f06:	27 db       	rcall	.-2482   	; 0x556 <_Z6millisv>
     f08:	2b 01       	movw	r4, r22
						 Gripp = false;
     f0a:	3c 01       	movw	r6, r24
     f0c:	1c 86       	std	Y+12, r1	; 0x0c
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <main+0x7d4>
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	8c 87       	std	Y+12, r24	; 0x0c
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	99 23       	and	r25, r25
     f18:	a1 f0       	breq	.+40     	; 0xf42 <main+0x7fc>
     f1a:	1d db       	rcall	.-2502   	; 0x556 <_Z6millisv>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	84 19       	sub	r24, r4
     f22:	95 09       	sbc	r25, r5
     f24:	a6 09       	sbc	r26, r6
     f26:	b7 09       	sbc	r27, r7
     f28:	86 39       	cpi	r24, 0x96	; 150
     f2a:	91 05       	cpc	r25, r1
					{
						SET(ShuttleCockArm_P);
     f2c:	a1 05       	cpc	r26, r1
						geneva_start = true;
						previous_time = millis();
     f2e:	b1 05       	cpc	r27, r1
     f30:	30 f0       	brcs	.+12     	; 0xf3e <main+0x7f8>
     f32:	a2 9a       	sbi	0x14, 2	; 20
     f34:	10 db       	rcall	.-2528   	; 0x556 <_Z6millisv>
						armed = false;
     f36:	2b 01       	movw	r4, r22
     f38:	3c 01       	movw	r6, r24
     f3a:	1a 86       	std	Y+10, r1	; 0x0a
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <main+0x802>
					}
					
					if (geneva_start && (millis()-previous_time) >= 50)
     f3e:	e1 e0       	ldi	r30, 0x01	; 1
     f40:	ea 87       	std	Y+10, r30	; 0x0a
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	ff 23       	and	r31, r31
     f46:	99 f0       	breq	.+38     	; 0xf6e <main+0x828>
     f48:	06 db       	rcall	.-2548   	; 0x556 <_Z6millisv>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	84 19       	sub	r24, r4
     f50:	95 09       	sbc	r25, r5
     f52:	a6 09       	sbc	r26, r6
     f54:	b7 09       	sbc	r27, r7
     f56:	c2 97       	sbiw	r24, 0x32	; 50
					{
						 Run_Geneva();
     f58:	a1 05       	cpc	r26, r1
     f5a:	b1 05       	cpc	r27, r1
						 caught = true;
						 previous_time = millis();
     f5c:	30 f0       	brcs	.+12     	; 0xf6a <main+0x824>
     f5e:	14 db       	rcall	.-2520   	; 0x588 <_Z10Run_Genevav>
     f60:	fa da       	rcall	.-2572   	; 0x556 <_Z6millisv>
     f62:	2b 01       	movw	r4, r22
						 geneva_start = false;
     f64:	3c 01       	movw	r6, r24
     f66:	1a 82       	std	Y+2, r1	; 0x02
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <main+0x82e>
     f6a:	21 e0       	ldi	r18, 0x01	; 1
					}
					if (caught && (millis()-previous_time) >= 800)
     f6c:	2a 83       	std	Y+2, r18	; 0x02
     f6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f70:	33 23       	and	r19, r19
     f72:	c1 f0       	breq	.+48     	; 0xfa4 <main+0x85e>
     f74:	f0 da       	rcall	.-2592   	; 0x556 <_Z6millisv>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	84 19       	sub	r24, r4
     f7c:	95 09       	sbc	r25, r5
     f7e:	a6 09       	sbc	r26, r6
     f80:	b7 09       	sbc	r27, r7
     f82:	80 32       	cpi	r24, 0x20	; 32
     f84:	93 40       	sbci	r25, 0x03	; 3
     f86:	a1 05       	cpc	r26, r1
					{
						SET(Pneumatic);
     f88:	b1 05       	cpc	r27, r1
     f8a:	50 f0       	brcs	.+20     	; 0xfa0 <main+0x85a>
     f8c:	eb e0       	ldi	r30, 0x0B	; 11
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	80 81       	ld	r24, Z
						ungripp = true;
						previous_time = millis();
     f92:	81 60       	ori	r24, 0x01	; 1
     f94:	80 83       	st	Z, r24
     f96:	df da       	rcall	.-2626   	; 0x556 <_Z6millisv>
						caught = false;
     f98:	2b 01       	movw	r4, r22
     f9a:	3c 01       	movw	r6, r24
     f9c:	1e 86       	std	Y+14, r1	; 0x0e
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <main+0x864>
					}
					if(ungripp && (millis()-previous_time) >= 150)
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	fe 87       	std	Y+14, r31	; 0x0e
     fa4:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa6:	22 23       	and	r18, r18
     fa8:	a1 f0       	breq	.+40     	; 0xfd2 <main+0x88c>
     faa:	d5 da       	rcall	.-2646   	; 0x556 <_Z6millisv>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	84 19       	sub	r24, r4
     fb2:	95 09       	sbc	r25, r5
     fb4:	a6 09       	sbc	r26, r6
     fb6:	b7 09       	sbc	r27, r7
     fb8:	86 39       	cpi	r24, 0x96	; 150
     fba:	91 05       	cpc	r25, r1
     fbc:	a1 05       	cpc	r26, r1
					{
						CLEAR(Grip_P);
     fbe:	b1 05       	cpc	r27, r1
						unarmed = true;
						ungripp = false;
						previous_time = millis();
     fc0:	30 f0       	brcs	.+12     	; 0xfce <main+0x888>
     fc2:	a0 98       	cbi	0x14, 0	; 20
     fc4:	c8 da       	rcall	.-2672   	; 0x556 <_Z6millisv>
					}
					if(ungripp && (millis()-previous_time) >= 150)
					{
						CLEAR(Grip_P);
						unarmed = true;
						ungripp = false;
     fc6:	2b 01       	movw	r4, r22
     fc8:	3c 01       	movw	r6, r24
     fca:	1d 86       	std	Y+13, r1	; 0x0d
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <main+0x892>
						previous_time = millis();
					}
					if (unarmed && (millis()-previous_time) >= 500)
     fce:	31 e0       	ldi	r19, 0x01	; 1
     fd0:	3d 87       	std	Y+13, r19	; 0x0d
     fd2:	49 85       	ldd	r20, Y+9	; 0x09
     fd4:	44 23       	and	r20, r20
     fd6:	a1 f0       	breq	.+40     	; 0x1000 <main+0x8ba>
     fd8:	be da       	rcall	.-2692   	; 0x556 <_Z6millisv>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	84 19       	sub	r24, r4
     fe0:	95 09       	sbc	r25, r5
     fe2:	a6 09       	sbc	r26, r6
     fe4:	b7 09       	sbc	r27, r7
     fe6:	84 3f       	cpi	r24, 0xF4	; 244
     fe8:	91 40       	sbci	r25, 0x01	; 1
     fea:	a1 05       	cpc	r26, r1
					{
						CLEAR(ShuttleCockArm_P);
     fec:	b1 05       	cpc	r27, r1
						throwGolden = true;
						unarmed = false;
						previous_time = millis();
     fee:	30 f0       	brcs	.+12     	; 0xffc <main+0x8b6>
     ff0:	a2 98       	cbi	0x14, 2	; 20
     ff2:	b1 da       	rcall	.-2718   	; 0x556 <_Z6millisv>
     ff4:	2b 01       	movw	r4, r22
					}
					if (unarmed && (millis()-previous_time) >= 500)
					{
						CLEAR(ShuttleCockArm_P);
						throwGolden = true;
						unarmed = false;
     ff6:	3c 01       	movw	r6, r24
     ff8:	19 86       	std	Y+9, r1	; 0x09
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <main+0x8c0>
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
						previous_time = millis();
					}
						 
					if (throwGolden && (millis()-previous_time) >= 1000)
     ffe:	f9 87       	std	Y+9, r31	; 0x09
    1000:	2f 85       	ldd	r18, Y+15	; 0x0f
    1002:	22 23       	and	r18, r18
    1004:	e1 f0       	breq	.+56     	; 0x103e <main+0x8f8>
    1006:	a7 da       	rcall	.-2738   	; 0x556 <_Z6millisv>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	84 19       	sub	r24, r4
    100e:	95 09       	sbc	r25, r5
    1010:	a6 09       	sbc	r26, r6
    1012:	b7 09       	sbc	r27, r7
    1014:	88 3e       	cpi	r24, 0xE8	; 232
    1016:	93 40       	sbci	r25, 0x03	; 3
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	70 f0       	brcs	.+28     	; 0x103a <main+0x8f4>
					{
						uart3_putc('p');
    101e:	80 e7       	ldi	r24, 0x70	; 112
    1020:	30 d6       	rcall	.+3168   	; 0x1c82 <_Z10uart3_putch>
    1022:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <GoldenShuttle_count>
						GoldenShuttle_count++;
    1026:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <GoldenShuttle_count+0x1>
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <GoldenShuttle_count+0x1>
    1030:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <GoldenShuttle_count>
    1034:	5c db       	rcall	.-2376   	; 0x6ee <_Z12FlyingDragonv>
						FlyingDragon();
    1036:	1f 86       	std	Y+15, r1	; 0x0f
    1038:	02 c0       	rjmp	.+4      	; 0x103e <main+0x8f8>
						throwGolden = false;
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	4f 87       	std	Y+15, r20	; 0x0f
    103e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <Ramp_up_flag>

/***********************************************************************************************************************************/
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <main+0x902>
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <main+0x988>
    1048:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TCRTRevolutionCount>
    104c:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TCRTRevolutionCount+0x1>
    1050:	05 97       	sbiw	r24, 0x05	; 5
    1052:	0c f4       	brge	.+2      	; 0x1056 <main+0x910>
    1054:	6c c1       	rjmp	.+728    	; 0x132e <main+0xbe8>
    1056:	25 c2       	rjmp	.+1098   	; 0x14a2 <main+0xd5c>
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	8e 2f       	mov	r24, r30
		{
			if ( abs(E.ExtraCount - previous_data) >= 60)
			{
					Speed = Speed + (dir*RAMP_STEP);
    105c:	ee 0f       	add	r30, r30
    105e:	99 0b       	sbc	r25, r25
    1060:	9c 01       	movw	r18, r24
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Speed>
    106e:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <Speed+0x1>
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
    107a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
    107e:	1a 01       	movw	r2, r20
    1080:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <Speed>
					previous_data = E.ExtraCount;
			}
			
			Speed_PID.SetSetPoint(Speed);
    1084:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <Speed+0x1>
    1088:	f5 01       	movw	r30, r10
    108a:	56 a7       	std	Z+46, r21	; 0x2e
    108c:	45 a7       	std	Z+45, r20	; 0x2d
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <PIDFlag>
			PIDFlag = true;
    1094:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <motor_speed>
				if (abs(Speed) >= abs(motor_speed))
    1098:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <motor_speed+0x1>
    109c:	9a 01       	movw	r18, r20
    109e:	55 23       	and	r21, r21
    10a0:	24 f4       	brge	.+8      	; 0x10aa <main+0x964>
    10a2:	22 27       	eor	r18, r18
    10a4:	33 27       	eor	r19, r19
    10a6:	24 1b       	sub	r18, r20
    10a8:	35 0b       	sbc	r19, r21
    10aa:	ac 01       	movw	r20, r24
    10ac:	99 23       	and	r25, r25
    10ae:	24 f4       	brge	.+8      	; 0x10b8 <main+0x972>
    10b0:	44 27       	eor	r20, r20
    10b2:	55 27       	eor	r21, r21
    10b4:	48 1b       	sub	r20, r24
    10b6:	59 0b       	sbc	r21, r25
    10b8:	24 17       	cp	r18, r20
    10ba:	35 07       	cpc	r19, r21
    10bc:	0c f4       	brge	.+2      	; 0x10c0 <main+0x97a>
    10be:	ec c1       	rjmp	.+984    	; 0x1498 <main+0xd52>
    10c0:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
				{
					Speed = motor_speed;
    10c4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
    10c8:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Ramp_up_flag>
					Ramp_up_flag = false;
    10cc:	e5 c1       	rjmp	.+970    	; 0x1498 <main+0xd52>
    10ce:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Negative_Ramp>
				}
		}
			
/**************************************************Negative Ramp***********************************************************/

if (Negative_Ramp && TCRTRevolutionCount < 5)
    10d2:	88 23       	and	r24, r24
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <main+0x992>
    10d6:	41 c0       	rjmp	.+130    	; 0x115a <main+0xa14>
    10d8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TCRTRevolutionCount>
    10dc:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TCRTRevolutionCount+0x1>
    10e0:	05 97       	sbiw	r24, 0x05	; 5
    10e2:	dc f5       	brge	.+118    	; 0x115a <main+0xa14>
    10e4:	37 c1       	rjmp	.+622    	; 0x1354 <main+0xc0e>
    10e6:	29 81       	ldd	r18, Y+1	; 0x01
    10e8:	82 2f       	mov	r24, r18
{
	if ( abs(E.ExtraCount - previous_data) >= 40)
	{
		Speed = Speed - (dir*RAMP_STEP);
    10ea:	22 0f       	add	r18, r18
    10ec:	99 0b       	sbc	r25, r25
    10ee:	9c 01       	movw	r18, r24
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Speed>
    10fc:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <Speed+0x1>
    1100:	f9 01       	movw	r30, r18
    1102:	e8 1b       	sub	r30, r24
    1104:	f9 0b       	sbc	r31, r25
    1106:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <Speed+0x1>
    110a:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <Speed>
    110e:	1a 01       	movw	r2, r20
    1110:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <Speed>
		previous_data = E.ExtraCount;
	}
	
	Speed_PID.SetSetPoint(Speed);
    1114:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <Speed+0x1>
    1118:	f5 01       	movw	r30, r10
    111a:	56 a7       	std	Z+46, r21	; 0x2e
    111c:	45 a7       	std	Z+45, r20	; 0x2d
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <PIDFlag>
	PIDFlag = true;
    1124:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <motor_speed>
	if (abs(Speed) <= abs(motor_speed))
    1128:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <motor_speed+0x1>
    112c:	9a 01       	movw	r18, r20
    112e:	55 23       	and	r21, r21
    1130:	24 f4       	brge	.+8      	; 0x113a <main+0x9f4>
    1132:	22 27       	eor	r18, r18
    1134:	33 27       	eor	r19, r19
    1136:	24 1b       	sub	r18, r20
    1138:	35 0b       	sbc	r19, r21
    113a:	ac 01       	movw	r20, r24
    113c:	99 23       	and	r25, r25
    113e:	24 f4       	brge	.+8      	; 0x1148 <main+0xa02>
    1140:	44 27       	eor	r20, r20
    1142:	55 27       	eor	r21, r21
    1144:	48 1b       	sub	r20, r24
    1146:	59 0b       	sbc	r21, r25
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	34 f0       	brlt	.+12     	; 0x115a <main+0xa14>
    114e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
	{
		Speed = motor_speed;
    1152:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
    1156:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <Negative_Ramp>
		Negative_Ramp = false;
    115a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Throwflag>
// uart0_putc(' ');
// uart0_putint(motor_speed);
// uart0_puts("\r\n");
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 8 )
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <main+0xa1e>
    1162:	51 c0       	rjmp	.+162    	; 0x1206 <main+0xac0>
    1164:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TCRTRevolutionCount>
    1168:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TCRTRevolutionCount+0x1>
    116c:	08 97       	sbiw	r24, 0x08	; 8
    116e:	0c f0       	brlt	.+2      	; 0x1172 <main+0xa2c>
    1170:	04 c1       	rjmp	.+520    	; 0x137a <main+0xc34>
    1172:	49 c0       	rjmp	.+146    	; 0x1206 <main+0xac0>
    1174:	29 81       	ldd	r18, Y+1	; 0x01
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
			{
				Speed = Speed - (dir*RAMP_STEP);
    1176:	82 2f       	mov	r24, r18
    1178:	22 0f       	add	r18, r18
    117a:	99 0b       	sbc	r25, r25
    117c:	9c 01       	movw	r18, r24
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Speed>
    118a:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <Speed+0x1>
    118e:	f9 01       	movw	r30, r18
    1190:	e8 1b       	sub	r30, r24
    1192:	f9 0b       	sbc	r31, r25
    1194:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <Speed+0x1>
    1198:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <Speed>
    119c:	1a 01       	movw	r2, r20
				previous_data = E.ExtraCount;
    119e:	84 c1       	rjmp	.+776    	; 0x14a8 <main+0xd62>
    11a0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <TZ1>
			}
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
			
			if ((TCRTRevolutionCount >= 8) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
    11a4:	81 11       	cpse	r24, r1
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <main+0xa6a>
    11a8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <TZ2>
    11ac:	88 23       	and	r24, r24
    11ae:	29 f0       	breq	.+10     	; 0x11ba <main+0xa74>
    11b0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <TZ3>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <main+0xa74>
    11b8:	f3 c0       	rjmp	.+486    	; 0x13a0 <main+0xc5a>
    11ba:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Speed>
			{
				uart3_putc('g');
				ACKSentFlag = false;
			}
			
			if ((dir*Speed) <= 8)
    11be:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <Speed+0x1>
    11c2:	49 81       	ldd	r20, Y+1	; 0x01
    11c4:	42 03       	mulsu	r20, r18
    11c6:	c0 01       	movw	r24, r0
    11c8:	43 9f       	mul	r20, r19
    11ca:	90 0d       	add	r25, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	09 97       	sbiw	r24, 0x09	; 9
    11d0:	d4 f4       	brge	.+52     	; 0x1206 <main+0xac0>
    11d2:	84 e6       	ldi	r24, 0x64	; 100
			{
				uart3_putc('d');
    11d4:	56 d5       	rcall	.+2732   	; 0x1c82 <_Z10uart3_putch>
    11d6:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Goflag>
				Goflag = false;
    11da:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <Throwflag>
				Throwflag = false;
    11de:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <Speed+0x1>
				Speed = 0 ;
    11e2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Speed>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <Home>
				Home  = true;
    11ec:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TCRTRevolutionCount+0x1>
				TCRTRevolutionCount = 0;
    11f0:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TCRTRevolutionCount>
    11f4:	f4 01       	movw	r30, r8
    11f6:	12 8e       	std	Z+26, r1	; 0x1a
				previous_data = 0;
				E.ExtraCount = 0;
    11f8:	13 8e       	std	Z+27, r1	; 0x1b
    11fa:	14 8e       	std	Z+28, r1	; 0x1c
    11fc:	15 8e       	std	Z+29, r1	; 0x1d
    11fe:	46 98       	cbi	0x08, 6	; 8
    1200:	40 98       	cbi	0x08, 0	; 8
// 				TZ1 = false;
// 				TZ2 = false;
// 				TZ3 = false;
				CLEAR(Plick_Plick);
    1202:	21 2c       	mov	r2, r1
				CLEAR(Plick_Plick_2);
    1204:	31 2c       	mov	r3, r1
				Goflag = false;
				Throwflag = false;
				Speed = 0 ;
				Home  = true;
				TCRTRevolutionCount = 0;
				previous_data = 0;
    1206:	f5 01       	movw	r30, r10
    1208:	80 81       	ld	r24, Z
		
		
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
    120a:	88 23       	and	r24, r24
    120c:	21 f0       	breq	.+8      	; 0x1216 <main+0xad0>
    120e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PIDFlag>
    1212:	81 11       	cpse	r24, r1
    1214:	ca c0       	rjmp	.+404    	; 0x13aa <main+0xc64>
    1216:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Angle_PID>
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
			Speed_PID.PID_Flag = false;
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
    121a:	88 23       	and	r24, r24
    121c:	f9 f0       	breq	.+62     	; 0x125c <main+0xb16>
    121e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PIDFlag>
    1222:	81 11       	cpse	r24, r1
    1224:	1b c0       	rjmp	.+54     	; 0x125c <main+0xb16>
    1226:	d4 c0       	rjmp	.+424    	; 0x13d0 <main+0xc8a>
    1228:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <check_timesHome>
			check_homeBuffer[0] = abs(E.Count);
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
			
			if((add == 0)){
				check_timesHome += 1;
    122c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <check_timesHome+0x1>
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <check_timesHome+0x1>
    1236:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <check_timesHome>
    123a:	c3 97       	sbiw	r24, 0x33	; 51
    123c:	34 f4       	brge	.+12     	; 0x124a <main+0xb04>
			}
			else{
				check_timesHome = 0;
			}
			
			if(check_timesHome > 50){
    123e:	0c c0       	rjmp	.+24     	; 0x1258 <main+0xb12>
    1240:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <check_timesHome+0x1>
			
			if((add == 0)){
				check_timesHome += 1;
			}
			else{
				check_timesHome = 0;
    1244:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <check_timesHome>
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <main+0xb12>
    124a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <check_timesHome+0x1>
			}
			
			if(check_timesHome > 50){
				check_timesHome = 0;
    124e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <check_timesHome>
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <ReachedHome>
				ReachedHome = true;
    1258:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <Angle_PID>
			}
			
			Angle_PID.PID_Flag = false;
    125c:	e9 e2       	ldi	r30, 0x29	; 41
    125e:	f2 e0       	ldi	r31, 0x02	; 2
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
    1260:	80 81       	ld	r24, Z
    1262:	88 23       	and	r24, r24
    1264:	21 f0       	breq	.+8      	; 0x126e <main+0xb28>
    1266:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <G_PID>
    126a:	81 11       	cpse	r24, r1
    126c:	f4 c0       	rjmp	.+488    	; 0x1456 <main+0xd10>
    126e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Throwflag>
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
			Geneva_PID.PID_Flag = false;
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
    1272:	81 11       	cpse	r24, r1
    1274:	4e cb       	rjmp	.-2404   	; 0x912 <main+0x1cc>
    1276:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <Home>
    127a:	81 11       	cpse	r24, r1
    127c:	03 c1       	rjmp	.+518    	; 0x1484 <main+0xd3e>
    127e:	49 cb       	rjmp	.-2414   	; 0x912 <main+0x1cc>
    1280:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <TZ2>
		{
			GoToHome();
			if (TZ1||TZ2)
    1284:	88 23       	and	r24, r24
    1286:	91 f0       	breq	.+36     	; 0x12ac <main+0xb66>
    1288:	2e e1       	ldi	r18, 0x1E	; 30
			{
				Speed = dir*30;
    128a:	39 81       	ldd	r19, Y+1	; 0x01
    128c:	32 03       	mulsu	r19, r18
    128e:	c0 01       	movw	r24, r0
    1290:	11 24       	eor	r1, r1
    1292:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
    1296:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
				Home = false;
    129a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <Home>
				TZ1 = false;
    129e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TZ1>
				TZ2 = false;
    12a2:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TZ2>
				TZ3 = false;
    12a6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <TZ3>
			}
			else if (TZ3)
    12aa:	33 cb       	rjmp	.-2458   	; 0x912 <main+0x1cc>
    12ac:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <TZ3>
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <main+0xb70>
			{
				Speed = dir*55;
    12b4:	2e cb       	rjmp	.-2468   	; 0x912 <main+0x1cc>
    12b6:	47 e3       	ldi	r20, 0x37	; 55
    12b8:	29 81       	ldd	r18, Y+1	; 0x01
    12ba:	24 03       	mulsu	r18, r20
    12bc:	c0 01       	movw	r24, r0
    12be:	11 24       	eor	r1, r1
    12c0:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Speed+0x1>
    12c4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Speed>
				Home  = false;
    12c8:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <Home>
				TZ1 = false;
    12cc:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TZ1>
				TZ2 = false;
    12d0:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TZ2>
				TZ3 = false;
    12d4:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <TZ3>
			{
				CLEAR(ShuttleCockArm_P);
				Grabbed = true;
				previous_time = millis();
			}
			if (Grabbed && (millis()-previous_time) >= 800)
    12d8:	1c cb       	rjmp	.-2504   	; 0x912 <main+0x1cc>
    12da:	3d d9       	rcall	.-3462   	; 0x556 <_Z6millisv>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	84 19       	sub	r24, r4
    12e2:	95 09       	sbc	r25, r5
    12e4:	a6 09       	sbc	r26, r6
    12e6:	b7 09       	sbc	r27, r7
    12e8:	80 32       	cpi	r24, 0x20	; 32
    12ea:	93 40       	sbci	r25, 0x03	; 3
    12ec:	a1 05       	cpc	r26, r1
    12ee:	b1 05       	cpc	r27, r1
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <main+0xbae>
    12f2:	3f cc       	rjmp	.-1922   	; 0xb72 <main+0x42c>
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	4f 83       	std	Y+7, r20	; 0x07
    12f8:	48 cc       	rjmp	.-1904   	; 0xb8a <main+0x444>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	61 cc       	rjmp	.-1854   	; 0xbc2 <main+0x47c>
	{
		if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !caught && !GOLDEN_1)
		{
			//  SET(ShuttleCockArm_P);
			Gripp = true;
			previous_time = millis();
    1300:	2a d9       	rcall	.-3500   	; 0x556 <_Z6millisv>
    1302:	2b 01       	movw	r4, r22
    1304:	3c 01       	movw	r6, r24
    1306:	27 d9       	rcall	.-3506   	; 0x556 <_Z6millisv>
		}
		/*_delay_ms(500);*/
		if (Gripp && (millis()-previous_time) >= 800)
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	84 19       	sub	r24, r4
    130e:	95 09       	sbc	r25, r5
    1310:	a6 09       	sbc	r26, r6
    1312:	b7 09       	sbc	r27, r7
    1314:	80 32       	cpi	r24, 0x20	; 32
    1316:	93 40       	sbci	r25, 0x03	; 3
    1318:	a1 05       	cpc	r26, r1
    131a:	b1 05       	cpc	r27, r1
    131c:	08 f0       	brcs	.+2      	; 0x1320 <main+0xbda>
    131e:	1a cd       	rjmp	.-1484   	; 0xd54 <main+0x60e>
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	fc 87       	std	Y+12, r31	; 0x0c
    1324:	36 cd       	rjmp	.-1428   	; 0xd92 <main+0x64c>
    1326:	2a 81       	ldd	r18, Y+2	; 0x02
    1328:	21 11       	cpse	r18, r1
					GOLDEN_1 = false;
				}
				  
  				if ((Speed == dir*55) && (ReachedHome))
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
    132a:	dc cd       	rjmp	.-1096   	; 0xee4 <main+0x79e>
    132c:	c5 cd       	rjmp	.-1142   	; 0xeb8 <main+0x772>
    132e:	f4 01       	movw	r30, r8
    1330:	42 8d       	ldd	r20, Z+26	; 0x1a
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
		{
			if ( abs(E.ExtraCount - previous_data) >= 60)
    1332:	53 8d       	ldd	r21, Z+27	; 0x1b
    1334:	64 8d       	ldd	r22, Z+28	; 0x1c
    1336:	75 8d       	ldd	r23, Z+29	; 0x1d
    1338:	9a 01       	movw	r18, r20
    133a:	22 19       	sub	r18, r2
    133c:	33 09       	sbc	r19, r3
    133e:	c9 01       	movw	r24, r18
    1340:	99 23       	and	r25, r25
    1342:	24 f4       	brge	.+8      	; 0x134c <main+0xc06>
    1344:	88 27       	eor	r24, r24
    1346:	99 27       	eor	r25, r25
    1348:	82 1b       	sub	r24, r18
    134a:	93 0b       	sbc	r25, r19
    134c:	cc 97       	sbiw	r24, 0x3c	; 60
    134e:	0c f0       	brlt	.+2      	; 0x1352 <main+0xc0c>
    1350:	83 ce       	rjmp	.-762    	; 0x1058 <main+0x912>
    1352:	96 ce       	rjmp	.-724    	; 0x1080 <main+0x93a>
			
/**************************************************Negative Ramp***********************************************************/

if (Negative_Ramp && TCRTRevolutionCount < 5)
{
	if ( abs(E.ExtraCount - previous_data) >= 40)
    1354:	f4 01       	movw	r30, r8
    1356:	42 8d       	ldd	r20, Z+26	; 0x1a
    1358:	53 8d       	ldd	r21, Z+27	; 0x1b
    135a:	64 8d       	ldd	r22, Z+28	; 0x1c
    135c:	75 8d       	ldd	r23, Z+29	; 0x1d
    135e:	9a 01       	movw	r18, r20
    1360:	22 19       	sub	r18, r2
    1362:	33 09       	sbc	r19, r3
    1364:	c9 01       	movw	r24, r18
    1366:	99 23       	and	r25, r25
    1368:	24 f4       	brge	.+8      	; 0x1372 <main+0xc2c>
    136a:	88 27       	eor	r24, r24
    136c:	99 27       	eor	r25, r25
    136e:	82 1b       	sub	r24, r18
    1370:	93 0b       	sbc	r25, r19
    1372:	88 97       	sbiw	r24, 0x28	; 40
    1374:	0c f0       	brlt	.+2      	; 0x1378 <main+0xc32>
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 8 )
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
    1376:	b7 ce       	rjmp	.-658    	; 0x10e6 <main+0x9a0>
    1378:	cb ce       	rjmp	.-618    	; 0x1110 <main+0x9ca>
    137a:	f4 01       	movw	r30, r8
    137c:	42 8d       	ldd	r20, Z+26	; 0x1a
    137e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1380:	64 8d       	ldd	r22, Z+28	; 0x1c
    1382:	75 8d       	ldd	r23, Z+29	; 0x1d
    1384:	9a 01       	movw	r18, r20
    1386:	22 19       	sub	r18, r2
    1388:	33 09       	sbc	r19, r3
    138a:	c9 01       	movw	r24, r18
    138c:	99 23       	and	r25, r25
    138e:	24 f4       	brge	.+8      	; 0x1398 <main+0xc52>
    1390:	88 27       	eor	r24, r24
    1392:	99 27       	eor	r25, r25
    1394:	82 1b       	sub	r24, r18
    1396:	93 0b       	sbc	r25, r19
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
			
			if ((TCRTRevolutionCount >= 8) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
			{
				uart3_putc('g');
    1398:	c2 97       	sbiw	r24, 0x32	; 50
    139a:	0c f0       	brlt	.+2      	; 0x139e <main+0xc58>
    139c:	eb ce       	rjmp	.-554    	; 0x1174 <main+0xa2e>
				ACKSentFlag = false;
    139e:	84 c0       	rjmp	.+264    	; 0x14a8 <main+0xd62>
    13a0:	87 e6       	ldi	r24, 0x67	; 103
    13a2:	6f d4       	rcall	.+2270   	; 0x1c82 <_Z10uart3_putch>
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
    13a4:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ACKSentFlag>
    13a8:	08 cf       	rjmp	.-496    	; 0x11ba <main+0xa74>
    13aa:	f4 01       	movw	r30, r8
    13ac:	62 89       	ldd	r22, Z+18	; 0x12
    13ae:	73 89       	ldd	r23, Z+19	; 0x13
    13b0:	07 2e       	mov	r0, r23
    13b2:	00 0c       	add	r0, r0
    13b4:	88 0b       	sbc	r24, r24
    13b6:	99 0b       	sbc	r25, r25
    13b8:	7d d5       	rcall	.+2810   	; 0x1eb4 <__floatsisf>
    13ba:	ab 01       	movw	r20, r22
    13bc:	bc 01       	movw	r22, r24
    13be:	c5 01       	movw	r24, r10
    13c0:	61 d2       	rcall	.+1218   	; 0x1884 <_ZN3PID11Compute_PIDEf>
    13c2:	45 d5       	rcall	.+2698   	; 0x1e4e <__fixsfsi>
    13c4:	82 ee       	ldi	r24, 0xE2	; 226
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	bc d1       	rcall	.+888    	; 0x1742 <_ZN5Motor11SetOcrValueEi>
    13ca:	f5 01       	movw	r30, r10
			Speed_PID.PID_Flag = false;
    13cc:	10 82       	st	Z, r1
    13ce:	23 cf       	rjmp	.-442    	; 0x1216 <main+0xad0>
    13d0:	c4 01       	movw	r24, r8
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));
    13d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN7Encoder17Encoder_Get_angleEv>
    13d6:	bc 01       	movw	r22, r24
    13d8:	99 0f       	add	r25, r25
    13da:	88 0b       	sbc	r24, r24
    13dc:	99 0b       	sbc	r25, r25
    13de:	6a d5       	rcall	.+2772   	; 0x1eb4 <__floatsisf>
    13e0:	ab 01       	movw	r20, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	88 e5       	ldi	r24, 0x58	; 88
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	4d d2       	rcall	.+1178   	; 0x1884 <_ZN3PID11Compute_PIDEf>
    13ea:	31 d5       	rcall	.+2658   	; 0x1e4e <__fixsfsi>
    13ec:	82 ee       	ldi	r24, 0xE2	; 226
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	a8 d1       	rcall	.+848    	; 0x1742 <_ZN5Motor11SetOcrValueEi>
    13f2:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <check_homeBuffer+0x4>
    13f6:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <check_homeBuffer+0x5>

			check_homeBuffer[3] = check_homeBuffer[2];
    13fa:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <check_homeBuffer+0x7>
    13fe:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <check_homeBuffer+0x6>
    1402:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <check_homeBuffer+0x2>
    1406:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <check_homeBuffer+0x3>
			check_homeBuffer[2] = check_homeBuffer[1];
    140a:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <check_homeBuffer+0x5>
    140e:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <check_homeBuffer+0x4>
    1412:	e4 e1       	ldi	r30, 0x14	; 20
    1414:	f2 e0       	ldi	r31, 0x02	; 2
			check_homeBuffer[1] = check_homeBuffer[0];
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <check_homeBuffer+0x3>
    141e:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <check_homeBuffer+0x2>
    1422:	f4 01       	movw	r30, r8
    1424:	86 89       	ldd	r24, Z+22	; 0x16
			check_homeBuffer[0] = abs(E.Count);
    1426:	97 89       	ldd	r25, Z+23	; 0x17
    1428:	99 23       	and	r25, r25
    142a:	1c f4       	brge	.+6      	; 0x1432 <main+0xcec>
    142c:	91 95       	neg	r25
    142e:	81 95       	neg	r24
    1430:	91 09       	sbc	r25, r1
    1432:	e4 e1       	ldi	r30, 0x14	; 20
    1434:	f2 e0       	ldi	r31, 0x02	; 2
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	86 0f       	add	r24, r22
    143c:	97 1f       	adc	r25, r23
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	82 0f       	add	r24, r18
    1444:	93 1f       	adc	r25, r19
    1446:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
    144a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
    144e:	89 2b       	or	r24, r25
    1450:	09 f4       	brne	.+2      	; 0x1454 <main+0xd0e>
			
			if((add == 0)){
    1452:	ea ce       	rjmp	.-556    	; 0x1228 <main+0xae2>
    1454:	f5 ce       	rjmp	.-534    	; 0x1240 <main+0xafa>
    1456:	86 eb       	ldi	r24, 0xB6	; 182
    1458:	92 e0       	ldi	r25, 0x02	; 2
			Angle_PID.PID_Flag = false;
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
		{
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
    145a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
    145e:	bc 01       	movw	r22, r24
    1460:	99 0f       	add	r25, r25
    1462:	88 0b       	sbc	r24, r24
    1464:	99 0b       	sbc	r25, r25
    1466:	26 d5       	rcall	.+2636   	; 0x1eb4 <__floatsisf>
    1468:	ab 01       	movw	r20, r22
    146a:	bc 01       	movw	r22, r24
    146c:	89 e2       	ldi	r24, 0x29	; 41
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	09 d2       	rcall	.+1042   	; 0x1884 <_ZN3PID11Compute_PIDEf>
    1472:	ed d4       	rcall	.+2522   	; 0x1e4e <__fixsfsi>
    1474:	83 ee       	ldi	r24, 0xE3	; 227
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GenevaMotor11SetOcrValueEi>
    147c:	e9 e2       	ldi	r30, 0x29	; 41
    147e:	f2 e0       	ldi	r31, 0x02	; 2
    1480:	10 82       	st	Z, r1
    1482:	f5 ce       	rjmp	.-534    	; 0x126e <main+0xb28>
    1484:	e7 d8       	rcall	.-3634   	; 0x654 <_Z8GoToHomev>
			Geneva_PID.PID_Flag = false;
    1486:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <TZ1>
    148a:	81 11       	cpse	r24, r1
    148c:	fd ce       	rjmp	.-518    	; 0x1288 <main+0xb42>
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
		{
			GoToHome();
    148e:	f8 ce       	rjmp	.-528    	; 0x1280 <main+0xb3a>
    1490:	fa 85       	ldd	r31, Y+10	; 0x0a
			if (TZ1||TZ2)
    1492:	f1 11       	cpse	r31, r1
    1494:	42 cd       	rjmp	.-1404   	; 0xf1a <main+0x7d4>
    1496:	58 cd       	rjmp	.-1360   	; 0xf48 <main+0x802>
    1498:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Negative_Ramp>
						 Gripp = false;
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
    149c:	81 11       	cpse	r24, r1
    149e:	5a cf       	rjmp	.-332    	; 0x1354 <main+0xc0e>
    14a0:	5c ce       	rjmp	.-840    	; 0x115a <main+0xa14>
    14a2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Negative_Ramp>
				}
		}
			
/**************************************************Negative Ramp***********************************************************/

if (Negative_Ramp && TCRTRevolutionCount < 5)
    14a6:	59 ce       	rjmp	.-846    	; 0x115a <main+0xa14>
    14a8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Speed>
    14ac:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Speed+0x1>
    14b0:	f5 01       	movw	r30, r10
    14b2:	96 a7       	std	Z+46, r25	; 0x2e
    14b4:	85 a7       	std	Z+45, r24	; 0x2d
    14b6:	f1 e0       	ldi	r31, 0x01	; 1
    14b8:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <PIDFlag>
    14bc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <ACKSentFlag>
    14c0:	81 11       	cpse	r24, r1
			{
				Speed = Speed - (dir*RAMP_STEP);
				previous_data = E.ExtraCount;
			}
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
    14c2:	6e ce       	rjmp	.-804    	; 0x11a0 <main+0xa5a>
    14c4:	7a ce       	rjmp	.-780    	; 0x11ba <main+0xa74>

000014c6 <__vector_21>:
    14c6:	1f 92       	push	r1
			
			if ((TCRTRevolutionCount >= 8) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
    14c8:	0f 92       	push	r0
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	0f 92       	push	r0
    14ce:	11 24       	eor	r1, r1
    14d0:	0b b6       	in	r0, 0x3b	; 59
}

/*******************************************ISR Section************************************************************/

ISR(TIMER0_COMPA_vect)
{
    14d2:	0f 92       	push	r0
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
	Speed_PID.PID_Flag = true;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <Speed_PID>
	Angle_PID.PID_Flag = true;
    14f2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Angle_PID>
	Geneva_PID.PID_Flag = true;
    14f6:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Geneva_PID>
	E.Encoder_update_Speed();
    14fa:	8e eb       	ldi	r24, 0xBE	; 190
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7Encoder20Encoder_update_SpeedEv>
}
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0b be       	out	0x3b, r0	; 59
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <__vector_1>:

ISR(ENCODER_INTERRUPT_VECT)
{
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	0b b6       	in	r0, 0x3b	; 59
    1534:	0f 92       	push	r0
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
	E.Encoder_Increase_Pulse_Counter();	
    154e:	8e eb       	ldi	r24, 0xBE	; 190
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	0e 94 19 01 	call	0x232	; 0x232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>
}
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 90       	pop	r0
    1570:	0b be       	out	0x3b, r0	; 59
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_3>:


ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
    157c:	78 94       	sei
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0b b6       	in	r0, 0x3b	; 59
    158a:	0f 92       	push	r0
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	ef 93       	push	r30
    1592:	ff 93       	push	r31
	E.Angle_count = 0;
    1594:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <E+0x1f>
    1598:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <E+0x1e>
	if(Goflag && (TZ1||TZ2))
    159c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <Goflag>
    15a0:	88 23       	and	r24, r24
    15a2:	f9 f0       	breq	.+62     	; 0x15e2 <__vector_3+0x66>
    15a4:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <TZ1>
    15a8:	81 11       	cpse	r24, r1
    15aa:	10 c0       	rjmp	.+32     	; 0x15cc <__vector_3+0x50>
    15ac:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <TZ2>
    15b0:	81 11       	cpse	r24, r1
    15b2:	0c c0       	rjmp	.+24     	; 0x15cc <__vector_3+0x50>
    15b4:	16 c0       	rjmp	.+44     	; 0x15e2 <__vector_3+0x66>
	{
		TCRTRevolutionCount++;
		if (TCRTRevolutionCount == 5)
		{
			CLEAR(Pneumatic);
    15b6:	eb e0       	ldi	r30, 0x0B	; 11
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	80 81       	ld	r24, Z
    15bc:	8e 7f       	andi	r24, 0xFE	; 254
    15be:	80 83       	st	Z, r24
			Throwflag = true;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Throwflag>
			ACKSentFlag = true;
    15c6:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ACKSentFlag>
		}
	}
}
    15ca:	0b c0       	rjmp	.+22     	; 0x15e2 <__vector_3+0x66>
ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if(Goflag && (TZ1||TZ2))
	{
		TCRTRevolutionCount++;
    15cc:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TCRTRevolutionCount>
    15d0:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TCRTRevolutionCount+0x1>
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <TCRTRevolutionCount+0x1>
    15da:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <TCRTRevolutionCount>
		if (TCRTRevolutionCount == 5)
    15de:	05 97       	sbiw	r24, 0x05	; 5
    15e0:	51 f3       	breq	.-44     	; 0x15b6 <__vector_3+0x3a>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    15e2:	ff 91       	pop	r31
    15e4:	ef 91       	pop	r30
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	0f 90       	pop	r0
    15ec:	0b be       	out	0x3b, r0	; 59
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_2>:

ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
    15f8:	78 94       	sei
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
	E.Angle_count = 0;
    1610:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <E+0x1f>
    1614:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <E+0x1e>
	if (Goflag && TZ3)
    1618:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <Goflag>
    161c:	88 23       	and	r24, r24
    161e:	d9 f0       	breq	.+54     	; 0x1656 <__vector_2+0x5e>
    1620:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <TZ3>
    1624:	81 11       	cpse	r24, r1
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <__vector_2+0x48>
    1628:	16 c0       	rjmp	.+44     	; 0x1656 <__vector_2+0x5e>
	{
		TCRTRevolutionCount++;
		
		if (TCRTRevolutionCount == 6)
		{
			CLEAR(Pneumatic);
    162a:	eb e0       	ldi	r30, 0x0B	; 11
    162c:	f1 e0       	ldi	r31, 0x01	; 1
    162e:	80 81       	ld	r24, Z
    1630:	8e 7f       	andi	r24, 0xFE	; 254
    1632:	80 83       	st	Z, r24
			Throwflag = true;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Throwflag>
			ACKSentFlag = true;
    163a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ACKSentFlag>
		}
	}
}
    163e:	0b c0       	rjmp	.+22     	; 0x1656 <__vector_2+0x5e>
ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if (Goflag && TZ3)
	{
		TCRTRevolutionCount++;
    1640:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TCRTRevolutionCount>
    1644:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TCRTRevolutionCount+0x1>
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <TCRTRevolutionCount+0x1>
    164e:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <TCRTRevolutionCount>
		
		if (TCRTRevolutionCount == 6)
    1652:	06 97       	sbiw	r24, 0x06	; 6
    1654:	51 f3       	breq	.-44     	; 0x162a <__vector_2+0x32>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	0f 90       	pop	r0
    1660:	0b be       	out	0x3b, r0	; 59
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <__vector_5>:

ISR(GENEVA_ENCODER_INT_vect)
{
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	0b b6       	in	r0, 0x3b	; 59
    1678:	0f 92       	push	r0
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
	if (READ(ENCODERB))
    1682:	01 9b       	sbis	0x00, 1	; 0
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <__vector_5+0x2a>
		long count;
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
    1686:	e6 eb       	ldi	r30, 0xB6	; 182
    1688:	f2 e0       	ldi	r31, 0x02	; 2
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <__vector_5+0x3c>
	{
		E1.Inc_Count();
	}
	else if (!READ(ENCODERB))
    1696:	01 99       	sbic	0x00, 1	; 0
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <__vector_5+0x3c>
		inline void Dcr_Count(){Encoder_Count--;};
    169a:	e6 eb       	ldi	r30, 0xB6	; 182
    169c:	f2 e0       	ldi	r31, 0x02	; 2
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
	{
		E1.Dcr_Count();
	}
	
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	0f 90       	pop	r0
    16b2:	0b be       	out	0x3b, r0	; 59
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <_GLOBAL__sub_I_timer2_millis>:
#define MAX_SPEED		120
#define RAMP_STEP		3

GenevaMotor G;
Motor   M;
Encoder E;
    16be:	8e eb       	ldi	r24, 0xBE	; 190
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN7EncoderC1Ev>
GenevaEncoder E1;
    16c6:	86 eb       	ldi	r24, 0xB6	; 182
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_ZN13GenevaEncoderC1Ev>
    16ce:	08 95       	ret

000016d0 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
		OUTPUT(DD_F1);
    16d0:	e1 e0       	ldi	r30, 0x01	; 1
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	80 81       	ld	r24, Z
    16d6:	80 62       	ori	r24, 0x20	; 32
    16d8:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    16da:	80 81       	ld	r24, Z
    16dc:	80 64       	ori	r24, 0x40	; 64
    16de:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    16e0:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );												    // Clear on Compare Match
    16e2:	e0 e8       	ldi	r30, 0x80	; 128
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	82 62       	ori	r24, 0x22	; 34
    16ea:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    16ec:	e1 e8       	ldi	r30, 0x81	; 129
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8a 61       	ori	r24, 0x1A	; 26
    16f4:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    16f6:	89 ef       	ldi	r24, 0xF9	; 249
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    16fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1702:	08 95       	ret

00001704 <_ZN5Motor19SetForwardDirectionEv>:
}

void Motor::SetForwardDirection()
{
	SET (DD_F1);
    1704:	e2 e0       	ldi	r30, 0x02	; 2
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	80 81       	ld	r24, Z
    170a:	80 62       	ori	r24, 0x20	; 32
    170c:	80 83       	st	Z, r24
	CLEAR	(DD_B1);
    170e:	80 81       	ld	r24, Z
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	80 83       	st	Z, r24
    1714:	08 95       	ret

00001716 <_ZN5Motor19SetReverseDirectionEv>:
}
void Motor::SetReverseDirection()
{
	CLEAR	(DD_F1);
    1716:	e2 e0       	ldi	r30, 0x02	; 2
    1718:	f1 e0       	ldi	r31, 0x01	; 1
    171a:	80 81       	ld	r24, Z
    171c:	8f 7d       	andi	r24, 0xDF	; 223
    171e:	80 83       	st	Z, r24
	SET (DD_B1);
    1720:	80 81       	ld	r24, Z
    1722:	80 64       	ori	r24, 0x40	; 64
    1724:	80 83       	st	Z, r24
    1726:	08 95       	ret

00001728 <_ZN5Motor9StopMotorEv>:
}

void Motor::StopMotor()
{
	SET	(DD_F1);
    1728:	e2 e0       	ldi	r30, 0x02	; 2
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	80 81       	ld	r24, Z
    172e:	80 62       	ori	r24, 0x20	; 32
    1730:	80 83       	st	Z, r24
	SET	(DD_B1);
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	80 83       	st	Z, r24

	PWM_OCR1 = 0;	
    1738:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    173c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    1740:	08 95       	ret

00001742 <_ZN5Motor11SetOcrValueEi>:
}


void Motor::SetOcrValue(int Ocr)
{
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	8c 01       	movw	r16, r24
    174c:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    174e:	1c 16       	cp	r1, r28
    1750:	1d 06       	cpc	r1, r29
    1752:	0c f4       	brge	.+2      	; 0x1756 <_ZN5Motor11SetOcrValueEi+0x14>
		//SetReverseDirection();
		SetForwardDirection();
    1754:	d7 df       	rcall	.-82     	; 0x1704 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    1756:	c9 3f       	cpi	r28, 0xF9	; 249
    1758:	d1 05       	cpc	r29, r1
    175a:	44 f4       	brge	.+16     	; 0x176c <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
		
	if(Ocr < 0)
    175c:	dd 23       	and	r29, r29
    175e:	44 f4       	brge	.+16     	; 0x1770 <_ZN5Motor11SetOcrValueEi+0x2e>
	 {
		Ocr = -Ocr;
    1760:	d1 95       	neg	r29
    1762:	c1 95       	neg	r28
    1764:	d1 09       	sbc	r29, r1
		//SetForwardDirection();
		SetReverseDirection();   
    1766:	c8 01       	movw	r24, r16
    1768:	d6 df       	rcall	.-84     	; 0x1716 <_ZN5Motor19SetReverseDirectionEv>
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
		//SetReverseDirection();
		SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    176c:	c9 ef       	ldi	r28, 0xF9	; 249
    176e:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Ocr = -Ocr;
		//SetForwardDirection();
		SetReverseDirection();   
	 }
	PWM_OCR1	= Ocr;
    1770:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    1774:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <_ZN5Motor10InitialiseEv>:
#include "Motor.h"



void Motor::Initialise()
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	ec 01       	movw	r28, r24
	InitPWM();
    1788:	a3 df       	rcall	.-186    	; 0x16d0 <_ZN5Motor7InitPWMEv>

	StopMotor();
    178a:	ce 01       	movw	r24, r28
    178c:	cd df       	rcall	.-102    	; 0x1728 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	ce 01       	movw	r24, r28
    1794:	d6 df       	rcall	.-84     	; 0x1742 <_ZN5Motor11SetOcrValueEi>

}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <_Z9constrainRfff>:
 */  
#include "PID.h"
#include "headers.h"

void constrain(float &val,float minVal,float maxVal)
{
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	ec 01       	movw	r28, r24
    17b6:	4a 01       	movw	r8, r20
    17b8:	5b 01       	movw	r10, r22
    17ba:	68 01       	movw	r12, r16
    17bc:	79 01       	movw	r14, r18
	if(val < minVal)
    17be:	9a 01       	movw	r18, r20
    17c0:	ab 01       	movw	r20, r22
    17c2:	68 81       	ld	r22, Y
    17c4:	79 81       	ldd	r23, Y+1	; 0x01
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	d5 d2       	rcall	.+1450   	; 0x1d76 <__cmpsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	24 f4       	brge	.+8      	; 0x17d8 <_Z9constrainRfff+0x3c>
		val = minVal;
    17d0:	88 82       	st	Y, r8
    17d2:	99 82       	std	Y+1, r9	; 0x01
    17d4:	aa 82       	std	Y+2, r10	; 0x02
    17d6:	bb 82       	std	Y+3, r11	; 0x03
	if(val > maxVal)
    17d8:	a7 01       	movw	r20, r14
    17da:	96 01       	movw	r18, r12
    17dc:	68 81       	ld	r22, Y
    17de:	79 81       	ldd	r23, Y+1	; 0x01
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	17 d4       	rcall	.+2094   	; 0x2014 <__gesf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	24 f4       	brge	.+8      	; 0x17f2 <_Z9constrainRfff+0x56>
		val = maxVal;
    17ea:	c8 82       	st	Y, r12
    17ec:	d9 82       	std	Y+1, r13	; 0x01
    17ee:	ea 82       	std	Y+2, r14	; 0x02
    17f0:	fb 82       	std	Y+3, r15	; 0x03
}
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	9f 90       	pop	r9
    1808:	8f 90       	pop	r8
    180a:	08 95       	ret

0000180c <_ZN3PID10InitializeEv>:

void PID::Initialize()
{
    180c:	fc 01       	movw	r30, r24
	kp         =  0;
    180e:	11 82       	std	Z+1, r1	; 0x01
    1810:	12 82       	std	Z+2, r1	; 0x02
    1812:	13 82       	std	Z+3, r1	; 0x03
    1814:	14 82       	std	Z+4, r1	; 0x04
	ki         =  0;
    1816:	15 82       	std	Z+5, r1	; 0x05
    1818:	16 82       	std	Z+6, r1	; 0x06
    181a:	17 82       	std	Z+7, r1	; 0x07
    181c:	10 86       	std	Z+8, r1	; 0x08
	kd         =  0;
    181e:	11 86       	std	Z+9, r1	; 0x09
    1820:	12 86       	std	Z+10, r1	; 0x0a
    1822:	13 86       	std	Z+11, r1	; 0x0b
    1824:	14 86       	std	Z+12, r1	; 0x0c
	error      =  0;
    1826:	11 8e       	std	Z+25, r1	; 0x19
    1828:	12 8e       	std	Z+26, r1	; 0x1a
    182a:	13 8e       	std	Z+27, r1	; 0x1b
    182c:	14 8e       	std	Z+28, r1	; 0x1c
	errSum     =  0;
    182e:	15 86       	std	Z+13, r1	; 0x0d
    1830:	16 86       	std	Z+14, r1	; 0x0e
    1832:	17 86       	std	Z+15, r1	; 0x0f
    1834:	10 8a       	std	Z+16, r1	; 0x10
	lastinput  =  0;
    1836:	15 a2       	std	Z+37, r1	; 0x25
    1838:	16 a2       	std	Z+38, r1	; 0x26
    183a:	17 a2       	std	Z+39, r1	; 0x27
    183c:	10 a6       	std	Z+40, r1	; 0x28
	offset     =  0;
    183e:	11 a6       	std	Z+41, r1	; 0x29
    1840:	12 a6       	std	Z+42, r1	; 0x2a
    1842:	13 a6       	std	Z+43, r1	; 0x2b
    1844:	14 a6       	std	Z+44, r1	; 0x2c
	setPoint   =  0;
    1846:	16 a6       	std	Z+46, r1	; 0x2e
    1848:	15 a6       	std	Z+45, r1	; 0x2d
	PID_Flag   =  true;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	80 83       	st	Z, r24
    184e:	08 95       	ret

00001850 <_ZN3PID7Set_PIDEfff>:
}
void PID::Set_PID(float KP,float KI,float KD)
{
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	fc 01       	movw	r30, r24
	kp = KP;
    185e:	41 83       	std	Z+1, r20	; 0x01
    1860:	52 83       	std	Z+2, r21	; 0x02
    1862:	63 83       	std	Z+3, r22	; 0x03
    1864:	74 83       	std	Z+4, r23	; 0x04
	ki = KI;
    1866:	05 83       	std	Z+5, r16	; 0x05
    1868:	16 83       	std	Z+6, r17	; 0x06
    186a:	27 83       	std	Z+7, r18	; 0x07
    186c:	30 87       	std	Z+8, r19	; 0x08
	kd = KD;
    186e:	c1 86       	std	Z+9, r12	; 0x09
    1870:	d2 86       	std	Z+10, r13	; 0x0a
    1872:	e3 86       	std	Z+11, r14	; 0x0b
    1874:	f4 86       	std	Z+12, r15	; 0x0c
}
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	08 95       	ret

00001884 <_ZN3PID11Compute_PIDEf>:
float PID::Compute_PID(float input)
{
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
    18a6:	6a 01       	movw	r12, r20
    18a8:	7b 01       	movw	r14, r22
		error   = setPoint - input;
    18aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    18ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    18ae:	07 2e       	mov	r0, r23
    18b0:	00 0c       	add	r0, r0
    18b2:	88 0b       	sbc	r24, r24
    18b4:	99 0b       	sbc	r25, r25
    18b6:	fe d2       	rcall	.+1532   	; 0x1eb4 <__floatsisf>
    18b8:	a7 01       	movw	r20, r14
    18ba:	96 01       	movw	r18, r12
    18bc:	f7 d1       	rcall	.+1006   	; 0x1cac <__subsf3>
    18be:	4b 01       	movw	r8, r22
    18c0:	5c 01       	movw	r10, r24
    18c2:	69 8f       	std	Y+25, r22	; 0x19
    18c4:	7a 8f       	std	Y+26, r23	; 0x1a
    18c6:	8b 8f       	std	Y+27, r24	; 0x1b
    18c8:	9c 8f       	std	Y+28, r25	; 0x1c
 		Iterm += (ki*error);
    18ca:	2d 81       	ldd	r18, Y+5	; 0x05
    18cc:	3e 81       	ldd	r19, Y+6	; 0x06
    18ce:	4f 81       	ldd	r20, Y+7	; 0x07
    18d0:	58 85       	ldd	r21, Y+8	; 0x08
    18d2:	a4 d3       	rcall	.+1864   	; 0x201c <__mulsf3>
    18d4:	29 a1       	ldd	r18, Y+33	; 0x21
    18d6:	3a a1       	ldd	r19, Y+34	; 0x22
    18d8:	4b a1       	ldd	r20, Y+35	; 0x23
    18da:	5c a1       	ldd	r21, Y+36	; 0x24
    18dc:	e8 d1       	rcall	.+976    	; 0x1cae <__addsf3>
    18de:	2b 01       	movw	r4, r22
    18e0:	3c 01       	movw	r6, r24
    18e2:	69 a3       	std	Y+33, r22	; 0x21
    18e4:	7a a3       	std	Y+34, r23	; 0x22
    18e6:	8b a3       	std	Y+35, r24	; 0x23
    18e8:	9c a3       	std	Y+36, r25	; 0x24

		float dErr = (input - lastinput);
		
		output = kp * error + Iterm - kd * dErr;
    18ea:	29 81       	ldd	r18, Y+1	; 0x01
    18ec:	3a 81       	ldd	r19, Y+2	; 0x02
    18ee:	4b 81       	ldd	r20, Y+3	; 0x03
    18f0:	5c 81       	ldd	r21, Y+4	; 0x04
    18f2:	c5 01       	movw	r24, r10
    18f4:	b4 01       	movw	r22, r8
    18f6:	92 d3       	rcall	.+1828   	; 0x201c <__mulsf3>
    18f8:	a3 01       	movw	r20, r6
    18fa:	92 01       	movw	r18, r4
    18fc:	d8 d1       	rcall	.+944    	; 0x1cae <__addsf3>
    18fe:	4b 01       	movw	r8, r22
    1900:	5c 01       	movw	r10, r24
    1902:	2d a1       	ldd	r18, Y+37	; 0x25
    1904:	3e a1       	ldd	r19, Y+38	; 0x26
    1906:	4f a1       	ldd	r20, Y+39	; 0x27
    1908:	58 a5       	ldd	r21, Y+40	; 0x28
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	ce d1       	rcall	.+924    	; 0x1cac <__subsf3>
    1910:	29 85       	ldd	r18, Y+9	; 0x09
    1912:	3a 85       	ldd	r19, Y+10	; 0x0a
    1914:	4b 85       	ldd	r20, Y+11	; 0x0b
    1916:	5c 85       	ldd	r21, Y+12	; 0x0c
    1918:	81 d3       	rcall	.+1794   	; 0x201c <__mulsf3>
    191a:	9b 01       	movw	r18, r22
    191c:	ac 01       	movw	r20, r24
    191e:	c5 01       	movw	r24, r10
    1920:	b4 01       	movw	r22, r8
    1922:	c4 d1       	rcall	.+904    	; 0x1cac <__subsf3>
    1924:	6d 8f       	std	Y+29, r22	; 0x1d
    1926:	7e 8f       	std	Y+30, r23	; 0x1e
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
    192a:	98 a3       	std	Y+32, r25	; 0x20
	
		constrain(output,minOut,maxOut);
    192c:	09 89       	ldd	r16, Y+17	; 0x11
    192e:	1a 89       	ldd	r17, Y+18	; 0x12
    1930:	2b 89       	ldd	r18, Y+19	; 0x13
    1932:	3c 89       	ldd	r19, Y+20	; 0x14
    1934:	4d 89       	ldd	r20, Y+21	; 0x15
    1936:	5e 89       	ldd	r21, Y+22	; 0x16
    1938:	6f 89       	ldd	r22, Y+23	; 0x17
    193a:	78 8d       	ldd	r23, Y+24	; 0x18
    193c:	ce 01       	movw	r24, r28
    193e:	4d 96       	adiw	r24, 0x1d	; 29
    1940:	2d df       	rcall	.-422    	; 0x179c <_Z9constrainRfff>
		//Remember some variables for next time
		lastinput = input;
    1942:	cd a2       	std	Y+37, r12	; 0x25
    1944:	de a2       	std	Y+38, r13	; 0x26
    1946:	ef a2       	std	Y+39, r14	; 0x27
    1948:	f8 a6       	std	Y+40, r15	; 0x28

	return output;
    194a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    194c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    194e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1950:	98 a1       	ldd	r25, Y+32	; 0x20
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	7f 90       	pop	r7
    196c:	6f 90       	pop	r6
    196e:	5f 90       	pop	r5
    1970:	4f 90       	pop	r4
    1972:	08 95       	ret

00001974 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	0b b6       	in	r0, 0x3b	; 59
    1980:	0f 92       	push	r0
    1982:	2f 93       	push	r18
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1990:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1994:	88 71       	andi	r24, 0x18	; 24
    1996:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <_ZL12UART0_RxHead>
    199a:	ef 5f       	subi	r30, 0xFF	; 255
    199c:	ef 71       	andi	r30, 0x1F	; 31
    199e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <_ZL12UART0_RxTail>
    19a2:	e9 17       	cp	r30, r25
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <__vector_25+0x40>
    19a6:	e0 93 8c 03 	sts	0x038C, r30	; 0x80038c <_ZL12UART0_RxHead>
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	e1 57       	subi	r30, 0x71	; 113
    19ae:	fc 4f       	sbci	r31, 0xFC	; 252
    19b0:	20 83       	st	Z, r18
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <__vector_25+0x42>
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <_ZL17UART0_LastRxError>
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0b be       	out	0x3b, r0	; 59
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <__vector_26>:
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	0b b6       	in	r0, 0x3b	; 59
    19de:	0f 92       	push	r0
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
    19e8:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <_ZL12UART0_TxHead>
    19ec:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZL12UART0_TxTail>
    19f0:	98 17       	cp	r25, r24
    19f2:	69 f0       	breq	.+26     	; 0x1a0e <__vector_26+0x3c>
    19f4:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <_ZL12UART0_TxTail>
    19f8:	ef 5f       	subi	r30, 0xFF	; 255
    19fa:	ef 71       	andi	r30, 0x1F	; 31
    19fc:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <_ZL12UART0_TxTail>
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	e1 55       	subi	r30, 0x51	; 81
    1a04:	fc 4f       	sbci	r31, 0xFC	; 252
    1a06:	80 81       	ld	r24, Z
    1a08:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <__vector_26+0x46>
    1a0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7d       	andi	r24, 0xDF	; 223
    1a16:	80 83       	st	Z, r24
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	0f 90       	pop	r0
    1a22:	0b be       	out	0x3b, r0	; 59
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <_Z10uart0_initj>:
    1a2e:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <_ZL12UART0_TxHead>
    1a32:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZL12UART0_TxTail>
    1a36:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZL12UART0_RxHead>
    1a3a:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <_ZL12UART0_RxTail>
    1a3e:	99 23       	and	r25, r25
    1a40:	24 f4       	brge	.+8      	; 0x1a4a <_Z10uart0_initj+0x1c>
    1a42:	22 e0       	ldi	r18, 0x02	; 2
    1a44:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1a48:	9f 77       	andi	r25, 0x7F	; 127
    1a4a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1a4e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1a52:	88 e9       	ldi	r24, 0x98	; 152
    1a54:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1a5e:	08 95       	ret

00001a60 <_Z10uart0_putch>:
    1a60:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <_ZL12UART0_TxHead>
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	2f 71       	andi	r18, 0x1F	; 31
    1a68:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <_ZL12UART0_TxTail>
    1a6c:	29 17       	cp	r18, r25
    1a6e:	e1 f3       	breq	.-8      	; 0x1a68 <_Z10uart0_putch+0x8>
    1a70:	e2 2f       	mov	r30, r18
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	e1 55       	subi	r30, 0x51	; 81
    1a76:	fc 4f       	sbci	r31, 0xFC	; 252
    1a78:	80 83       	st	Z, r24
    1a7a:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <_ZL12UART0_TxHead>
    1a7e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 62       	ori	r24, 0x20	; 32
    1a86:	80 83       	st	Z, r24
    1a88:	08 95       	ret

00001a8a <_Z10uart0_putsPKc>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ec 01       	movw	r28, r24
    1a90:	88 81       	ld	r24, Y
    1a92:	88 23       	and	r24, r24
    1a94:	29 f0       	breq	.+10     	; 0x1aa0 <_Z10uart0_putsPKc+0x16>
    1a96:	21 96       	adiw	r28, 0x01	; 1
    1a98:	e3 df       	rcall	.-58     	; 0x1a60 <_Z10uart0_putch>
    1a9a:	89 91       	ld	r24, Y+
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	fc cf       	rjmp	.-8      	; 0x1a98 <_Z10uart0_putsPKc+0xe>
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <__vector_51>:
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	0b b6       	in	r0, 0x3b	; 59
    1ab2:	0f 92       	push	r0
    1ab4:	2f 93       	push	r18
    1ab6:	8f 93       	push	r24
    1ab8:	9f 93       	push	r25
    1aba:	ef 93       	push	r30
    1abc:	ff 93       	push	r31
    1abe:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ac2:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1ac6:	88 71       	andi	r24, 0x18	; 24
    1ac8:	e0 91 47 03 	lds	r30, 0x0347	; 0x800347 <_ZL12UART2_RxHead>
    1acc:	ef 5f       	subi	r30, 0xFF	; 255
    1ace:	ef 71       	andi	r30, 0x1F	; 31
    1ad0:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <_ZL12UART2_RxTail>
    1ad4:	e9 17       	cp	r30, r25
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <__vector_51+0x40>
    1ad8:	e0 93 47 03 	sts	0x0347, r30	; 0x800347 <_ZL12UART2_RxHead>
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	e6 5b       	subi	r30, 0xB6	; 182
    1ae0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae2:	20 83       	st	Z, r18
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <__vector_51+0x42>
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <_ZL17UART2_LastRxError>
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	2f 91       	pop	r18
    1af6:	0f 90       	pop	r0
    1af8:	0b be       	out	0x3b, r0	; 59
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <__vector_52>:
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	0b b6       	in	r0, 0x3b	; 59
    1b10:	0f 92       	push	r0
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
    1b1a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <_ZL12UART2_TxHead>
    1b1e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <_ZL12UART2_TxTail>
    1b22:	98 17       	cp	r25, r24
    1b24:	69 f0       	breq	.+26     	; 0x1b40 <__vector_52+0x3c>
    1b26:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <_ZL12UART2_TxTail>
    1b2a:	ef 5f       	subi	r30, 0xFF	; 255
    1b2c:	ef 71       	andi	r30, 0x1F	; 31
    1b2e:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <_ZL12UART2_TxTail>
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	e6 59       	subi	r30, 0x96	; 150
    1b36:	fc 4f       	sbci	r31, 0xFC	; 252
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <__vector_52+0x46>
    1b40:	e1 ed       	ldi	r30, 0xD1	; 209
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 7d       	andi	r24, 0xDF	; 223
    1b48:	80 83       	st	Z, r24
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	0f 90       	pop	r0
    1b54:	0b be       	out	0x3b, r0	; 59
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	0f 90       	pop	r0
    1b5c:	1f 90       	pop	r1
    1b5e:	18 95       	reti

00001b60 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	0b b6       	in	r0, 0x3b	; 59
    1b6c:	0f 92       	push	r0
    1b6e:	2f 93       	push	r18
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    1b78:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    1b7c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    1b80:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    1b82:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <_ZL12UART3_RxHead>
    1b86:	ef 5f       	subi	r30, 0xFF	; 255
    1b88:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    1b8a:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_ZL12UART3_RxTail>
    1b8e:	e9 17       	cp	r30, r25
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    1b92:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	eb 5f       	subi	r30, 0xFB	; 251
    1b9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b9c:	20 83       	st	Z, r18
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    1ba2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZL17UART3_LastRxError>
}
    1ba6:	ff 91       	pop	r31
    1ba8:	ef 91       	pop	r30
    1baa:	9f 91       	pop	r25
    1bac:	8f 91       	pop	r24
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	0b b6       	in	r0, 0x3b	; 59
    1bca:	0f 92       	push	r0
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	ef 93       	push	r30
    1bd2:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    1bd4:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZL12UART3_TxHead>
    1bd8:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZL12UART3_TxTail>
    1bdc:	98 17       	cp	r25, r24
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    1be0:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <_ZL12UART3_TxTail>
    1be4:	ef 5f       	subi	r30, 0xFF	; 255
    1be6:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    1be8:	e0 93 03 03 	sts	0x0303, r30	; 0x800303 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	eb 5d       	subi	r30, 0xDB	; 219
    1bf0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    1bfa:	e1 e3       	ldi	r30, 0x31	; 49
    1bfc:	f1 e0       	ldi	r31, 0x01	; 1
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7d       	andi	r24, 0xDF	; 223
    1c02:	80 83       	st	Z, r24
	}
}
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	0f 90       	pop	r0
    1c0e:	0b be       	out	0x3b, r0	; 59
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    1c1a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    1c1e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    1c22:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    1c26:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    1c2a:	99 23       	and	r25, r25
    1c2c:	24 f4       	brge	.+8      	; 0x1c36 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    1c2e:	26 e0       	ldi	r18, 0x06	; 6
    1c30:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    1c34:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    1c36:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    1c3a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    1c3e:	88 e9       	ldi	r24, 0x98	; 152
    1c40:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    1c44:	86 e0       	ldi	r24, 0x06	; 6
    1c46:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    1c4a:	08 95       	ret

00001c4c <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    1c4c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <_ZL12UART3_RxHead>
    1c50:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZL12UART3_RxTail>
    1c54:	98 17       	cp	r25, r24
    1c56:	91 f0       	breq	.+36     	; 0x1c7c <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    1c58:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <_ZL12UART3_RxTail>
    1c5c:	ef 5f       	subi	r30, 0xFF	; 255
    1c5e:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    1c60:	e0 93 01 03 	sts	0x0301, r30	; 0x800301 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	eb 5f       	subi	r30, 0xFB	; 251
    1c68:	fc 4f       	sbci	r31, 0xFC	; 252
    1c6a:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    1c6c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZL17UART3_LastRxError>
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	98 2f       	mov	r25, r24
    1c74:	88 27       	eor	r24, r24
    1c76:	82 0f       	add	r24, r18
    1c78:	91 1d       	adc	r25, r1
    1c7a:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    1c80:	08 95       	ret

00001c82 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    1c82:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <_ZL12UART3_TxHead>
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    1c8a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <_ZL12UART3_TxTail>
    1c8e:	29 17       	cp	r18, r25
    1c90:	e1 f3       	breq	.-8      	; 0x1c8a <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    1c92:	e2 2f       	mov	r30, r18
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	eb 5d       	subi	r30, 0xDB	; 219
    1c98:	fc 4f       	sbci	r31, 0xFC	; 252
    1c9a:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    1c9c:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    1ca0:	e1 e3       	ldi	r30, 0x31	; 49
    1ca2:	f1 e0       	ldi	r31, 0x01	; 1
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	80 83       	st	Z, r24
    1caa:	08 95       	ret

00001cac <__subsf3>:
    1cac:	50 58       	subi	r21, 0x80	; 128

00001cae <__addsf3>:
    1cae:	bb 27       	eor	r27, r27
    1cb0:	aa 27       	eor	r26, r26
    1cb2:	0e d0       	rcall	.+28     	; 0x1cd0 <__addsf3x>
    1cb4:	75 c1       	rjmp	.+746    	; 0x1fa0 <__fp_round>
    1cb6:	66 d1       	rcall	.+716    	; 0x1f84 <__fp_pscA>
    1cb8:	30 f0       	brcs	.+12     	; 0x1cc6 <__addsf3+0x18>
    1cba:	6b d1       	rcall	.+726    	; 0x1f92 <__fp_pscB>
    1cbc:	20 f0       	brcs	.+8      	; 0x1cc6 <__addsf3+0x18>
    1cbe:	31 f4       	brne	.+12     	; 0x1ccc <__addsf3+0x1e>
    1cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <__addsf3+0x1a>
    1cc4:	1e f4       	brtc	.+6      	; 0x1ccc <__addsf3+0x1e>
    1cc6:	5b c1       	rjmp	.+694    	; 0x1f7e <__fp_nan>
    1cc8:	0e f4       	brtc	.+2      	; 0x1ccc <__addsf3+0x1e>
    1cca:	e0 95       	com	r30
    1ccc:	e7 fb       	bst	r30, 7
    1cce:	51 c1       	rjmp	.+674    	; 0x1f72 <__fp_inf>

00001cd0 <__addsf3x>:
    1cd0:	e9 2f       	mov	r30, r25
    1cd2:	77 d1       	rcall	.+750    	; 0x1fc2 <__fp_split3>
    1cd4:	80 f3       	brcs	.-32     	; 0x1cb6 <__addsf3+0x8>
    1cd6:	ba 17       	cp	r27, r26
    1cd8:	62 07       	cpc	r22, r18
    1cda:	73 07       	cpc	r23, r19
    1cdc:	84 07       	cpc	r24, r20
    1cde:	95 07       	cpc	r25, r21
    1ce0:	18 f0       	brcs	.+6      	; 0x1ce8 <__addsf3x+0x18>
    1ce2:	71 f4       	brne	.+28     	; 0x1d00 <__addsf3x+0x30>
    1ce4:	9e f5       	brtc	.+102    	; 0x1d4c <__addsf3x+0x7c>
    1ce6:	8f c1       	rjmp	.+798    	; 0x2006 <__fp_zero>
    1ce8:	0e f4       	brtc	.+2      	; 0x1cec <__addsf3x+0x1c>
    1cea:	e0 95       	com	r30
    1cec:	0b 2e       	mov	r0, r27
    1cee:	ba 2f       	mov	r27, r26
    1cf0:	a0 2d       	mov	r26, r0
    1cf2:	0b 01       	movw	r0, r22
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	90 01       	movw	r18, r0
    1cf8:	0c 01       	movw	r0, r24
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	a0 01       	movw	r20, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	ff 27       	eor	r31, r31
    1d02:	59 1b       	sub	r21, r25
    1d04:	99 f0       	breq	.+38     	; 0x1d2c <__addsf3x+0x5c>
    1d06:	59 3f       	cpi	r21, 0xF9	; 249
    1d08:	50 f4       	brcc	.+20     	; 0x1d1e <__addsf3x+0x4e>
    1d0a:	50 3e       	cpi	r21, 0xE0	; 224
    1d0c:	68 f1       	brcs	.+90     	; 0x1d68 <__addsf3x+0x98>
    1d0e:	1a 16       	cp	r1, r26
    1d10:	f0 40       	sbci	r31, 0x00	; 0
    1d12:	a2 2f       	mov	r26, r18
    1d14:	23 2f       	mov	r18, r19
    1d16:	34 2f       	mov	r19, r20
    1d18:	44 27       	eor	r20, r20
    1d1a:	58 5f       	subi	r21, 0xF8	; 248
    1d1c:	f3 cf       	rjmp	.-26     	; 0x1d04 <__addsf3x+0x34>
    1d1e:	46 95       	lsr	r20
    1d20:	37 95       	ror	r19
    1d22:	27 95       	ror	r18
    1d24:	a7 95       	ror	r26
    1d26:	f0 40       	sbci	r31, 0x00	; 0
    1d28:	53 95       	inc	r21
    1d2a:	c9 f7       	brne	.-14     	; 0x1d1e <__addsf3x+0x4e>
    1d2c:	7e f4       	brtc	.+30     	; 0x1d4c <__addsf3x+0x7c>
    1d2e:	1f 16       	cp	r1, r31
    1d30:	ba 0b       	sbc	r27, r26
    1d32:	62 0b       	sbc	r22, r18
    1d34:	73 0b       	sbc	r23, r19
    1d36:	84 0b       	sbc	r24, r20
    1d38:	ba f0       	brmi	.+46     	; 0x1d68 <__addsf3x+0x98>
    1d3a:	91 50       	subi	r25, 0x01	; 1
    1d3c:	a1 f0       	breq	.+40     	; 0x1d66 <__addsf3x+0x96>
    1d3e:	ff 0f       	add	r31, r31
    1d40:	bb 1f       	adc	r27, r27
    1d42:	66 1f       	adc	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	c2 f7       	brpl	.-16     	; 0x1d3a <__addsf3x+0x6a>
    1d4a:	0e c0       	rjmp	.+28     	; 0x1d68 <__addsf3x+0x98>
    1d4c:	ba 0f       	add	r27, r26
    1d4e:	62 1f       	adc	r22, r18
    1d50:	73 1f       	adc	r23, r19
    1d52:	84 1f       	adc	r24, r20
    1d54:	48 f4       	brcc	.+18     	; 0x1d68 <__addsf3x+0x98>
    1d56:	87 95       	ror	r24
    1d58:	77 95       	ror	r23
    1d5a:	67 95       	ror	r22
    1d5c:	b7 95       	ror	r27
    1d5e:	f7 95       	ror	r31
    1d60:	9e 3f       	cpi	r25, 0xFE	; 254
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <__addsf3x+0x96>
    1d64:	b3 cf       	rjmp	.-154    	; 0x1ccc <__addsf3+0x1e>
    1d66:	93 95       	inc	r25
    1d68:	88 0f       	add	r24, r24
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <__addsf3x+0x9e>
    1d6c:	99 27       	eor	r25, r25
    1d6e:	ee 0f       	add	r30, r30
    1d70:	97 95       	ror	r25
    1d72:	87 95       	ror	r24
    1d74:	08 95       	ret

00001d76 <__cmpsf2>:
    1d76:	d9 d0       	rcall	.+434    	; 0x1f2a <__fp_cmp>
    1d78:	08 f4       	brcc	.+2      	; 0x1d7c <__cmpsf2+0x6>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	08 95       	ret

00001d7e <__divsf3>:
    1d7e:	0c d0       	rcall	.+24     	; 0x1d98 <__divsf3x>
    1d80:	0f c1       	rjmp	.+542    	; 0x1fa0 <__fp_round>
    1d82:	07 d1       	rcall	.+526    	; 0x1f92 <__fp_pscB>
    1d84:	40 f0       	brcs	.+16     	; 0x1d96 <__divsf3+0x18>
    1d86:	fe d0       	rcall	.+508    	; 0x1f84 <__fp_pscA>
    1d88:	30 f0       	brcs	.+12     	; 0x1d96 <__divsf3+0x18>
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <__divsf3+0x16>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	19 f0       	breq	.+6      	; 0x1d96 <__divsf3+0x18>
    1d90:	f0 c0       	rjmp	.+480    	; 0x1f72 <__fp_inf>
    1d92:	51 11       	cpse	r21, r1
    1d94:	39 c1       	rjmp	.+626    	; 0x2008 <__fp_szero>
    1d96:	f3 c0       	rjmp	.+486    	; 0x1f7e <__fp_nan>

00001d98 <__divsf3x>:
    1d98:	14 d1       	rcall	.+552    	; 0x1fc2 <__fp_split3>
    1d9a:	98 f3       	brcs	.-26     	; 0x1d82 <__divsf3+0x4>

00001d9c <__divsf3_pse>:
    1d9c:	99 23       	and	r25, r25
    1d9e:	c9 f3       	breq	.-14     	; 0x1d92 <__divsf3+0x14>
    1da0:	55 23       	and	r21, r21
    1da2:	b1 f3       	breq	.-20     	; 0x1d90 <__divsf3+0x12>
    1da4:	95 1b       	sub	r25, r21
    1da6:	55 0b       	sbc	r21, r21
    1da8:	bb 27       	eor	r27, r27
    1daa:	aa 27       	eor	r26, r26
    1dac:	62 17       	cp	r22, r18
    1dae:	73 07       	cpc	r23, r19
    1db0:	84 07       	cpc	r24, r20
    1db2:	38 f0       	brcs	.+14     	; 0x1dc2 <__divsf3_pse+0x26>
    1db4:	9f 5f       	subi	r25, 0xFF	; 255
    1db6:	5f 4f       	sbci	r21, 0xFF	; 255
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	44 1f       	adc	r20, r20
    1dbe:	aa 1f       	adc	r26, r26
    1dc0:	a9 f3       	breq	.-22     	; 0x1dac <__divsf3_pse+0x10>
    1dc2:	33 d0       	rcall	.+102    	; 0x1e2a <__divsf3_pse+0x8e>
    1dc4:	0e 2e       	mov	r0, r30
    1dc6:	3a f0       	brmi	.+14     	; 0x1dd6 <__divsf3_pse+0x3a>
    1dc8:	e0 e8       	ldi	r30, 0x80	; 128
    1dca:	30 d0       	rcall	.+96     	; 0x1e2c <__divsf3_pse+0x90>
    1dcc:	91 50       	subi	r25, 0x01	; 1
    1dce:	50 40       	sbci	r21, 0x00	; 0
    1dd0:	e6 95       	lsr	r30
    1dd2:	00 1c       	adc	r0, r0
    1dd4:	ca f7       	brpl	.-14     	; 0x1dc8 <__divsf3_pse+0x2c>
    1dd6:	29 d0       	rcall	.+82     	; 0x1e2a <__divsf3_pse+0x8e>
    1dd8:	fe 2f       	mov	r31, r30
    1dda:	27 d0       	rcall	.+78     	; 0x1e2a <__divsf3_pse+0x8e>
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	bb 1f       	adc	r27, r27
    1de4:	26 17       	cp	r18, r22
    1de6:	37 07       	cpc	r19, r23
    1de8:	48 07       	cpc	r20, r24
    1dea:	ab 07       	cpc	r26, r27
    1dec:	b0 e8       	ldi	r27, 0x80	; 128
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <__divsf3_pse+0x56>
    1df0:	bb 0b       	sbc	r27, r27
    1df2:	80 2d       	mov	r24, r0
    1df4:	bf 01       	movw	r22, r30
    1df6:	ff 27       	eor	r31, r31
    1df8:	93 58       	subi	r25, 0x83	; 131
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	2a f0       	brmi	.+10     	; 0x1e08 <__divsf3_pse+0x6c>
    1dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1e00:	51 05       	cpc	r21, r1
    1e02:	68 f0       	brcs	.+26     	; 0x1e1e <__divsf3_pse+0x82>
    1e04:	b6 c0       	rjmp	.+364    	; 0x1f72 <__fp_inf>
    1e06:	00 c1       	rjmp	.+512    	; 0x2008 <__fp_szero>
    1e08:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0a:	ec f3       	brlt	.-6      	; 0x1e06 <__divsf3_pse+0x6a>
    1e0c:	98 3e       	cpi	r25, 0xE8	; 232
    1e0e:	dc f3       	brlt	.-10     	; 0x1e06 <__divsf3_pse+0x6a>
    1e10:	86 95       	lsr	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	b7 95       	ror	r27
    1e18:	f7 95       	ror	r31
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__divsf3_pse+0x74>
    1e1e:	88 0f       	add	r24, r24
    1e20:	91 1d       	adc	r25, r1
    1e22:	96 95       	lsr	r25
    1e24:	87 95       	ror	r24
    1e26:	97 f9       	bld	r25, 7
    1e28:	08 95       	ret
    1e2a:	e1 e0       	ldi	r30, 0x01	; 1
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	bb 1f       	adc	r27, r27
    1e34:	62 17       	cp	r22, r18
    1e36:	73 07       	cpc	r23, r19
    1e38:	84 07       	cpc	r24, r20
    1e3a:	ba 07       	cpc	r27, r26
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <__divsf3_pse+0xaa>
    1e3e:	62 1b       	sub	r22, r18
    1e40:	73 0b       	sbc	r23, r19
    1e42:	84 0b       	sbc	r24, r20
    1e44:	ba 0b       	sbc	r27, r26
    1e46:	ee 1f       	adc	r30, r30
    1e48:	88 f7       	brcc	.-30     	; 0x1e2c <__divsf3_pse+0x90>
    1e4a:	e0 95       	com	r30
    1e4c:	08 95       	ret

00001e4e <__fixsfsi>:
    1e4e:	04 d0       	rcall	.+8      	; 0x1e58 <__fixunssfsi>
    1e50:	68 94       	set
    1e52:	b1 11       	cpse	r27, r1
    1e54:	d9 c0       	rjmp	.+434    	; 0x2008 <__fp_szero>
    1e56:	08 95       	ret

00001e58 <__fixunssfsi>:
    1e58:	bc d0       	rcall	.+376    	; 0x1fd2 <__fp_splitA>
    1e5a:	88 f0       	brcs	.+34     	; 0x1e7e <__fixunssfsi+0x26>
    1e5c:	9f 57       	subi	r25, 0x7F	; 127
    1e5e:	90 f0       	brcs	.+36     	; 0x1e84 <__fixunssfsi+0x2c>
    1e60:	b9 2f       	mov	r27, r25
    1e62:	99 27       	eor	r25, r25
    1e64:	b7 51       	subi	r27, 0x17	; 23
    1e66:	a0 f0       	brcs	.+40     	; 0x1e90 <__fixunssfsi+0x38>
    1e68:	d1 f0       	breq	.+52     	; 0x1e9e <__fixunssfsi+0x46>
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	1a f0       	brmi	.+6      	; 0x1e7a <__fixunssfsi+0x22>
    1e74:	ba 95       	dec	r27
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__fixunssfsi+0x12>
    1e78:	12 c0       	rjmp	.+36     	; 0x1e9e <__fixunssfsi+0x46>
    1e7a:	b1 30       	cpi	r27, 0x01	; 1
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <__fixunssfsi+0x46>
    1e7e:	c3 d0       	rcall	.+390    	; 0x2006 <__fp_zero>
    1e80:	b1 e0       	ldi	r27, 0x01	; 1
    1e82:	08 95       	ret
    1e84:	c0 c0       	rjmp	.+384    	; 0x2006 <__fp_zero>
    1e86:	67 2f       	mov	r22, r23
    1e88:	78 2f       	mov	r23, r24
    1e8a:	88 27       	eor	r24, r24
    1e8c:	b8 5f       	subi	r27, 0xF8	; 248
    1e8e:	39 f0       	breq	.+14     	; 0x1e9e <__fixunssfsi+0x46>
    1e90:	b9 3f       	cpi	r27, 0xF9	; 249
    1e92:	cc f3       	brlt	.-14     	; 0x1e86 <__fixunssfsi+0x2e>
    1e94:	86 95       	lsr	r24
    1e96:	77 95       	ror	r23
    1e98:	67 95       	ror	r22
    1e9a:	b3 95       	inc	r27
    1e9c:	d9 f7       	brne	.-10     	; 0x1e94 <__fixunssfsi+0x3c>
    1e9e:	3e f4       	brtc	.+14     	; 0x1eae <__fixunssfsi+0x56>
    1ea0:	90 95       	com	r25
    1ea2:	80 95       	com	r24
    1ea4:	70 95       	com	r23
    1ea6:	61 95       	neg	r22
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	08 95       	ret

00001eb0 <__floatunsisf>:
    1eb0:	e8 94       	clt
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <__floatsisf+0x12>

00001eb4 <__floatsisf>:
    1eb4:	97 fb       	bst	r25, 7
    1eb6:	3e f4       	brtc	.+14     	; 0x1ec6 <__floatsisf+0x12>
    1eb8:	90 95       	com	r25
    1eba:	80 95       	com	r24
    1ebc:	70 95       	com	r23
    1ebe:	61 95       	neg	r22
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	99 23       	and	r25, r25
    1ec8:	a9 f0       	breq	.+42     	; 0x1ef4 <__floatsisf+0x40>
    1eca:	f9 2f       	mov	r31, r25
    1ecc:	96 e9       	ldi	r25, 0x96	; 150
    1ece:	bb 27       	eor	r27, r27
    1ed0:	93 95       	inc	r25
    1ed2:	f6 95       	lsr	r31
    1ed4:	87 95       	ror	r24
    1ed6:	77 95       	ror	r23
    1ed8:	67 95       	ror	r22
    1eda:	b7 95       	ror	r27
    1edc:	f1 11       	cpse	r31, r1
    1ede:	f8 cf       	rjmp	.-16     	; 0x1ed0 <__floatsisf+0x1c>
    1ee0:	fa f4       	brpl	.+62     	; 0x1f20 <__floatsisf+0x6c>
    1ee2:	bb 0f       	add	r27, r27
    1ee4:	11 f4       	brne	.+4      	; 0x1eea <__floatsisf+0x36>
    1ee6:	60 ff       	sbrs	r22, 0
    1ee8:	1b c0       	rjmp	.+54     	; 0x1f20 <__floatsisf+0x6c>
    1eea:	6f 5f       	subi	r22, 0xFF	; 255
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	16 c0       	rjmp	.+44     	; 0x1f20 <__floatsisf+0x6c>
    1ef4:	88 23       	and	r24, r24
    1ef6:	11 f0       	breq	.+4      	; 0x1efc <__floatsisf+0x48>
    1ef8:	96 e9       	ldi	r25, 0x96	; 150
    1efa:	11 c0       	rjmp	.+34     	; 0x1f1e <__floatsisf+0x6a>
    1efc:	77 23       	and	r23, r23
    1efe:	21 f0       	breq	.+8      	; 0x1f08 <__floatsisf+0x54>
    1f00:	9e e8       	ldi	r25, 0x8E	; 142
    1f02:	87 2f       	mov	r24, r23
    1f04:	76 2f       	mov	r23, r22
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <__floatsisf+0x5e>
    1f08:	66 23       	and	r22, r22
    1f0a:	71 f0       	breq	.+28     	; 0x1f28 <__floatsisf+0x74>
    1f0c:	96 e8       	ldi	r25, 0x86	; 134
    1f0e:	86 2f       	mov	r24, r22
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	2a f0       	brmi	.+10     	; 0x1f20 <__floatsisf+0x6c>
    1f16:	9a 95       	dec	r25
    1f18:	66 0f       	add	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	da f7       	brpl	.-10     	; 0x1f16 <__floatsisf+0x62>
    1f20:	88 0f       	add	r24, r24
    1f22:	96 95       	lsr	r25
    1f24:	87 95       	ror	r24
    1f26:	97 f9       	bld	r25, 7
    1f28:	08 95       	ret

00001f2a <__fp_cmp>:
    1f2a:	99 0f       	add	r25, r25
    1f2c:	00 08       	sbc	r0, r0
    1f2e:	55 0f       	add	r21, r21
    1f30:	aa 0b       	sbc	r26, r26
    1f32:	e0 e8       	ldi	r30, 0x80	; 128
    1f34:	fe ef       	ldi	r31, 0xFE	; 254
    1f36:	16 16       	cp	r1, r22
    1f38:	17 06       	cpc	r1, r23
    1f3a:	e8 07       	cpc	r30, r24
    1f3c:	f9 07       	cpc	r31, r25
    1f3e:	c0 f0       	brcs	.+48     	; 0x1f70 <__fp_cmp+0x46>
    1f40:	12 16       	cp	r1, r18
    1f42:	13 06       	cpc	r1, r19
    1f44:	e4 07       	cpc	r30, r20
    1f46:	f5 07       	cpc	r31, r21
    1f48:	98 f0       	brcs	.+38     	; 0x1f70 <__fp_cmp+0x46>
    1f4a:	62 1b       	sub	r22, r18
    1f4c:	73 0b       	sbc	r23, r19
    1f4e:	84 0b       	sbc	r24, r20
    1f50:	95 0b       	sbc	r25, r21
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <__fp_cmp+0x38>
    1f54:	0a 26       	eor	r0, r26
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <__fp_cmp+0x46>
    1f58:	23 2b       	or	r18, r19
    1f5a:	24 2b       	or	r18, r20
    1f5c:	25 2b       	or	r18, r21
    1f5e:	21 f4       	brne	.+8      	; 0x1f68 <__fp_cmp+0x3e>
    1f60:	08 95       	ret
    1f62:	0a 26       	eor	r0, r26
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <__fp_cmp+0x3e>
    1f66:	a1 40       	sbci	r26, 0x01	; 1
    1f68:	a6 95       	lsr	r26
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	81 1d       	adc	r24, r1
    1f6e:	81 1d       	adc	r24, r1
    1f70:	08 95       	ret

00001f72 <__fp_inf>:
    1f72:	97 f9       	bld	r25, 7
    1f74:	9f 67       	ori	r25, 0x7F	; 127
    1f76:	80 e8       	ldi	r24, 0x80	; 128
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	08 95       	ret

00001f7e <__fp_nan>:
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	80 ec       	ldi	r24, 0xC0	; 192
    1f82:	08 95       	ret

00001f84 <__fp_pscA>:
    1f84:	00 24       	eor	r0, r0
    1f86:	0a 94       	dec	r0
    1f88:	16 16       	cp	r1, r22
    1f8a:	17 06       	cpc	r1, r23
    1f8c:	18 06       	cpc	r1, r24
    1f8e:	09 06       	cpc	r0, r25
    1f90:	08 95       	ret

00001f92 <__fp_pscB>:
    1f92:	00 24       	eor	r0, r0
    1f94:	0a 94       	dec	r0
    1f96:	12 16       	cp	r1, r18
    1f98:	13 06       	cpc	r1, r19
    1f9a:	14 06       	cpc	r1, r20
    1f9c:	05 06       	cpc	r0, r21
    1f9e:	08 95       	ret

00001fa0 <__fp_round>:
    1fa0:	09 2e       	mov	r0, r25
    1fa2:	03 94       	inc	r0
    1fa4:	00 0c       	add	r0, r0
    1fa6:	11 f4       	brne	.+4      	; 0x1fac <__fp_round+0xc>
    1fa8:	88 23       	and	r24, r24
    1faa:	52 f0       	brmi	.+20     	; 0x1fc0 <__fp_round+0x20>
    1fac:	bb 0f       	add	r27, r27
    1fae:	40 f4       	brcc	.+16     	; 0x1fc0 <__fp_round+0x20>
    1fb0:	bf 2b       	or	r27, r31
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <__fp_round+0x18>
    1fb4:	60 ff       	sbrs	r22, 0
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <__fp_round+0x20>
    1fb8:	6f 5f       	subi	r22, 0xFF	; 255
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	08 95       	ret

00001fc2 <__fp_split3>:
    1fc2:	57 fd       	sbrc	r21, 7
    1fc4:	90 58       	subi	r25, 0x80	; 128
    1fc6:	44 0f       	add	r20, r20
    1fc8:	55 1f       	adc	r21, r21
    1fca:	59 f0       	breq	.+22     	; 0x1fe2 <__fp_splitA+0x10>
    1fcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1fce:	71 f0       	breq	.+28     	; 0x1fec <__fp_splitA+0x1a>
    1fd0:	47 95       	ror	r20

00001fd2 <__fp_splitA>:
    1fd2:	88 0f       	add	r24, r24
    1fd4:	97 fb       	bst	r25, 7
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <__fp_splitA+0x20>
    1fda:	9f 3f       	cpi	r25, 0xFF	; 255
    1fdc:	79 f0       	breq	.+30     	; 0x1ffc <__fp_splitA+0x2a>
    1fde:	87 95       	ror	r24
    1fe0:	08 95       	ret
    1fe2:	12 16       	cp	r1, r18
    1fe4:	13 06       	cpc	r1, r19
    1fe6:	14 06       	cpc	r1, r20
    1fe8:	55 1f       	adc	r21, r21
    1fea:	f2 cf       	rjmp	.-28     	; 0x1fd0 <__fp_split3+0xe>
    1fec:	46 95       	lsr	r20
    1fee:	f1 df       	rcall	.-30     	; 0x1fd2 <__fp_splitA>
    1ff0:	08 c0       	rjmp	.+16     	; 0x2002 <__fp_splitA+0x30>
    1ff2:	16 16       	cp	r1, r22
    1ff4:	17 06       	cpc	r1, r23
    1ff6:	18 06       	cpc	r1, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	f1 cf       	rjmp	.-30     	; 0x1fde <__fp_splitA+0xc>
    1ffc:	86 95       	lsr	r24
    1ffe:	71 05       	cpc	r23, r1
    2000:	61 05       	cpc	r22, r1
    2002:	08 94       	sec
    2004:	08 95       	ret

00002006 <__fp_zero>:
    2006:	e8 94       	clt

00002008 <__fp_szero>:
    2008:	bb 27       	eor	r27, r27
    200a:	66 27       	eor	r22, r22
    200c:	77 27       	eor	r23, r23
    200e:	cb 01       	movw	r24, r22
    2010:	97 f9       	bld	r25, 7
    2012:	08 95       	ret

00002014 <__gesf2>:
    2014:	8a df       	rcall	.-236    	; 0x1f2a <__fp_cmp>
    2016:	08 f4       	brcc	.+2      	; 0x201a <__gesf2+0x6>
    2018:	8f ef       	ldi	r24, 0xFF	; 255
    201a:	08 95       	ret

0000201c <__mulsf3>:
    201c:	0b d0       	rcall	.+22     	; 0x2034 <__mulsf3x>
    201e:	c0 cf       	rjmp	.-128    	; 0x1fa0 <__fp_round>
    2020:	b1 df       	rcall	.-158    	; 0x1f84 <__fp_pscA>
    2022:	28 f0       	brcs	.+10     	; 0x202e <__mulsf3+0x12>
    2024:	b6 df       	rcall	.-148    	; 0x1f92 <__fp_pscB>
    2026:	18 f0       	brcs	.+6      	; 0x202e <__mulsf3+0x12>
    2028:	95 23       	and	r25, r21
    202a:	09 f0       	breq	.+2      	; 0x202e <__mulsf3+0x12>
    202c:	a2 cf       	rjmp	.-188    	; 0x1f72 <__fp_inf>
    202e:	a7 cf       	rjmp	.-178    	; 0x1f7e <__fp_nan>
    2030:	11 24       	eor	r1, r1
    2032:	ea cf       	rjmp	.-44     	; 0x2008 <__fp_szero>

00002034 <__mulsf3x>:
    2034:	c6 df       	rcall	.-116    	; 0x1fc2 <__fp_split3>
    2036:	a0 f3       	brcs	.-24     	; 0x2020 <__mulsf3+0x4>

00002038 <__mulsf3_pse>:
    2038:	95 9f       	mul	r25, r21
    203a:	d1 f3       	breq	.-12     	; 0x2030 <__mulsf3+0x14>
    203c:	95 0f       	add	r25, r21
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	55 1f       	adc	r21, r21
    2042:	62 9f       	mul	r22, r18
    2044:	f0 01       	movw	r30, r0
    2046:	72 9f       	mul	r23, r18
    2048:	bb 27       	eor	r27, r27
    204a:	f0 0d       	add	r31, r0
    204c:	b1 1d       	adc	r27, r1
    204e:	63 9f       	mul	r22, r19
    2050:	aa 27       	eor	r26, r26
    2052:	f0 0d       	add	r31, r0
    2054:	b1 1d       	adc	r27, r1
    2056:	aa 1f       	adc	r26, r26
    2058:	64 9f       	mul	r22, r20
    205a:	66 27       	eor	r22, r22
    205c:	b0 0d       	add	r27, r0
    205e:	a1 1d       	adc	r26, r1
    2060:	66 1f       	adc	r22, r22
    2062:	82 9f       	mul	r24, r18
    2064:	22 27       	eor	r18, r18
    2066:	b0 0d       	add	r27, r0
    2068:	a1 1d       	adc	r26, r1
    206a:	62 1f       	adc	r22, r18
    206c:	73 9f       	mul	r23, r19
    206e:	b0 0d       	add	r27, r0
    2070:	a1 1d       	adc	r26, r1
    2072:	62 1f       	adc	r22, r18
    2074:	83 9f       	mul	r24, r19
    2076:	a0 0d       	add	r26, r0
    2078:	61 1d       	adc	r22, r1
    207a:	22 1f       	adc	r18, r18
    207c:	74 9f       	mul	r23, r20
    207e:	33 27       	eor	r19, r19
    2080:	a0 0d       	add	r26, r0
    2082:	61 1d       	adc	r22, r1
    2084:	23 1f       	adc	r18, r19
    2086:	84 9f       	mul	r24, r20
    2088:	60 0d       	add	r22, r0
    208a:	21 1d       	adc	r18, r1
    208c:	82 2f       	mov	r24, r18
    208e:	76 2f       	mov	r23, r22
    2090:	6a 2f       	mov	r22, r26
    2092:	11 24       	eor	r1, r1
    2094:	9f 57       	subi	r25, 0x7F	; 127
    2096:	50 40       	sbci	r21, 0x00	; 0
    2098:	8a f0       	brmi	.+34     	; 0x20bc <__mulsf3_pse+0x84>
    209a:	e1 f0       	breq	.+56     	; 0x20d4 <__mulsf3_pse+0x9c>
    209c:	88 23       	and	r24, r24
    209e:	4a f0       	brmi	.+18     	; 0x20b2 <__mulsf3_pse+0x7a>
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	bb 1f       	adc	r27, r27
    20a6:	66 1f       	adc	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	50 40       	sbci	r21, 0x00	; 0
    20b0:	a9 f7       	brne	.-22     	; 0x209c <__mulsf3_pse+0x64>
    20b2:	9e 3f       	cpi	r25, 0xFE	; 254
    20b4:	51 05       	cpc	r21, r1
    20b6:	70 f0       	brcs	.+28     	; 0x20d4 <__mulsf3_pse+0x9c>
    20b8:	5c cf       	rjmp	.-328    	; 0x1f72 <__fp_inf>
    20ba:	a6 cf       	rjmp	.-180    	; 0x2008 <__fp_szero>
    20bc:	5f 3f       	cpi	r21, 0xFF	; 255
    20be:	ec f3       	brlt	.-6      	; 0x20ba <__mulsf3_pse+0x82>
    20c0:	98 3e       	cpi	r25, 0xE8	; 232
    20c2:	dc f3       	brlt	.-10     	; 0x20ba <__mulsf3_pse+0x82>
    20c4:	86 95       	lsr	r24
    20c6:	77 95       	ror	r23
    20c8:	67 95       	ror	r22
    20ca:	b7 95       	ror	r27
    20cc:	f7 95       	ror	r31
    20ce:	e7 95       	ror	r30
    20d0:	9f 5f       	subi	r25, 0xFF	; 255
    20d2:	c1 f7       	brne	.-16     	; 0x20c4 <__mulsf3_pse+0x8c>
    20d4:	fe 2b       	or	r31, r30
    20d6:	88 0f       	add	r24, r24
    20d8:	91 1d       	adc	r25, r1
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <__tablejump2__>:
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	88 1f       	adc	r24, r24
    20e8:	8b bf       	out	0x3b, r24	; 59
    20ea:	07 90       	elpm	r0, Z+
    20ec:	f6 91       	elpm	r31, Z
    20ee:	e0 2d       	mov	r30, r0
    20f0:	19 94       	eijmp

000020f2 <_exit>:
    20f2:	f8 94       	cli

000020f4 <__stop_program>:
    20f4:	ff cf       	rjmp	.-2      	; 0x20f4 <__stop_program>
