/*
 * robot.c
 *
 * Created : 10/1/2018
 */

#include "robo_init.h"
extern Wheel Wheel_arr[4];

void play(void)
{
       uint16_t speed=0;
	int downcount=0;
        uint8_t buffer[1];
        while (1) {
                if (HAL_UART_Receive(&huart1, buffer, 1, 2) == HAL_OK)
			printf("%c",buffer[0]);
		buffer[0] = 'F';		
		if(speed<38000)
			speed += 500;
		robot_speed(speed);
		if(buffer[0]!='S')
			downcount=20;
		switch (buffer[0])
		{
			case 'F':
			{
				set_Direction(&Wheel_arr[0], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_CLOCKWISE);
				break;
			}
			case 'B':
			{
				set_Direction(&Wheel_arr[0], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_ANTICLOCKWISE);
				break;
			}
			/*case 'L':
			{
				set_Direction(&Wheel_arr[0], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[2], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[3], DIR_ANTICLOCKWISE);
				break;
			}
			case 'R':
			{
				set_Direction(&Wheel_arr[0], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[2], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[3], DIR_CLOCKWISE);
				break;
			}
			case 'G':
			{
				set_Direction(&Wheel_arr[0], DIR_HALT);
				set_Direction(&Wheel_arr[1], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[2], DIR_HALT);
				set_Direction(&Wheel_arr[3], DIR_ANTICLOCKWISE);
				break;
			}
			case 'I':
			{
				set_Direction(&Wheel_arr[0], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_HALT);
				set_Direction(&Wheel_arr[2], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[3], DIR_HALT);
				break;
			}
			case 'H':
			{
				set_Direction(&Wheel_arr[0], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[2], DIR_CLOCKWISE);
				set_Direction(&Wheel_arr[3], DIR_CLOCKWISE);
				break;
			}
			case 'J':
			{
				set_Direction(&Wheel_arr[0], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[1], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[2], DIR_ANTICLOCKWISE);
				set_Direction(&Wheel_arr[3], DIR_ANTICLOCKWISE);
				break;
			}*/
			case 'S':
			{
				
				if(downcount>0)
				{
					speed -=2000;
					downcount--;
					break;
				}
				set_Direction(&Wheel_arr[0], DIR_HALT);
				set_Direction(&Wheel_arr[1], DIR_HALT);
				//set_Direction(&Wheel_arr[2], DIR_HALT);
				//set_Direction(&Wheel_arr[3], DIR_HALT);
				break;

			}
			default:
			{
			}
				
		}
    }
}
