ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_TIM_PeriodElapsedCallback
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_TIM_PeriodElapsedCallback:
  26              	.LFB131:
  27              		.file 1 "Core/Src/main.cpp"
   1:Core/Src/main.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/main.cpp **** /**
   3:Core/Src/main.cpp ****   ******************************************************************************
   4:Core/Src/main.cpp ****   * @file           : main.c
   5:Core/Src/main.cpp ****   * @brief          : Main program body
   6:Core/Src/main.cpp ****   ******************************************************************************
   7:Core/Src/main.cpp ****   * This notice applies to any and all portions of this file
   8:Core/Src/main.cpp ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/main.cpp ****   * USER CODE END. Other portions of this file, whether 
  10:Core/Src/main.cpp ****   * inserted by the user or by software development tools
  11:Core/Src/main.cpp ****   * are owned by their respective copyright owners.
  12:Core/Src/main.cpp ****   *
  13:Core/Src/main.cpp ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Core/Src/main.cpp ****   * All rights reserved.
  15:Core/Src/main.cpp ****   *
  16:Core/Src/main.cpp ****   * Redistribution and use in source and binary forms, with or without 
  17:Core/Src/main.cpp ****   * modification, are permitted, provided that the following conditions are met:
  18:Core/Src/main.cpp ****   *
  19:Core/Src/main.cpp ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Core/Src/main.cpp ****   *    this list of conditions and the following disclaimer.
  21:Core/Src/main.cpp ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Core/Src/main.cpp ****   *    this list of conditions and the following disclaimer in the documentation
  23:Core/Src/main.cpp ****   *    and/or other materials provided with the distribution.
  24:Core/Src/main.cpp ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Core/Src/main.cpp ****   *    contributors to this software may be used to endorse or promote products 
  26:Core/Src/main.cpp ****   *    derived from this software without specific written permission.
  27:Core/Src/main.cpp ****   * 4. This software, including modifications and/or derivative works of this 
  28:Core/Src/main.cpp ****   *    software, must execute solely and exclusively on microcontroller or
  29:Core/Src/main.cpp ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Core/Src/main.cpp ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Core/Src/main.cpp ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 2


  32:Core/Src/main.cpp ****   *    this license. 
  33:Core/Src/main.cpp ****   *
  34:Core/Src/main.cpp ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Core/Src/main.cpp ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Core/Src/main.cpp ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Core/Src/main.cpp ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Core/Src/main.cpp ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Core/Src/main.cpp ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Core/Src/main.cpp ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Core/Src/main.cpp ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Core/Src/main.cpp ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Core/Src/main.cpp ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Core/Src/main.cpp ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Core/Src/main.cpp ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Core/Src/main.cpp ****   *
  47:Core/Src/main.cpp ****   ******************************************************************************
  48:Core/Src/main.cpp ****   */
  49:Core/Src/main.cpp **** /* USER CODE END Header */
  50:Core/Src/main.cpp **** 
  51:Core/Src/main.cpp **** /* Includes ------------------------------------------------------------------*/
  52:Core/Src/main.cpp **** #include "main.h"
  53:Core/Src/main.cpp **** #include "cmsis_os.h"
  54:Core/Src/main.cpp **** #include "tim.h"
  55:Core/Src/main.cpp **** #include "usart.h"
  56:Core/Src/main.cpp **** #include "gpio.h"
  57:Core/Src/main.cpp **** 
  58:Core/Src/main.cpp **** /* Private includes ----------------------------------------------------------*/
  59:Core/Src/main.cpp **** /* USER CODE BEGIN Includes */
  60:Core/Src/main.cpp **** 
  61:Core/Src/main.cpp **** /* USER CODE END Includes */
  62:Core/Src/main.cpp **** 
  63:Core/Src/main.cpp **** /* Private typedef -----------------------------------------------------------*/
  64:Core/Src/main.cpp **** /* USER CODE BEGIN PTD */
  65:Core/Src/main.cpp **** 
  66:Core/Src/main.cpp **** /* USER CODE END PTD */
  67:Core/Src/main.cpp **** 
  68:Core/Src/main.cpp **** /* Private define ------------------------------------------------------------*/
  69:Core/Src/main.cpp **** /* USER CODE BEGIN PD */
  70:Core/Src/main.cpp **** 
  71:Core/Src/main.cpp **** /* USER CODE END PD */
  72:Core/Src/main.cpp **** 
  73:Core/Src/main.cpp **** /* Private macro -------------------------------------------------------------*/
  74:Core/Src/main.cpp **** /* USER CODE BEGIN PM */
  75:Core/Src/main.cpp **** 
  76:Core/Src/main.cpp **** /* USER CODE END PM */
  77:Core/Src/main.cpp **** 
  78:Core/Src/main.cpp **** /* Private variables ---------------------------------------------------------*/
  79:Core/Src/main.cpp **** 
  80:Core/Src/main.cpp **** /* USER CODE BEGIN PV */
  81:Core/Src/main.cpp **** 
  82:Core/Src/main.cpp **** /* USER CODE END PV */
  83:Core/Src/main.cpp **** 
  84:Core/Src/main.cpp **** /* Private function prototypes -----------------------------------------------*/
  85:Core/Src/main.cpp **** void SystemClock_Config(void);
  86:Core/Src/main.cpp **** extern "C" void MX_FREERTOS_Init(void);
  87:Core/Src/main.cpp **** /* USER CODE BEGIN PFP */
  88:Core/Src/main.cpp **** 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 3


  89:Core/Src/main.cpp **** /* USER CODE END PFP */
  90:Core/Src/main.cpp **** 
  91:Core/Src/main.cpp **** /* Private user code ---------------------------------------------------------*/
  92:Core/Src/main.cpp **** /* USER CODE BEGIN 0 */
  93:Core/Src/main.cpp **** 
  94:Core/Src/main.cpp **** /* USER CODE END 0 */
  95:Core/Src/main.cpp **** 
  96:Core/Src/main.cpp **** /**
  97:Core/Src/main.cpp ****   * @brief  The application entry point.
  98:Core/Src/main.cpp ****   * @retval int
  99:Core/Src/main.cpp ****   */
 100:Core/Src/main.cpp **** int main(void)
 101:Core/Src/main.cpp **** {
 102:Core/Src/main.cpp ****         /* USER CODE BEGIN 1 */
 103:Core/Src/main.cpp **** 
 104:Core/Src/main.cpp ****         /* USER CODE END 1 */
 105:Core/Src/main.cpp ****  
 106:Core/Src/main.cpp ****         /* MCU Configuration--------------------------------------------------------*/
 107:Core/Src/main.cpp **** 
 108:Core/Src/main.cpp ****         /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 109:Core/Src/main.cpp ****         HAL_Init();
 110:Core/Src/main.cpp **** 
 111:Core/Src/main.cpp ****         /* USER CODE BEGIN Init */
 112:Core/Src/main.cpp **** 
 113:Core/Src/main.cpp ****         /* USER CODE END Init */
 114:Core/Src/main.cpp **** 
 115:Core/Src/main.cpp ****         /* Configure the system clock */
 116:Core/Src/main.cpp ****         SystemClock_Config();
 117:Core/Src/main.cpp **** 
 118:Core/Src/main.cpp ****         /* USER CODE BEGIN SysInit */
 119:Core/Src/main.cpp **** 
 120:Core/Src/main.cpp ****         /* USER CODE END SysInit */
 121:Core/Src/main.cpp **** 
 122:Core/Src/main.cpp ****         /* Initialize all configured peripherals */
 123:Core/Src/main.cpp ****         MX_GPIO_Init();
 124:Core/Src/main.cpp ****         MX_TIM1_Init();
 125:Core/Src/main.cpp ****         MX_TIM4_Init();
 126:Core/Src/main.cpp ****         MX_TIM8_Init();
 127:Core/Src/main.cpp ****         MX_USART3_UART_Init();
 128:Core/Src/main.cpp ****         MX_TIM5_Init();
 129:Core/Src/main.cpp ****         MX_TIM3_Init();
 130:Core/Src/main.cpp ****         MX_TIM2_Init();
 131:Core/Src/main.cpp ****         /* USER CODE BEGIN 2 */
 132:Core/Src/main.cpp **** 
 133:Core/Src/main.cpp ****         /* USER CODE END 2 */
 134:Core/Src/main.cpp **** 
 135:Core/Src/main.cpp ****         /* Call init function for freertos objects (in freertos.c) */
 136:Core/Src/main.cpp ****         MX_FREERTOS_Init();
 137:Core/Src/main.cpp **** 
 138:Core/Src/main.cpp ****         /* Start scheduler */
 139:Core/Src/main.cpp ****         osKernelStart();
 140:Core/Src/main.cpp **** 
 141:Core/Src/main.cpp ****         /* We should never get here as control is now taken by the scheduler */
 142:Core/Src/main.cpp **** 
 143:Core/Src/main.cpp ****         /* Infinite loop */
 144:Core/Src/main.cpp ****         /* USER CODE BEGIN WHILE */
 145:Core/Src/main.cpp ****         while (1)
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 4


 146:Core/Src/main.cpp ****         {
 147:Core/Src/main.cpp ****                 /* USER CODE END WHILE */
 148:Core/Src/main.cpp **** 
 149:Core/Src/main.cpp ****                 /* USER CODE BEGIN 3 */
 150:Core/Src/main.cpp ****         }
 151:Core/Src/main.cpp ****         /* USER CODE END 3 */
 152:Core/Src/main.cpp **** }
 153:Core/Src/main.cpp **** 
 154:Core/Src/main.cpp **** /**
 155:Core/Src/main.cpp ****   * @brief System Clock Configuration
 156:Core/Src/main.cpp ****   * @retval None
 157:Core/Src/main.cpp ****   */
 158:Core/Src/main.cpp **** void SystemClock_Config(void)
 159:Core/Src/main.cpp **** {
 160:Core/Src/main.cpp ****         RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 161:Core/Src/main.cpp ****         RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 162:Core/Src/main.cpp **** 
 163:Core/Src/main.cpp ****         /**Configure the main internal regulator output voltage 
 164:Core/Src/main.cpp ****   */
 165:Core/Src/main.cpp ****         __HAL_RCC_PWR_CLK_ENABLE();
 166:Core/Src/main.cpp ****         __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 167:Core/Src/main.cpp ****         /**Initializes the CPU, AHB and APB busses clocks 
 168:Core/Src/main.cpp ****   */
 169:Core/Src/main.cpp ****         RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 170:Core/Src/main.cpp ****         RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 171:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 172:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 173:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLM = 4;
 174:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLN = 168;
 175:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 176:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLQ = 4;
 177:Core/Src/main.cpp ****         if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178:Core/Src/main.cpp ****         {
 179:Core/Src/main.cpp ****                 Error_Handler();
 180:Core/Src/main.cpp ****         }
 181:Core/Src/main.cpp ****         /**Initializes the CPU, AHB and APB busses clocks 
 182:Core/Src/main.cpp ****   */
 183:Core/Src/main.cpp ****         RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCL
 184:Core/Src/main.cpp ****         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 185:Core/Src/main.cpp ****         RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 186:Core/Src/main.cpp ****         RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 187:Core/Src/main.cpp ****         RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 188:Core/Src/main.cpp **** 
 189:Core/Src/main.cpp ****         if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 190:Core/Src/main.cpp ****         {
 191:Core/Src/main.cpp ****                 Error_Handler();
 192:Core/Src/main.cpp ****         }
 193:Core/Src/main.cpp **** }
 194:Core/Src/main.cpp **** 
 195:Core/Src/main.cpp **** /* USER CODE BEGIN 4 */
 196:Core/Src/main.cpp **** 
 197:Core/Src/main.cpp **** /* USER CODE END 4 */
 198:Core/Src/main.cpp **** 
 199:Core/Src/main.cpp **** /**
 200:Core/Src/main.cpp ****   * @brief  Period elapsed callback in non blocking mode
 201:Core/Src/main.cpp ****   * @note   This function is called  when TIM14 interrupt took place, inside
 202:Core/Src/main.cpp ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 5


 203:Core/Src/main.cpp ****   * a global variable "uwTick" used as application time base.
 204:Core/Src/main.cpp ****   * @param  htim : TIM handle
 205:Core/Src/main.cpp ****   * @retval None
 206:Core/Src/main.cpp ****   */
 207:Core/Src/main.cpp **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 208:Core/Src/main.cpp **** {
  28              		.loc 1 208 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 209:Core/Src/main.cpp ****         /* USER CODE BEGIN Callback 0 */
 210:Core/Src/main.cpp **** 
 211:Core/Src/main.cpp ****         /* USER CODE END Callback 0 */
 212:Core/Src/main.cpp ****         if (htim->Instance == TIM14)
  38              		.loc 1 212 0
  39 0002 0268     		ldr	r2, [r0]
  40 0004 034B     		ldr	r3, .L5
  41 0006 9A42     		cmp	r2, r3
  42 0008 00D0     		beq	.L4
  43              	.LVL1:
  44              	.L1:
 213:Core/Src/main.cpp ****         {
 214:Core/Src/main.cpp ****                 HAL_IncTick();
 215:Core/Src/main.cpp ****         }
 216:Core/Src/main.cpp ****         /* USER CODE BEGIN Callback 1 */
 217:Core/Src/main.cpp **** 
 218:Core/Src/main.cpp ****         /* USER CODE END Callback 1 */
 219:Core/Src/main.cpp **** }
  45              		.loc 1 219 0
  46 000a 08BD     		pop	{r3, pc}
  47              	.LVL2:
  48              	.L4:
 214:Core/Src/main.cpp ****         }
  49              		.loc 1 214 0
  50 000c FFF7FEFF 		bl	HAL_IncTick
  51              	.LVL3:
  52              		.loc 1 219 0
  53 0010 FBE7     		b	.L1
  54              	.L6:
  55 0012 00BF     		.align	2
  56              	.L5:
  57 0014 00200040 		.word	1073750016
  58              		.cfi_endproc
  59              	.LFE131:
  61              		.section	.text._Error_Handler,"ax",%progbits
  62              		.align	1
  63              		.global	_Error_Handler
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 6


  69              	_Error_Handler:
  70              	.LFB133:
 220:Core/Src/main.cpp **** 
 221:Core/Src/main.cpp **** /**
 222:Core/Src/main.cpp ****   * @brief  This function is executed in case of error occurrence.
 223:Core/Src/main.cpp ****   * @retval None
 224:Core/Src/main.cpp ****   */
 225:Core/Src/main.cpp **** void Error_Handler(void)
 226:Core/Src/main.cpp **** {
 227:Core/Src/main.cpp ****         /* USER CODE BEGIN Error_Handler_Debug */
 228:Core/Src/main.cpp ****         /* User can add his own implementation to report the HAL error return state */
 229:Core/Src/main.cpp ****         _Error_Handler(__FILE__, __LINE__);
 230:Core/Src/main.cpp ****         /* USER CODE END Error_Handler_Debug */
 231:Core/Src/main.cpp **** }
 232:Core/Src/main.cpp **** void _Error_Handler(const char *file, size_t line)
 233:Core/Src/main.cpp **** {
  71              		.loc 1 233 0
  72              		.cfi_startproc
  73              		@ Volatile: function does not return.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.LVL4:
  78              	.L8:
  79 0000 FEE7     		b	.L8
  80              		.cfi_endproc
  81              	.LFE133:
  83              		.section	.text.Error_Handler,"ax",%progbits
  84              		.align	1
  85              		.global	Error_Handler
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	Error_Handler:
  92              	.LFB132:
 226:Core/Src/main.cpp ****         /* USER CODE BEGIN Error_Handler_Debug */
  93              		.loc 1 226 0
  94              		.cfi_startproc
  95              		@ Volatile: function does not return.
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
 226:Core/Src/main.cpp ****         /* USER CODE BEGIN Error_Handler_Debug */
  98              		.loc 1 226 0
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 229:Core/Src/main.cpp ****         /* USER CODE END Error_Handler_Debug */
 104              		.loc 1 229 0
 105 0002 E521     		movs	r1, #229
 106 0004 0148     		ldr	r0, .L11
 107 0006 FFF7FEFF 		bl	_Error_Handler
 108              	.LVL5:
 109              	.L12:
 110 000a 00BF     		.align	2
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 7


 111              	.L11:
 112 000c 00000000 		.word	.LC0
 113              		.cfi_endproc
 114              	.LFE132:
 116              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
 117              		.align	1
 118              		.global	_Z18SystemClock_Configv
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	_Z18SystemClock_Configv:
 125              	.LFB130:
 159:Core/Src/main.cpp ****         RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 126              		.loc 1 159 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 80
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0000 00B5     		push	{lr}
 131              	.LCFI2:
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 14, -4
 134 0002 95B0     		sub	sp, sp, #84
 135              	.LCFI3:
 136              		.cfi_def_cfa_offset 88
 160:Core/Src/main.cpp ****         RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 137              		.loc 1 160 0
 138 0004 3022     		movs	r2, #48
 139 0006 0021     		movs	r1, #0
 140 0008 08A8     		add	r0, sp, #32
 141 000a FFF7FEFF 		bl	memset
 142              	.LVL6:
 161:Core/Src/main.cpp **** 
 143              		.loc 1 161 0
 144 000e 0023     		movs	r3, #0
 145 0010 0393     		str	r3, [sp, #12]
 146 0012 0493     		str	r3, [sp, #16]
 147 0014 0593     		str	r3, [sp, #20]
 148 0016 0693     		str	r3, [sp, #24]
 149 0018 0793     		str	r3, [sp, #28]
 150              	.LBB2:
 165:Core/Src/main.cpp ****         __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 151              		.loc 1 165 0
 152 001a 0193     		str	r3, [sp, #4]
 153 001c 204A     		ldr	r2, .L19
 154 001e 116C     		ldr	r1, [r2, #64]
 155 0020 41F08051 		orr	r1, r1, #268435456
 156 0024 1164     		str	r1, [r2, #64]
 157 0026 126C     		ldr	r2, [r2, #64]
 158 0028 02F08052 		and	r2, r2, #268435456
 159 002c 0192     		str	r2, [sp, #4]
 160 002e 019A     		ldr	r2, [sp, #4]
 161              	.LBE2:
 162              	.LBB3:
 166:Core/Src/main.cpp ****         /**Initializes the CPU, AHB and APB busses clocks 
 163              		.loc 1 166 0
 164 0030 0293     		str	r3, [sp, #8]
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 8


 165 0032 1C4B     		ldr	r3, .L19+4
 166 0034 1A68     		ldr	r2, [r3]
 167 0036 42F48042 		orr	r2, r2, #16384
 168 003a 1A60     		str	r2, [r3]
 169 003c 1B68     		ldr	r3, [r3]
 170 003e 03F48043 		and	r3, r3, #16384
 171 0042 0293     		str	r3, [sp, #8]
 172 0044 029B     		ldr	r3, [sp, #8]
 173              	.LBE3:
 169:Core/Src/main.cpp ****         RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 174              		.loc 1 169 0
 175 0046 0123     		movs	r3, #1
 176 0048 0893     		str	r3, [sp, #32]
 170:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 177              		.loc 1 170 0
 178 004a 4FF48033 		mov	r3, #65536
 179 004e 0993     		str	r3, [sp, #36]
 171:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 180              		.loc 1 171 0
 181 0050 0222     		movs	r2, #2
 182 0052 0E92     		str	r2, [sp, #56]
 172:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLM = 4;
 183              		.loc 1 172 0
 184 0054 4FF48003 		mov	r3, #4194304
 185 0058 0F93     		str	r3, [sp, #60]
 173:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLN = 168;
 186              		.loc 1 173 0
 187 005a 0423     		movs	r3, #4
 188 005c 1093     		str	r3, [sp, #64]
 174:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 189              		.loc 1 174 0
 190 005e A821     		movs	r1, #168
 191 0060 1191     		str	r1, [sp, #68]
 175:Core/Src/main.cpp ****         RCC_OscInitStruct.PLL.PLLQ = 4;
 192              		.loc 1 175 0
 193 0062 1292     		str	r2, [sp, #72]
 176:Core/Src/main.cpp ****         if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 194              		.loc 1 176 0
 195 0064 1393     		str	r3, [sp, #76]
 177:Core/Src/main.cpp ****         {
 196              		.loc 1 177 0
 197 0066 08A8     		add	r0, sp, #32
 198 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 199              	.LVL7:
 200 006c 98B9     		cbnz	r0, .L17
 183:Core/Src/main.cpp ****         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 201              		.loc 1 183 0
 202 006e 0F23     		movs	r3, #15
 203 0070 0393     		str	r3, [sp, #12]
 184:Core/Src/main.cpp ****         RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 204              		.loc 1 184 0
 205 0072 0223     		movs	r3, #2
 206 0074 0493     		str	r3, [sp, #16]
 185:Core/Src/main.cpp ****         RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 207              		.loc 1 185 0
 208 0076 0023     		movs	r3, #0
 209 0078 0593     		str	r3, [sp, #20]
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 9


 186:Core/Src/main.cpp ****         RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 210              		.loc 1 186 0
 211 007a 4FF4A053 		mov	r3, #5120
 212 007e 0693     		str	r3, [sp, #24]
 187:Core/Src/main.cpp **** 
 213              		.loc 1 187 0
 214 0080 4FF48053 		mov	r3, #4096
 215 0084 0793     		str	r3, [sp, #28]
 189:Core/Src/main.cpp ****         {
 216              		.loc 1 189 0
 217 0086 0521     		movs	r1, #5
 218 0088 03A8     		add	r0, sp, #12
 219 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 220              	.LVL8:
 221 008e 20B9     		cbnz	r0, .L18
 193:Core/Src/main.cpp **** 
 222              		.loc 1 193 0
 223 0090 15B0     		add	sp, sp, #84
 224              	.LCFI4:
 225              		.cfi_remember_state
 226              		.cfi_def_cfa_offset 4
 227              		@ sp needed
 228 0092 5DF804FB 		ldr	pc, [sp], #4
 229              	.L17:
 230              	.LCFI5:
 231              		.cfi_restore_state
 179:Core/Src/main.cpp ****         }
 232              		.loc 1 179 0
 233 0096 FFF7FEFF 		bl	Error_Handler
 234              	.LVL9:
 235              	.L18:
 191:Core/Src/main.cpp ****         }
 236              		.loc 1 191 0
 237 009a FFF7FEFF 		bl	Error_Handler
 238              	.LVL10:
 239              	.L20:
 240 009e 00BF     		.align	2
 241              	.L19:
 242 00a0 00380240 		.word	1073887232
 243 00a4 00700040 		.word	1073770496
 244              		.cfi_endproc
 245              	.LFE130:
 247              		.section	.text.main,"ax",%progbits
 248              		.align	1
 249              		.global	main
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	main:
 256              	.LFB129:
 101:Core/Src/main.cpp ****         /* USER CODE BEGIN 1 */
 257              		.loc 1 101 0
 258              		.cfi_startproc
 259              		@ Volatile: function does not return.
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 10


 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 109:Core/Src/main.cpp **** 
 267              		.loc 1 109 0
 268 0002 FFF7FEFF 		bl	HAL_Init
 269              	.LVL11:
 116:Core/Src/main.cpp **** 
 270              		.loc 1 116 0
 271 0006 FFF7FEFF 		bl	_Z18SystemClock_Configv
 272              	.LVL12:
 123:Core/Src/main.cpp ****         MX_TIM1_Init();
 273              		.loc 1 123 0
 274 000a FFF7FEFF 		bl	MX_GPIO_Init
 275              	.LVL13:
 124:Core/Src/main.cpp ****         MX_TIM4_Init();
 276              		.loc 1 124 0
 277 000e FFF7FEFF 		bl	MX_TIM1_Init
 278              	.LVL14:
 125:Core/Src/main.cpp ****         MX_TIM8_Init();
 279              		.loc 1 125 0
 280 0012 FFF7FEFF 		bl	MX_TIM4_Init
 281              	.LVL15:
 126:Core/Src/main.cpp ****         MX_USART3_UART_Init();
 282              		.loc 1 126 0
 283 0016 FFF7FEFF 		bl	MX_TIM8_Init
 284              	.LVL16:
 127:Core/Src/main.cpp ****         MX_TIM5_Init();
 285              		.loc 1 127 0
 286 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 287              	.LVL17:
 128:Core/Src/main.cpp ****         MX_TIM3_Init();
 288              		.loc 1 128 0
 289 001e FFF7FEFF 		bl	MX_TIM5_Init
 290              	.LVL18:
 129:Core/Src/main.cpp ****         MX_TIM2_Init();
 291              		.loc 1 129 0
 292 0022 FFF7FEFF 		bl	MX_TIM3_Init
 293              	.LVL19:
 130:Core/Src/main.cpp ****         /* USER CODE BEGIN 2 */
 294              		.loc 1 130 0
 295 0026 FFF7FEFF 		bl	MX_TIM2_Init
 296              	.LVL20:
 136:Core/Src/main.cpp **** 
 297              		.loc 1 136 0
 298 002a FFF7FEFF 		bl	MX_FREERTOS_Init
 299              	.LVL21:
 139:Core/Src/main.cpp **** 
 300              		.loc 1 139 0
 301 002e FFF7FEFF 		bl	osKernelStart
 302              	.LVL22:
 303              	.L22:
 304 0032 FEE7     		b	.L22
 305              		.cfi_endproc
 306              	.LFE129:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 11


 308              		.section	.text.assert_failed,"ax",%progbits
 309              		.align	1
 310              		.global	assert_failed
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
 316              	assert_failed:
 317              	.LFB134:
 234:Core/Src/main.cpp ****         while(1) {
 235:Core/Src/main.cpp **** 
 236:Core/Src/main.cpp ****         }
 237:Core/Src/main.cpp **** }
 238:Core/Src/main.cpp **** 
 239:Core/Src/main.cpp **** #ifdef USE_FULL_ASSERT
 240:Core/Src/main.cpp **** /**
 241:Core/Src/main.cpp ****   * @brief  Reports the name of the source file and the source line number
 242:Core/Src/main.cpp ****   *         where the assert_param error has occurred.
 243:Core/Src/main.cpp ****   * @param  file: pointer to the source file name
 244:Core/Src/main.cpp ****   * @param  line: assert_param error line source number
 245:Core/Src/main.cpp ****   * @retval None
 246:Core/Src/main.cpp ****   */
 247:Core/Src/main.cpp **** void assert_failed(uint8_t *file, uint32_t line)
 248:Core/Src/main.cpp **** {
 318              		.loc 1 248 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL23:
 249:Core/Src/main.cpp ****         /* USER CODE BEGIN 6 */
 250:Core/Src/main.cpp ****         /* User can add his own implementation to report the file name and line number,
 251:Core/Src/main.cpp ****      tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 252:Core/Src/main.cpp ****         /* USER CODE END 6 */
 253:Core/Src/main.cpp **** }
 324              		.loc 1 253 0
 325 0000 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE134:
 329              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 330              		.align	2
 331              	.LC0:
 332 0000 436F7265 		.ascii	"Core/Src/main.cpp\000"
 332      2F537263 
 332      2F6D6169 
 332      6E2E6370 
 332      7000
 333              		.text
 334              	.Letext0:
 335              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 336              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 337              		.file 4 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Include/core
 338              		.file 5 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/ST
 339              		.file 6 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/ST
 340              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 341              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 342              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 12


 343              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 344              		.file 11 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 345              		.file 12 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 346              		.file 13 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 347              		.file 14 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 348              		.file 15 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 349              		.file 16 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 350              		.file 17 "Core/Inc/periphs/tim.h"
 351              		.file 18 "Core/Inc/periphs/usart.h"
 352              		.file 19 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Dri
 353              		.file 20 "Core/Inc/periphs/gpio.h"
 354              		.file 21 "C:/Users/Prashant/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/F
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:18     .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:25     .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:57     .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:62     .text._Error_Handler:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:69     .text._Error_Handler:00000000 _Error_Handler
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:84     .text.Error_Handler:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:91     .text.Error_Handler:00000000 Error_Handler
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:112    .text.Error_Handler:0000000c $d
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:117    .text._Z18SystemClock_Configv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:124    .text._Z18SystemClock_Configv:00000000 _Z18SystemClock_Configv
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:242    .text._Z18SystemClock_Configv:000000a0 $d
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:248    .text.main:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:255    .text.main:00000000 main
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:309    .text.assert_failed:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:316    .text.assert_failed:00000000 assert_failed
C:\Users\Prashant\AppData\Local\Temp\ccr46l2g.s:330    .rodata.Error_Handler.str1.4:00000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM1_Init
MX_TIM4_Init
MX_TIM8_Init
MX_USART3_UART_Init
MX_TIM5_Init
MX_TIM3_Init
MX_TIM2_Init
MX_FREERTOS_Init
osKernelStart
