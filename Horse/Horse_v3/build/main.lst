ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemClock_Config:
  26              	.LFB127:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   ** This notice applies to any and all portions of this file
   8:Core/Src/main.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/main.c ****   * USER CODE END. Other portions of this file, whether 
  10:Core/Src/main.c ****   * inserted by the user or by software development tools
  11:Core/Src/main.c ****   * are owned by their respective copyright owners.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Core/Src/main.c ****   *
  15:Core/Src/main.c ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Core/Src/main.c ****   * are permitted provided that the following conditions are met:
  17:Core/Src/main.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Core/Src/main.c ****   *      this list of conditions and the following disclaimer.
  19:Core/Src/main.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Core/Src/main.c ****   *      this list of conditions and the following disclaimer in the documentation
  21:Core/Src/main.c ****   *      and/or other materials provided with the distribution.
  22:Core/Src/main.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Core/Src/main.c ****   *      may be used to endorse or promote products derived from this software
  24:Core/Src/main.c ****   *      without specific prior written permission.
  25:Core/Src/main.c ****   *
  26:Core/Src/main.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Core/Src/main.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Core/Src/main.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Core/Src/main.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Core/Src/main.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Core/Src/main.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 2


  32:Core/Src/main.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Core/Src/main.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Core/Src/main.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Core/Src/main.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Core/Src/main.c ****   *
  37:Core/Src/main.c ****   ******************************************************************************
  38:Core/Src/main.c ****   */
  39:Core/Src/main.c **** /* USER CODE END Header */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  42:Core/Src/main.c **** #include "main.h"
  43:Core/Src/main.c **** #include "tim.h"
  44:Core/Src/main.c **** #include "usart.h"
  45:Core/Src/main.c **** #include "gpio.h"
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  49:Core/Src/main.c **** #include "robo_init.h"
  50:Core/Src/main.c **** #include "fsm_tasks.h"
  51:Core/Src/main.c **** /* USER CODE END Includes */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  54:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PTD */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  59:Core/Src/main.c **** /* USER CODE BEGIN PD */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PD */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  64:Core/Src/main.c **** /* USER CODE BEGIN PM */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END PM */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE BEGIN PV */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* USER CODE END PV */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  75:Core/Src/main.c **** void SystemClock_Config(void);
  76:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END PFP */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  81:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  82:Core/Src/main.c **** extern struct pneumaticStr pneu_arr[4];
  83:Core/Src/main.c **** /* USER CODE END 0 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /**
  86:Core/Src/main.c ****   * @brief  The application entry point.
  87:Core/Src/main.c ****   * @retval int
  88:Core/Src/main.c ****   */
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 3


  89:Core/Src/main.c **** int main(void)
  90:Core/Src/main.c **** {
  91:Core/Src/main.c ****         /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****         uint32_t update_tick = HAL_GetTick();  
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****         /* USER
  97:Core/Src/main.c ****          CODE END 1 */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****         /* MCU Configuration----------------------------------------------------------*/
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****         /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 102:Core/Src/main.c ****         HAL_Init();
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****         /* USER CODE BEGIN Init */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****         /* USER CODE END Init */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****         /* Configure the system clock */
 109:Core/Src/main.c ****         SystemClock_Config();
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****         /* USER CODE BEGIN SysInit */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****         /* USER CODE END SysInit */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****         /* Initialize all configured peripherals */
 116:Core/Src/main.c ****         MX_GPIO_Init();
 117:Core/Src/main.c ****         MX_TIM8_Init();
 118:Core/Src/main.c ****         MX_TIM1_Init();
 119:Core/Src/main.c ****         MX_TIM3_Init();
 120:Core/Src/main.c ****         MX_TIM4_Init();
 121:Core/Src/main.c ****         MX_TIM2_Init();
 122:Core/Src/main.c ****         MX_USART3_UART_Init();
 123:Core/Src/main.c ****         MX_TIM5_Init();
 124:Core/Src/main.c ****         /* USER CODE BEGIN 2 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****         roboInit();
 127:Core/Src/main.c ****         enum FSM_States phase = HOME_POSITION;
 128:Core/Src/main.c ****         printf("WELCOME \n");
 129:Core/Src/main.c ****         
 130:Core/Src/main.c ****         // encoderInit();
 131:Core/Src/main.c ****         /* USER CODE END 2 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****         /* Infinite loop */
 134:Core/Src/main.c ****         /* USER CODE BEGIN WHILE */
 135:Core/Src/main.c ****         uint8_t switch_pressed = 0;
 136:Core/Src/main.c ****         setDutyCycle(&balance_motor, 65535);
 137:Core/Src/main.c ****         setDirection(&balance_motor, DIR_CLOCKWISE);
 138:Core/Src/main.c ****         while (1)
 139:Core/Src/main.c ****         {
 140:Core/Src/main.c ****                 if ((HAL_GetTick() - update_tick) > 10)
 141:Core/Src/main.c ****                 {
 142:Core/Src/main.c ****                         update_tick = HAL_GetTick();
 143:Core/Src/main.c ****                         getOmega(&balance_motor);
 144:Core/Src/main.c ****                         printf("%f", balance_motor.omega);
 145:Core/Src/main.c ****                 }
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 4


 146:Core/Src/main.c ****                 /*if(blnc_int_arr[2].fhome_pos == 1)
 147:Core/Src/main.c ****                 {
 148:Core/Src/main.c ****                         setDutyCycle(&balance_motor, 0);
 149:Core/Src/main.c ****                         setDirection(&balance_motor, DIR_BRAKE);
 150:Core/Src/main.c ****                 }
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****                 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && !switch_pressed)
 153:Core/Src/main.c ****                 {
 154:Core/Src/main.c ****                         switch_pressed = 1;
 155:Core/Src/main.c ****                         for (uint8_t i = 0; i < 0; i++)
 156:Core/Src/main.c ****                         {
 157:Core/Src/main.c ****                                 int_arr[i].intState = STATE_B;
 158:Core/Src/main.c ****                         }
 159:Core/Src/main.c ****                         phase = PHASE_1;
 160:Core/Src/main.c ****                         setPneumatic(&pneu_arr[0], SET_PNEU);
 161:Core/Src/main.c ****                 }
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****                 else if ((HAL_GetTick() - update_tick) > 10)
 164:Core/Src/main.c ****                 {
 165:Core/Src/main.c ****                         update_tick = HAL_GetTick();
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****                         startFSM(&fsm, &phase);
 168:Core/Src/main.c ****                         updateOmegas();        
 169:Core/Src/main.c ****                 }*/
 170:Core/Src/main.c ****                
 171:Core/Src/main.c ****                 /* USER CODE END WHILE */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****                 /* USER CODE BEGIN 3 */
 174:Core/Src/main.c ****         }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****         /* USER CODE END 3 */
 177:Core/Src/main.c **** }
 178:Core/Src/main.c **** 
 179:Core/Src/main.c **** /**
 180:Core/Src/main.c ****   * @brief System Clock Configuration
 181:Core/Src/main.c ****   * @retval None
 182:Core/Src/main.c ****   */
 183:Core/Src/main.c **** void SystemClock_Config(void)
 184:Core/Src/main.c **** {
  28              		.loc 1 184 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 80
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 95B0     		sub	sp, sp, #84
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 96
 185:Core/Src/main.c ****         RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  41              		.loc 1 185 0
  42 0004 3022     		movs	r2, #48
  43 0006 0021     		movs	r1, #0
  44 0008 08A8     		add	r0, sp, #32
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 5


  45 000a FFF7FEFF 		bl	memset
  46              	.LVL0:
 186:Core/Src/main.c ****         RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  47              		.loc 1 186 0
  48 000e 0024     		movs	r4, #0
  49 0010 0394     		str	r4, [sp, #12]
  50 0012 0494     		str	r4, [sp, #16]
  51 0014 0594     		str	r4, [sp, #20]
  52 0016 0694     		str	r4, [sp, #24]
  53 0018 0794     		str	r4, [sp, #28]
  54              	.LBB2:
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****         /**Configure the main internal regulator output voltage 
 189:Core/Src/main.c ****   */
 190:Core/Src/main.c ****         __HAL_RCC_PWR_CLK_ENABLE();
  55              		.loc 1 190 0
  56 001a 0194     		str	r4, [sp, #4]
  57 001c 1B4B     		ldr	r3, .L3
  58 001e 1A6C     		ldr	r2, [r3, #64]
  59 0020 42F08052 		orr	r2, r2, #268435456
  60 0024 1A64     		str	r2, [r3, #64]
  61 0026 1B6C     		ldr	r3, [r3, #64]
  62 0028 03F08053 		and	r3, r3, #268435456
  63 002c 0193     		str	r3, [sp, #4]
  64 002e 019B     		ldr	r3, [sp, #4]
  65              	.LBE2:
  66              	.LBB3:
 191:Core/Src/main.c ****         __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  67              		.loc 1 191 0
  68 0030 0294     		str	r4, [sp, #8]
  69 0032 174B     		ldr	r3, .L3+4
  70 0034 1A68     		ldr	r2, [r3]
  71 0036 42F48042 		orr	r2, r2, #16384
  72 003a 1A60     		str	r2, [r3]
  73 003c 1B68     		ldr	r3, [r3]
  74 003e 03F48043 		and	r3, r3, #16384
  75 0042 0293     		str	r3, [sp, #8]
  76 0044 029B     		ldr	r3, [sp, #8]
  77              	.LBE3:
 192:Core/Src/main.c ****         /**Initializes the CPU, AHB and APB busses clocks 
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c ****         RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  78              		.loc 1 194 0
  79 0046 0123     		movs	r3, #1
  80 0048 0893     		str	r3, [sp, #32]
 195:Core/Src/main.c ****         RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  81              		.loc 1 195 0
  82 004a 4FF48033 		mov	r3, #65536
  83 004e 0993     		str	r3, [sp, #36]
 196:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  84              		.loc 1 196 0
  85 0050 0225     		movs	r5, #2
  86 0052 0E95     		str	r5, [sp, #56]
 197:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  87              		.loc 1 197 0
  88 0054 4FF48003 		mov	r3, #4194304
  89 0058 0F93     		str	r3, [sp, #60]
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 6


 198:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLM = 4;
  90              		.loc 1 198 0
  91 005a 0423     		movs	r3, #4
  92 005c 1093     		str	r3, [sp, #64]
 199:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLN = 168;
  93              		.loc 1 199 0
  94 005e A822     		movs	r2, #168
  95 0060 1192     		str	r2, [sp, #68]
 200:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  96              		.loc 1 200 0
  97 0062 1295     		str	r5, [sp, #72]
 201:Core/Src/main.c ****         RCC_OscInitStruct.PLL.PLLQ = 4;
  98              		.loc 1 201 0
  99 0064 1393     		str	r3, [sp, #76]
 202:Core/Src/main.c ****         if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 100              		.loc 1 202 0
 101 0066 08A8     		add	r0, sp, #32
 102 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 103              	.LVL1:
 203:Core/Src/main.c ****         {
 204:Core/Src/main.c ****                 Error_Handler();
 205:Core/Src/main.c ****         }
 206:Core/Src/main.c ****         /**Initializes the CPU, AHB and APB busses clocks 
 207:Core/Src/main.c ****   */
 208:Core/Src/main.c ****         RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCL
 104              		.loc 1 208 0
 105 006c 0F23     		movs	r3, #15
 106 006e 0393     		str	r3, [sp, #12]
 209:Core/Src/main.c ****         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 107              		.loc 1 209 0
 108 0070 0495     		str	r5, [sp, #16]
 210:Core/Src/main.c ****         RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 109              		.loc 1 210 0
 110 0072 0594     		str	r4, [sp, #20]
 211:Core/Src/main.c ****         RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 111              		.loc 1 211 0
 112 0074 4FF4A053 		mov	r3, #5120
 113 0078 0693     		str	r3, [sp, #24]
 212:Core/Src/main.c ****         RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 114              		.loc 1 212 0
 115 007a 4FF48053 		mov	r3, #4096
 116 007e 0793     		str	r3, [sp, #28]
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****         if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 117              		.loc 1 214 0
 118 0080 0521     		movs	r1, #5
 119 0082 03A8     		add	r0, sp, #12
 120 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 121              	.LVL2:
 215:Core/Src/main.c ****         {
 216:Core/Src/main.c ****                 Error_Handler();
 217:Core/Src/main.c ****         }
 218:Core/Src/main.c **** }
 122              		.loc 1 218 0
 123 0088 15B0     		add	sp, sp, #84
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 7


 126              		@ sp needed
 127 008a 30BD     		pop	{r4, r5, pc}
 128              	.L4:
 129              		.align	2
 130              	.L3:
 131 008c 00380240 		.word	1073887232
 132 0090 00700040 		.word	1073770496
 133              		.cfi_endproc
 134              	.LFE127:
 136              		.global	__aeabi_f2d
 137              		.section	.text.main,"ax",%progbits
 138              		.align	1
 139              		.global	main
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	main:
 146              	.LFB126:
  90:Core/Src/main.c ****         /* USER CODE BEGIN 1 */
 147              		.loc 1 90 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151 0000 38B5     		push	{r3, r4, r5, lr}
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 16
 154              		.cfi_offset 3, -16
 155              		.cfi_offset 4, -12
 156              		.cfi_offset 5, -8
 157              		.cfi_offset 14, -4
  94:Core/Src/main.c **** 
 158              		.loc 1 94 0
 159 0002 FFF7FEFF 		bl	HAL_GetTick
 160              	.LVL3:
 161 0006 0446     		mov	r4, r0
 162              	.LVL4:
 102:Core/Src/main.c **** 
 163              		.loc 1 102 0
 164 0008 FFF7FEFF 		bl	HAL_Init
 165              	.LVL5:
 109:Core/Src/main.c **** 
 166              		.loc 1 109 0
 167 000c FFF7FEFF 		bl	SystemClock_Config
 168              	.LVL6:
 116:Core/Src/main.c ****         MX_TIM8_Init();
 169              		.loc 1 116 0
 170 0010 FFF7FEFF 		bl	MX_GPIO_Init
 171              	.LVL7:
 117:Core/Src/main.c ****         MX_TIM1_Init();
 172              		.loc 1 117 0
 173 0014 FFF7FEFF 		bl	MX_TIM8_Init
 174              	.LVL8:
 118:Core/Src/main.c ****         MX_TIM3_Init();
 175              		.loc 1 118 0
 176 0018 FFF7FEFF 		bl	MX_TIM1_Init
 177              	.LVL9:
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 8


 119:Core/Src/main.c ****         MX_TIM4_Init();
 178              		.loc 1 119 0
 179 001c FFF7FEFF 		bl	MX_TIM3_Init
 180              	.LVL10:
 120:Core/Src/main.c ****         MX_TIM2_Init();
 181              		.loc 1 120 0
 182 0020 FFF7FEFF 		bl	MX_TIM4_Init
 183              	.LVL11:
 121:Core/Src/main.c ****         MX_USART3_UART_Init();
 184              		.loc 1 121 0
 185 0024 FFF7FEFF 		bl	MX_TIM2_Init
 186              	.LVL12:
 122:Core/Src/main.c ****         MX_TIM5_Init();
 187              		.loc 1 122 0
 188 0028 FFF7FEFF 		bl	MX_USART3_UART_Init
 189              	.LVL13:
 123:Core/Src/main.c ****         /* USER CODE BEGIN 2 */
 190              		.loc 1 123 0
 191 002c FFF7FEFF 		bl	MX_TIM5_Init
 192              	.LVL14:
 126:Core/Src/main.c ****         enum FSM_States phase = HOME_POSITION;
 193              		.loc 1 126 0
 194 0030 FFF7FEFF 		bl	roboInit
 195              	.LVL15:
 128:Core/Src/main.c ****         
 196              		.loc 1 128 0
 197 0034 1048     		ldr	r0, .L9
 198 0036 FFF7FEFF 		bl	puts
 199              	.LVL16:
 136:Core/Src/main.c ****         setDirection(&balance_motor, DIR_CLOCKWISE);
 200              		.loc 1 136 0
 201 003a 104D     		ldr	r5, .L9+4
 202 003c 4FF6FF71 		movw	r1, #65535
 203 0040 2846     		mov	r0, r5
 204 0042 FFF7FEFF 		bl	setDutyCycle
 205              	.LVL17:
 137:Core/Src/main.c ****         while (1)
 206              		.loc 1 137 0
 207 0046 0021     		movs	r1, #0
 208 0048 2846     		mov	r0, r5
 209 004a FFF7FEFF 		bl	setDirection
 210              	.LVL18:
 211              	.L6:
 140:Core/Src/main.c ****                 {
 212              		.loc 1 140 0
 213 004e FFF7FEFF 		bl	HAL_GetTick
 214              	.LVL19:
 215 0052 001B     		subs	r0, r0, r4
 216 0054 0A28     		cmp	r0, #10
 217 0056 FAD9     		bls	.L6
 142:Core/Src/main.c ****                         getOmega(&balance_motor);
 218              		.loc 1 142 0
 219 0058 FFF7FEFF 		bl	HAL_GetTick
 220              	.LVL20:
 221 005c 0446     		mov	r4, r0
 222              	.LVL21:
 143:Core/Src/main.c ****                         printf("%f", balance_motor.omega);
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 9


 223              		.loc 1 143 0
 224 005e 074D     		ldr	r5, .L9+4
 225 0060 2846     		mov	r0, r5
 226              	.LVL22:
 227 0062 FFF7FEFF 		bl	getOmega
 228              	.LVL23:
 144:Core/Src/main.c ****                 }
 229              		.loc 1 144 0
 230 0066 2868     		ldr	r0, [r5]	@ float
 231 0068 FFF7FEFF 		bl	__aeabi_f2d
 232              	.LVL24:
 233 006c 0246     		mov	r2, r0
 234 006e 0B46     		mov	r3, r1
 235 0070 0348     		ldr	r0, .L9+8
 236 0072 FFF7FEFF 		bl	printf
 237              	.LVL25:
 238 0076 EAE7     		b	.L6
 239              	.L10:
 240              		.align	2
 241              	.L9:
 242 0078 00000000 		.word	.LC0
 243 007c 00000000 		.word	balance_motor
 244 0080 0C000000 		.word	.LC1
 245              		.cfi_endproc
 246              	.LFE126:
 248              		.section	.text.Error_Handler,"ax",%progbits
 249              		.align	1
 250              		.global	Error_Handler
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	Error_Handler:
 257              	.LFB128:
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /* USER CODE END 4 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /**
 225:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 226:Core/Src/main.c ****   * @retval None
 227:Core/Src/main.c ****   */
 228:Core/Src/main.c **** void Error_Handler(void)
 229:Core/Src/main.c **** {
 258              		.loc 1 229 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 230:Core/Src/main.c ****         /* USER CODE BEGIN Error_Handler_Debug */
 231:Core/Src/main.c ****         /* User can add his own implementation to report the HAL error return state */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****         /* USER CODE END Error_Handler_Debug */
 234:Core/Src/main.c **** }
 263              		.loc 1 234 0
 264 0000 7047     		bx	lr
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 10


 265              		.cfi_endproc
 266              	.LFE128:
 268              		.section	.text._Error_Handler,"ax",%progbits
 269              		.align	1
 270              		.global	_Error_Handler
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu fpv4-sp-d16
 276              	_Error_Handler:
 277              	.LFB129:
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** void _Error_Handler(const char *file, size_t line)
 237:Core/Src/main.c **** {
 278              		.loc 1 237 0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284              	.LVL26:
 285              	.L13:
 286 0000 FEE7     		b	.L13
 287              		.cfi_endproc
 288              	.LFE129:
 290              		.section	.text.assert_failed,"ax",%progbits
 291              		.align	1
 292              		.global	assert_failed
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	assert_failed:
 299              	.LFB130:
 238:Core/Src/main.c ****         /* USER CODE BEGIN Error_Handler_Debug */
 239:Core/Src/main.c ****         /* User can add his own implementation to report the HAL error return state */
 240:Core/Src/main.c ****         while (1)
 241:Core/Src/main.c ****         {
 242:Core/Src/main.c ****         }
 243:Core/Src/main.c ****         /* USER CODE END Error_Handler_Debug */
 244:Core/Src/main.c **** }
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** #ifdef USE_FULL_ASSERT
 247:Core/Src/main.c **** /**
 248:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 249:Core/Src/main.c ****   *         where the assert_param error has occurred.
 250:Core/Src/main.c ****   * @param  file: pointer to the source file name
 251:Core/Src/main.c ****   * @param  line: assert_param error line source number
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   * */
 254:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 255:Core/Src/main.c **** {
 300              		.loc 1 255 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 11


 305              	.LVL27:
 256:Core/Src/main.c ****         /* USER CODE BEGIN 6 */
 257:Core/Src/main.c ****         /* User can add his own implementation to report the file name and line number,
 258:Core/Src/main.c ****      tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 259:Core/Src/main.c ****         /* USER CODE END 6 */
 260:Core/Src/main.c **** }
 306              		.loc 1 260 0
 307 0000 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE130:
 311              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 312              		.align	2
 313              	.LC0:
 314 0000 57454C43 		.ascii	"WELCOME \000"
 314      4F4D4520 
 314      00
 315 0009 000000   		.space	3
 316              	.LC1:
 317 000c 256600   		.ascii	"%f\000"
 318              		.text
 319              	.Letext0:
 320              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 321              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 322              		.file 4 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Include/core_cm4.h"
 323              		.file 5 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Device/ST/STM32F4xx/Inclu
 324              		.file 6 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Device/ST/STM32F4xx/Inclu
 325              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 326              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 327              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 328              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 329              		.file 11 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 330              		.file 12 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 331              		.file 13 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 332              		.file 14 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 333              		.file 15 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 334              		.file 16 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 335              		.file 17 "Core/Inc\\periphs/tim.h"
 336              		.file 18 "Core/Inc\\periphs/usart.h"
 337              		.file 19 "Core/Inc/feed_forward.h"
 338              		.file 20 "Core/Inc/pneumatic.h"
 339              		.file 21 "Core/Inc/interrupt.h"
 340              		.file 22 "Core/Inc/encoder.h"
 341              		.file 23 "Core/Inc/motor.h"
 342              		.file 24 "Core/Inc/pid.h"
 343              		.file 25 "Core/Inc/fsm.h"
 344              		.file 26 "Core/Inc/robo_init.h"
 345              		.file 27 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 346              		.file 28 "Core/Inc\\periphs/gpio.h"
 347              		.file 29 "<built-in>"
 348              		.file 30 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:18     .text.SystemClock_Config:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:25     .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:131    .text.SystemClock_Config:0000008c $d
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:138    .text.main:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:145    .text.main:00000000 main
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:242    .text.main:00000078 $d
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:249    .text.Error_Handler:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:256    .text.Error_Handler:00000000 Error_Handler
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:269    .text._Error_Handler:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:276    .text._Error_Handler:00000000 _Error_Handler
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:291    .text.assert_failed:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:298    .text.assert_failed:00000000 assert_failed
C:\Users\Rishav\AppData\Local\Temp\ccVeBgca.s:312    .rodata.main.str1.4:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
HAL_GetTick
HAL_Init
MX_GPIO_Init
MX_TIM8_Init
MX_TIM1_Init
MX_TIM3_Init
MX_TIM4_Init
MX_TIM2_Init
MX_USART3_UART_Init
MX_TIM5_Init
roboInit
puts
setDutyCycle
setDirection
getOmega
printf
balance_motor
