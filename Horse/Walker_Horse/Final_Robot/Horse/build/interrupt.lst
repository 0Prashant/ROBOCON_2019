ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"interrupt.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_f2d
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_d2iz
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_dmul
  22              		.global	__aeabi_dadd
  23              		.global	__aeabi_d2f
  24              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
  25              		.align	1
  26              		.global	HAL_GPIO_EXTI_Callback
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  30              		.fpu fpv4-sp-d16
  32              	HAL_GPIO_EXTI_Callback:
  33              	.LFB492:
  34              		.file 1 "Core/Src/devs/interrupt.cpp"
   1:Core/Src/devs/interrupt.cpp **** 
   2:Core/Src/devs/interrupt.cpp **** #include "robo_init.h"
   3:Core/Src/devs/interrupt.cpp **** 
   4:Core/Src/devs/interrupt.cpp **** extern leg leg[2];
   5:Core/Src/devs/interrupt.cpp **** extern steering steering;
   6:Core/Src/devs/interrupt.cpp **** 
   7:Core/Src/devs/interrupt.cpp **** extern bool ROBOT_START_FLAG;
   8:Core/Src/devs/interrupt.cpp **** extern bool STEERING_FLAG;
   9:Core/Src/devs/interrupt.cpp **** extern bool FRONT_PROXIMITY_FLAG;
  10:Core/Src/devs/interrupt.cpp **** extern bool BACK_PROXIMITY_FLAG;
  11:Core/Src/devs/interrupt.cpp **** extern bool GEREGE_FLAG;
  12:Core/Src/devs/interrupt.cpp **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  13:Core/Src/devs/interrupt.cpp **** {
  35              		.loc 1 13 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              	.LVL0:
  40 0000 10B5     		push	{r4, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 4, -8
  44              		.cfi_offset 14, -4
  45              	.LBB28:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 2


  14:Core/Src/devs/interrupt.cpp ****         switch (GPIO_Pin) {
  46              		.loc 1 14 0
  47 0002 B0F5005F 		cmp	r0, #8192
  48 0006 00F09580 		beq	.L3
  49 000a 49D9     		bls	.L17
  50 000c B0F5804F 		cmp	r0, #16384
  51 0010 4CD0     		beq	.L6
  52 0012 B0F5004F 		cmp	r0, #32768
  53 0016 48D1     		bne	.L1
  54              	.LVL1:
  55              	.LBB29:
  56              	.LBB30:
  57              	.LBB31:
  58              	.LBB32:
  59              	.LBB33:
  60              		.file 2 "Core/Inc/devs/leg.h"
   1:Core/Inc/devs/leg.h **** #ifndef _LEG_H_
   2:Core/Inc/devs/leg.h **** #define _LEG_H_
   3:Core/Inc/devs/leg.h **** 
   4:Core/Inc/devs/leg.h **** #include "motor.h"
   5:Core/Inc/devs/leg.h **** #include "encoder.h"
   6:Core/Inc/devs/leg.h **** #include "pid.h"
   7:Core/Inc/devs/leg.h **** #include "limit_switch.h"
   8:Core/Inc/devs/leg.h **** #include "defines.h"
   9:Core/Inc/devs/leg.h **** #include "pid_algorithms.h"
  10:Core/Inc/devs/leg.h **** 
  11:Core/Inc/devs/leg.h **** enum Leg_condition{	RAISED, 
  12:Core/Inc/devs/leg.h **** 			FALLEN, 
  13:Core/Inc/devs/leg.h **** 			UNDEFINED};
  14:Core/Inc/devs/leg.h **** 
  15:Core/Inc/devs/leg.h **** class leg
  16:Core/Inc/devs/leg.h **** {
  17:Core/Inc/devs/leg.h **** public:
  18:Core/Inc/devs/leg.h **** 	leg() {}
  19:Core/Inc/devs/leg.h **** 	leg(leg &&) = default;
  20:Core/Inc/devs/leg.h **** 	leg(const leg &) = default;
  21:Core/Inc/devs/leg.h **** 	leg &operator=(leg &&) = default;
  22:Core/Inc/devs/leg.h **** 	leg &operator=(const leg &) = default;
  23:Core/Inc/devs/leg.h **** 	~leg(){}
  24:Core/Inc/devs/leg.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  25:Core/Inc/devs/leg.h **** 		motor__.set_config(motor);
  26:Core/Inc/devs/leg.h **** 		encoder__.set_config(encoder);
  27:Core/Inc/devs/leg.h **** 	}
  28:Core/Inc/devs/leg.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  29:Core/Inc/devs/leg.h **** 		dpid_.set_P(kp);
  30:Core/Inc/devs/leg.h **** 		dpid_.set_I(ki);
  31:Core/Inc/devs/leg.h **** 		dpid_.set_D(kd);
  32:Core/Inc/devs/leg.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  33:Core/Inc/devs/leg.h **** 	}
  34:Core/Inc/devs/leg.h **** 
  35:Core/Inc/devs/leg.h **** 	
  36:Core/Inc/devs/leg.h **** 	void set_omega(float omega);
  37:Core/Inc/devs/leg.h **** 	float ramp(float omega);
  38:Core/Inc/devs/leg.h **** 	void set_gravity_compensator_constant(float kgravity){kg_ = kgravity;}
  39:Core/Inc/devs/leg.h **** 	void reset_angle(float angle_in_radians);
  40:Core/Inc/devs/leg.h **** 	void reset_actual_angle(float angle_in_radians){encoder__.reset_actual_angle(angle_in_radians);}
  41:Core/Inc/devs/leg.h **** 	void calculate_omega();
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 3


  42:Core/Inc/devs/leg.h **** 	Leg_condition is_raised();
  43:Core/Inc/devs/leg.h **** 	bool is_raised_without_deadzone();
  44:Core/Inc/devs/leg.h **** 
  45:Core/Inc/devs/leg.h **** 	int get_steps(){return steps;}
  46:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
  47:Core/Inc/devs/leg.h **** 	float get_angle(void){return encoder__.get_angle();}
  61              		.loc 2 47 0
  62 0018 5148     		ldr	r0, .L18+24
  63              	.LVL2:
  64 001a FFF7FEFF 		bl	_ZN7encoder9get_angleEv
  65              	.LVL3:
  66              	.LBE33:
  67              	.LBE32:
  15:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_0 : {
  16:Core/Src/devs/interrupt.cpp **** 			ROBOT_START_FLAG = true;
  17:Core/Src/devs/interrupt.cpp **** 			// printf("\n\n\t\t\t !!start_pressed!!\n\n");
  18:Core/Src/devs/interrupt.cpp **** 		}break;
  19:Core/Src/devs/interrupt.cpp **** 
  20:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_15 : {
  21:Core/Src/devs/interrupt.cpp **** 			float leg0_reset_angle = 90*PI/180;
  22:Core/Src/devs/interrupt.cpp **** 			float tolerence = 20*PI/180;
  23:Core/Src/devs/interrupt.cpp **** 			if((leg[0].get_angle()>(leg0_reset_angle-tolerence)) && (leg[0].get_angle()<(leg0_reset_angle+to
  68              		.loc 1 23 0
  69 001e DFED517A 		vldr.32	s15, .L18+28
  70 0022 B4EEE70A 		vcmpe.f32	s0, s15
  71 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  72 002a 3EDD     		ble	.L1
  73              	.LVL4:
  74              	.LBB34:
  75              	.LBB35:
  76              		.loc 2 47 0
  77 002c 4C48     		ldr	r0, .L18+24
  78 002e FFF7FEFF 		bl	_ZN7encoder9get_angleEv
  79              	.LVL5:
  80              	.LBE35:
  81              	.LBE34:
  82              		.loc 1 23 0
  83 0032 DFED4D7A 		vldr.32	s15, .L18+32
  84 0036 B4EEE70A 		vcmpe.f32	s0, s15
  85 003a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  86 003e 34D5     		bpl	.L1
  87              	.LBB36:
  24:Core/Src/devs/interrupt.cpp ****                         	leg[0].reset_angle(leg0_reset_angle);
  88              		.loc 1 24 0
  89 0040 4A4C     		ldr	r4, .L18+36
  90 0042 9FED4B0A 		vldr.32	s0, .L18+40
  91 0046 2046     		mov	r0, r4
  92 0048 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
  93              	.LVL6:
  94              	.LBB37:
  95              	.LBB38:
  48:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
  96              		.loc 2 48 0
  97 004c 3C34     		adds	r4, r4, #60
  98 004e 2046     		mov	r0, r4
  99 0050 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 100              	.LVL7:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 4


 101              	.LBE38:
 102              	.LBE37:
  25:Core/Src/devs/interrupt.cpp **** 				int temp = round(leg[0].get_actual_angle()/ (360*PI/180));
 103              		.loc 1 25 0
 104 0054 10EE100A 		vmov	r0, s0
 105 0058 FFF7FEFF 		bl	__aeabi_f2d
 106              	.LVL8:
 107 005c 3AA3     		adr	r3, .L18
 108 005e D3E90023 		ldrd	r2, [r3]
 109 0062 FFF7FEFF 		bl	__aeabi_ddiv
 110              	.LVL9:
 111 0066 41EC100B 		vmov	d0, r0, r1
 112 006a FFF7FEFF 		bl	round
 113              	.LVL10:
 114 006e 51EC100B 		vmov	r0, r1, d0
 115 0072 FFF7FEFF 		bl	__aeabi_d2iz
 116              	.LVL11:
  26:Core/Src/devs/interrupt.cpp **** 				leg[0].reset_actual_angle((int)(temp)*2*PI + leg0_reset_angle);
 117              		.loc 1 26 0
 118 0076 4000     		lsls	r0, r0, #1
 119              	.LVL12:
 120 0078 FFF7FEFF 		bl	__aeabi_i2d
 121              	.LVL13:
 122 007c 34A3     		adr	r3, .L18+8
 123 007e D3E90023 		ldrd	r2, [r3]
 124 0082 FFF7FEFF 		bl	__aeabi_dmul
 125              	.LVL14:
 126 0086 34A3     		adr	r3, .L18+16
 127 0088 D3E90023 		ldrd	r2, [r3]
 128 008c FFF7FEFF 		bl	__aeabi_dadd
 129              	.LVL15:
 130 0090 FFF7FEFF 		bl	__aeabi_d2f
 131              	.LVL16:
 132              	.LBB39:
 133              	.LBB40:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 134              		.loc 2 40 0
 135 0094 00EE100A 		vmov	s0, r0
 136 0098 2046     		mov	r0, r4
 137              	.LVL17:
 138 009a FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 139              	.LVL18:
 140              	.LBE40:
 141              	.LBE39:
 142              	.LBE36:
 143 009e 04E0     		b	.L1
 144              	.LVL19:
 145              	.L17:
 146              	.LBE31:
 147              	.LBE30:
 148              	.LBE29:
  14:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_0 : {
 149              		.loc 1 14 0
 150 00a0 0128     		cmp	r0, #1
 151 00a2 02D1     		bne	.L1
 152              	.LBB54:
  16:Core/Src/devs/interrupt.cpp **** 			// printf("\n\n\t\t\t !!start_pressed!!\n\n");
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 5


 153              		.loc 1 16 0
 154 00a4 334B     		ldr	r3, .L18+44
 155 00a6 0122     		movs	r2, #1
 156 00a8 1A70     		strb	r2, [r3]
 157              	.LVL20:
 158              	.L1:
 159              	.LBE54:
 160              	.LBE28:
  27:Core/Src/devs/interrupt.cpp **** 			}
  28:Core/Src/devs/interrupt.cpp **** 			// printf("\n\n\t\t\tRobot interrupt0\t %d \t %d\n", leg[0].steps, temp);
  29:Core/Src/devs/interrupt.cpp ****                 } break;
  30:Core/Src/devs/interrupt.cpp **** 
  31:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_14: {
  32:Core/Src/devs/interrupt.cpp **** 			float leg1_reset_angle = 90*PI/180;
  33:Core/Src/devs/interrupt.cpp **** 			float tolerence = 20*PI/180;
  34:Core/Src/devs/interrupt.cpp **** 			if((leg[1].get_angle()>(leg1_reset_angle-tolerence)) && (leg[1].get_angle()<(leg1_reset_angle+to
  35:Core/Src/devs/interrupt.cpp ****                         	leg[1].reset_angle(leg1_reset_angle);
  36:Core/Src/devs/interrupt.cpp **** 				int temp = round(leg[1].get_actual_angle() / (360*PI/180));
  37:Core/Src/devs/interrupt.cpp **** 				leg[1].reset_actual_angle((int)(temp)*2*PI + leg1_reset_angle);
  38:Core/Src/devs/interrupt.cpp **** 			}
  39:Core/Src/devs/interrupt.cpp **** 			// printf("\n\n\t\t\tRobot interrupt1\t %d\n", leg[1].steps);
  40:Core/Src/devs/interrupt.cpp ****                 } break;
  41:Core/Src/devs/interrupt.cpp **** 
  42:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_13: {
  43:Core/Src/devs/interrupt.cpp **** 			STEERING_FLAG = true;
  44:Core/Src/devs/interrupt.cpp **** 			steering.reset_angle(0*PI/180);
  45:Core/Src/devs/interrupt.cpp **** 			//  printf("\n\n\t\t\tsteering interrupt \t\n");
  46:Core/Src/devs/interrupt.cpp ****                 } break;
  47:Core/Src/devs/interrupt.cpp **** 	
  48:Core/Src/devs/interrupt.cpp ****         }
  49:Core/Src/devs/interrupt.cpp **** }...
 161              		.loc 1 49 0
 162 00aa 10BD     		pop	{r4, pc}
 163              	.LVL21:
 164              	.L6:
 165              	.LBB56:
 166              	.LBB55:
 167              	.LBB41:
 168              	.LBB42:
 169              	.LBB43:
 170              	.LBB44:
  47:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
 171              		.loc 2 47 0
 172 00ac 3248     		ldr	r0, .L18+48
 173              	.LVL22:
 174 00ae FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 175              	.LVL23:
 176              	.LBE44:
 177              	.LBE43:
  34:Core/Src/devs/interrupt.cpp **** 			if((leg[1].get_angle()>(leg1_reset_angle-tolerence)) && (leg[1].get_angle()<(leg1_reset_angle+to
 178              		.loc 1 34 0
 179 00b2 DFED2C7A 		vldr.32	s15, .L18+28
 180 00b6 B4EEE70A 		vcmpe.f32	s0, s15
 181 00ba F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 182 00be F4DD     		ble	.L1
 183              	.LVL24:
 184              	.LBB45:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 6


 185              	.LBB46:
  47:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
 186              		.loc 2 47 0
 187 00c0 2D48     		ldr	r0, .L18+48
 188 00c2 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 189              	.LVL25:
 190              	.LBE46:
 191              	.LBE45:
  34:Core/Src/devs/interrupt.cpp **** 			if((leg[1].get_angle()>(leg1_reset_angle-tolerence)) && (leg[1].get_angle()<(leg1_reset_angle+to
 192              		.loc 1 34 0
 193 00c6 DFED287A 		vldr.32	s15, .L18+32
 194 00ca B4EEE70A 		vcmpe.f32	s0, s15
 195 00ce F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 196 00d2 EAD5     		bpl	.L1
 197              	.LBB47:
  35:Core/Src/devs/interrupt.cpp ****                         	leg[1].reset_angle(leg1_reset_angle);
 198              		.loc 1 35 0
 199 00d4 294C     		ldr	r4, .L18+52
 200 00d6 9FED260A 		vldr.32	s0, .L18+40
 201 00da 2046     		mov	r0, r4
 202 00dc FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 203              	.LVL26:
 204              	.LBB48:
 205              	.LBB49:
 206              		.loc 2 48 0
 207 00e0 3C34     		adds	r4, r4, #60
 208              	.LVL27:
 209 00e2 2046     		mov	r0, r4
 210 00e4 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 211              	.LVL28:
 212              	.LBE49:
 213              	.LBE48:
  36:Core/Src/devs/interrupt.cpp **** 				int temp = round(leg[1].get_actual_angle() / (360*PI/180));
 214              		.loc 1 36 0
 215 00e8 10EE100A 		vmov	r0, s0
 216 00ec FFF7FEFF 		bl	__aeabi_f2d
 217              	.LVL29:
 218 00f0 15A3     		adr	r3, .L18
 219 00f2 D3E90023 		ldrd	r2, [r3]
 220 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 221              	.LVL30:
 222 00fa 41EC100B 		vmov	d0, r0, r1
 223 00fe FFF7FEFF 		bl	round
 224              	.LVL31:
 225 0102 51EC100B 		vmov	r0, r1, d0
 226 0106 FFF7FEFF 		bl	__aeabi_d2iz
 227              	.LVL32:
  37:Core/Src/devs/interrupt.cpp **** 				leg[1].reset_actual_angle((int)(temp)*2*PI + leg1_reset_angle);
 228              		.loc 1 37 0
 229 010a 4000     		lsls	r0, r0, #1
 230              	.LVL33:
 231 010c FFF7FEFF 		bl	__aeabi_i2d
 232              	.LVL34:
 233 0110 0FA3     		adr	r3, .L18+8
 234 0112 D3E90023 		ldrd	r2, [r3]
 235 0116 FFF7FEFF 		bl	__aeabi_dmul
 236              	.LVL35:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 7


 237 011a 0FA3     		adr	r3, .L18+16
 238 011c D3E90023 		ldrd	r2, [r3]
 239 0120 FFF7FEFF 		bl	__aeabi_dadd
 240              	.LVL36:
 241 0124 FFF7FEFF 		bl	__aeabi_d2f
 242              	.LVL37:
 243              	.LBB50:
 244              	.LBB51:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 245              		.loc 2 40 0
 246 0128 00EE100A 		vmov	s0, r0
 247 012c 2046     		mov	r0, r4
 248              	.LVL38:
 249 012e FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 250              	.LVL39:
 251              	.LBE51:
 252              	.LBE50:
 253              	.LBE47:
 254 0132 BAE7     		b	.L1
 255              	.LVL40:
 256              	.L3:
 257              	.LBE42:
 258              	.LBE41:
  43:Core/Src/devs/interrupt.cpp **** 			STEERING_FLAG = true;
 259              		.loc 1 43 0
 260 0134 124B     		ldr	r3, .L18+56
 261 0136 0122     		movs	r2, #1
 262 0138 1A70     		strb	r2, [r3]
 263              	.LVL41:
 264              	.LBB52:
 265              	.LBB53:
 266              		.file 3 "Core/Inc/devs/steering.h"
   1:Core/Inc/devs/steering.h **** /**
   2:Core/Inc/devs/steering.h ****  * steering.h
   3:Core/Inc/devs/steering.h ****  *
   4:Core/Inc/devs/steering.h ****  * \brief Provide control over steering of the horse
   5:Core/Inc/devs/steering.h ****  *
   6:Core/Inc/devs/steering.h ****  * This file is meant as an wrapper to the elements in the encoder. 
   7:Core/Inc/devs/steering.h ****  * It uses the functions of other headers (ie motor.h, encoder.h, 
   8:Core/Inc/devs/steering.h ****  * limit_switch.h and pid.h tocontrol all the functions available 
   9:Core/Inc/devs/steering.h ****  * in the steering.
  10:Core/Inc/devs/steering.h ****  *
  11:Core/Inc/devs/steering.h ****  * \author 	$Author 	: Prashant_Bhatta
  12:Core/Inc/devs/steering.h ****  * \date 	$Date		: 2005/04/14 14:16:20 $
  13:Core/Inc/devs/steering.h ****  * \contact	$Contact	: 073bex425.prashant@pcampus.edu.np
  14:Core/Inc/devs/steering.h ****  *
  15:Core/Inc/devs/steering.h ****  */
  16:Core/Inc/devs/steering.h **** #ifndef _STEERING_H_
  17:Core/Inc/devs/steering.h **** #define _STEERING_H_
  18:Core/Inc/devs/steering.h **** 
  19:Core/Inc/devs/steering.h **** #include "motor.h"
  20:Core/Inc/devs/steering.h **** #include "encoder.h"
  21:Core/Inc/devs/steering.h **** #include "pid.h"
  22:Core/Inc/devs/steering.h **** #include "limit_switch.h"
  23:Core/Inc/devs/steering.h **** 
  24:Core/Inc/devs/steering.h **** class steering
  25:Core/Inc/devs/steering.h **** {
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 8


  26:Core/Inc/devs/steering.h **** public:
  27:Core/Inc/devs/steering.h **** 	/// These lines of codes are just for protection of random defination of the objects.
  28:Core/Inc/devs/steering.h **** 	steering(){}
  29:Core/Inc/devs/steering.h **** 	steering(steering &&) = default;
  30:Core/Inc/devs/steering.h **** 	steering(const steering &) = default;
  31:Core/Inc/devs/steering.h **** 	steering &operator=(steering &&) = default;
  32:Core/Inc/devs/steering.h **** 	steering &operator=(const steering &) = default;
  33:Core/Inc/devs/steering.h **** 	~steering(){}
  34:Core/Inc/devs/steering.h **** 
  35:Core/Inc/devs/steering.h **** 	/**
  36:Core/Inc/devs/steering.h **** 	 * \brief This function setups the configurations for the steering
  37:Core/Inc/devs/steering.h **** 	 * \param motor: pointer to motor_config which contains all the 
  38:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor
  39:Core/Inc/devs/steering.h **** 	 * \param encoder: pointer to encoder_config which contains all the 
  40:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor  
  41:Core/Inc/devs/steering.h **** 	 * \return void
  42:Core/Inc/devs/steering.h **** 	 */
  43:Core/Inc/devs/steering.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  44:Core/Inc/devs/steering.h **** 		motor__.set_config(motor);
  45:Core/Inc/devs/steering.h **** 		encoder__.set_config(encoder);
  46:Core/Inc/devs/steering.h **** 	}
  47:Core/Inc/devs/steering.h **** 
  48:Core/Inc/devs/steering.h **** 	/**
  49:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for PID algorithm
  50:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for PID
  51:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  52:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  53:Core/Inc/devs/steering.h **** 	 * \return void
  54:Core/Inc/devs/steering.h **** 	 */
  55:Core/Inc/devs/steering.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  56:Core/Inc/devs/steering.h **** 		dpid_.set_P(kp);
  57:Core/Inc/devs/steering.h **** 		dpid_.set_I(ki);
  58:Core/Inc/devs/steering.h **** 		dpid_.set_D(kd);
  59:Core/Inc/devs/steering.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  60:Core/Inc/devs/steering.h **** 	}
  61:Core/Inc/devs/steering.h **** 
  62:Core/Inc/devs/steering.h **** 	/**
  63:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for Angle_PID algorithm
  64:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for Anggle_PID
  65:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  66:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  67:Core/Inc/devs/steering.h **** 	 * \return void
  68:Core/Inc/devs/steering.h **** 	 */
  69:Core/Inc/devs/steering.h **** 	void set_angle_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  70:Core/Inc/devs/steering.h **** 		apid_.set_P(kp);
  71:Core/Inc/devs/steering.h **** 		apid_.set_I(ki);
  72:Core/Inc/devs/steering.h **** 		apid_.set_D(kd);
  73:Core/Inc/devs/steering.h **** 		apid_.set_Limits(upper_limit, lower_limit);
  74:Core/Inc/devs/steering.h **** 	}
  75:Core/Inc/devs/steering.h **** 
  76:Core/Inc/devs/steering.h **** 
  77:Core/Inc/devs/steering.h **** 	/** 
  78:Core/Inc/devs/steering.h **** 	 * \brief sets omega for the steering
  79:Core/Inc/devs/steering.h **** 	 * 
  80:Core/Inc/devs/steering.h **** 	 */
  81:Core/Inc/devs/steering.h **** 	void set_omega(float omega);
  82:Core/Inc/devs/steering.h **** 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 9


  83:Core/Inc/devs/steering.h **** 	/** 
  84:Core/Inc/devs/steering.h **** 	 * \brief sets angle for the steering
  85:Core/Inc/devs/steering.h **** 	 * 
  86:Core/Inc/devs/steering.h **** 	 */
  87:Core/Inc/devs/steering.h **** 	void set_angle(float angle);
  88:Core/Inc/devs/steering.h **** 
  89:Core/Inc/devs/steering.h **** 	/**
  90:Core/Inc/devs/steering.h **** 	 * \brief resets the angle provided by the encoder
  91:Core/Inc/devs/steering.h **** 	 * \param angle_in_radian at which it is to be reset
  92:Core/Inc/devs/steering.h **** 	 * \return void
  93:Core/Inc/devs/steering.h **** 	 */
  94:Core/Inc/devs/steering.h **** 	void reset_angle(float angle_in_radians) {encoder__.reset_angle(angle_in_radians);}
 267              		.loc 3 94 0
 268 013a 9FED120A 		vldr.32	s0, .L18+60
 269 013e 1248     		ldr	r0, .L18+64
 270              	.LVL42:
 271 0140 FFF7FEFF 		bl	_ZN7encoder11reset_angleEf
 272              	.LVL43:
 273              	.LBE53:
 274              	.LBE52:
 275              	.LBE55:
 276              	.LBE56:
 277              		.loc 1 49 0
 278 0144 B1E7     		b	.L1
 279              	.L19:
 280 0146 00BF     		.align	3
 281              	.L18:
 282 0148 182D4454 		.word	1413754136
 283 014c FB211940 		.word	1075388923
 284 0150 182D4454 		.word	1413754136
 285 0154 FB210940 		.word	1074340347
 286 0158 00000060 		.word	1610612736
 287 015c FB21F93F 		.word	1073291771
 288 0160 3C000000 		.word	leg+60
 289 0164 AA619C3F 		.word	1067213226
 290 0168 0CBEF53F 		.word	1073069580
 291 016c 00000000 		.word	leg
 292 0170 DB0FC93F 		.word	1070141403
 293 0174 00000000 		.word	ROBOT_START_FLAG
 294 0178 94000000 		.word	leg+148
 295 017c 58000000 		.word	leg+88
 296 0180 00000000 		.word	STEERING_FLAG
 297 0184 00000000 		.word	0
 298 0188 0C000000 		.word	steering+12
 299              		.cfi_endproc
 300              	.LFE492:
 302              		.text
 303              	.Letext0:
 304              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 305              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 306              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 307              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 308              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 309              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 310              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 311              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 312              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 10


 313              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 314              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 315              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 316              		.file 16 "Core/Inc/periphs/tim.h"
 317              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 318              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 319              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 320              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 321              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 322              		.file 22 "Core/Inc/devs/motor.h"
 323              		.file 23 "Core/Inc/devs/encoder.h"
 324              		.file 24 "Core/Inc/utils/pid_algorithms.h"
 325              		.file 25 "Core/Inc/devs/limit_switch.h"
 326              		.file 26 "<built-in>"
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 interrupt.cpp
C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s:25     .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s:32     .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\Users\Prashant\AppData\Local\Temp\ccb9Qhqh.s:282    .text.HAL_GPIO_EXTI_Callback:00000148 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
_ZN7encoder9get_angleEv
_ZN3leg11reset_angleEf
_ZN7encoder16get_actual_angleEv
round
_ZN7encoder18reset_actual_angleEf
_ZN7encoder11reset_angleEf
leg
ROBOT_START_FLAG
STEERING_FLAG
steering
