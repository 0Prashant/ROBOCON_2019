ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"robot_functions.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN4Vec3IfED2Ev,"axG",%progbits,_ZN4Vec3IfED5Ev,comdat
  18              		.align	1
  19              		.weak	_ZN4Vec3IfED2Ev
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_ZN4Vec3IfED2Ev:
  26              	.LFB509:
  27              		.file 1 "Core/Inc/utils/vec3.h"
   1:Core/Inc/utils/vec3.h **** /*
   2:Core/Inc/utils/vec3.h ****  * vec3.h
   3:Core/Inc/utils/vec3.h ****  * 
   4:Core/Inc/utils/vec3.h ****  * Created : 11/9/2018
   5:Core/Inc/utils/vec3.h ****  *  Author : n-is
   6:Core/Inc/utils/vec3.h ****  *   email : 073bex422.nischal@pcampus.edu.np
   7:Core/Inc/utils/vec3.h ****  */
   8:Core/Inc/utils/vec3.h **** 
   9:Core/Inc/utils/vec3.h **** #ifndef _VEC3_H_
  10:Core/Inc/utils/vec3.h **** #define _VEC3_H_
  11:Core/Inc/utils/vec3.h **** 
  12:Core/Inc/utils/vec3.h **** #include "stm32f4xx_hal.h"
  13:Core/Inc/utils/vec3.h **** #include "main.h"
  14:Core/Inc/utils/vec3.h **** 
  15:Core/Inc/utils/vec3.h **** template <typename T>
  16:Core/Inc/utils/vec3.h **** void swap_Element(T &first, T &second)
  17:Core/Inc/utils/vec3.h **** {
  18:Core/Inc/utils/vec3.h ****         T temp = first;
  19:Core/Inc/utils/vec3.h ****         first = second;
  20:Core/Inc/utils/vec3.h ****         second = temp;
  21:Core/Inc/utils/vec3.h **** }
  22:Core/Inc/utils/vec3.h **** 
  23:Core/Inc/utils/vec3.h **** template <class T>
  24:Core/Inc/utils/vec3.h **** class Vec3
  25:Core/Inc/utils/vec3.h **** {
  26:Core/Inc/utils/vec3.h **** public:
  27:Core/Inc/utils/vec3.h ****         Vec3() { set_Values(0,0,0); }
  28:Core/Inc/utils/vec3.h ****         Vec3(T x, T y, T z) { set_Values(x,y,z); }
  29:Core/Inc/utils/vec3.h **** 
  30:Core/Inc/utils/vec3.h ****         Vec3(Vec3 &&) = default;
  31:Core/Inc/utils/vec3.h ****         Vec3 &operator=(Vec3 &&) = default;
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 2


  32:Core/Inc/utils/vec3.h ****         ~Vec3() { }
  28              		.loc 1 32 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.loc 1 32 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE509:
  39              		.weak	_ZN4Vec3IfED1Ev
  40              		.thumb_set _ZN4Vec3IfED1Ev,_ZN4Vec3IfED2Ev
  41              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
  42              		.align	1
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv4-sp-d16
  48              	_Z41__static_initialization_and_destruction_0ii:
  49              	.LFB515:
  50              		.file 2 "Core/Src/robot/robot_functions.cpp"
   1:Core/Src/robot/robot_functions.cpp **** #include "robot_functions.h"
   2:Core/Src/robot/robot_functions.cpp **** 
   3:Core/Src/robot/robot_functions.cpp **** extern leg leg[2];
   4:Core/Src/robot/robot_functions.cpp **** extern steering steering;
   5:Core/Src/robot/robot_functions.cpp **** extern bool USE_IMU_FLAG;
   6:Core/Src/robot/robot_functions.cpp **** Vec3<float> initial_angle;
   7:Core/Src/robot/robot_functions.cpp **** Vec3<float> curr_angle;
   8:Core/Src/robot/robot_functions.cpp **** 
   9:Core/Src/robot/robot_functions.cpp **** static const float robot_speed = 6;      //17 is the maximum with safe zone
  10:Core/Src/robot/robot_functions.cpp **** static const float steering_speed = 0.8; // 0.875 is the 100%
  11:Core/Src/robot/robot_functions.cpp **** static const float steering_angle_limit = 8 * PI / 180;
  12:Core/Src/robot/robot_functions.cpp **** 
  13:Core/Src/robot/robot_functions.cpp **** extern float steps[7];
  14:Core/Src/robot/robot_functions.cpp **** extern float angles[7];
  15:Core/Src/robot/robot_functions.cpp **** float summation_angle = 0;
  16:Core/Src/robot/robot_functions.cpp **** uint32_t start_time;
  17:Core/Src/robot/robot_functions.cpp **** 
  18:Core/Src/robot/robot_functions.cpp **** bool STEERING_FLAG = false;
  19:Core/Src/robot/robot_functions.cpp **** 
  20:Core/Src/robot/robot_functions.cpp **** float robot_angle = 0, temp_robot_angle = 0;
  21:Core/Src/robot/robot_functions.cpp **** float tolerance = 3 * PI / 180;
  22:Core/Src/robot/robot_functions.cpp **** 
  23:Core/Src/robot/robot_functions.cpp **** /*
  24:Core/Src/robot/robot_functions.cpp ****  * \brief This function makes the robot to reach the provided steps and angle.
  25:Core/Src/robot/robot_functions.cpp ****  * \brief this function needs to be called every 10 ms unti it reaches the desired position.
  26:Core/Src/robot/robot_functions.cpp ****  * \params: number of steps and angle in degree the robot has to reach.
  27:Core/Src/robot/robot_functions.cpp ****  * \returns true if robot reaches to the provided steps and angle.
  28:Core/Src/robot/robot_functions.cpp ****  * The angles that are caalibrated in degrees needs to be converted to radian.
  29:Core/Src/robot/robot_functions.cpp ****  * The function move_leg() is called at the beginning which moves the leg upto the desired point.
  30:Core/Src/robot/robot_functions.cpp ****  * There are two parameters inside this function move_leg(), the steps parameter is used whereas th
  31:Core/Src/robot/robot_functions.cpp ****  * The condition is if statement is to ensure that the robot is not in sand dune and it has not rea
  32:Core/Src/robot/robot_functions.cpp ****  * Whenever the robot reaches the sand dune the number of steps is declared to 100, so the step != 
  33:Core/Src/robot/robot_functions.cpp ****  * The function calculate_robot_angle() calculates its relative position from the initial state and
  34:Core/Src/robot/robot_functions.cpp ****  * This function operates until the desired steps and desired angles is reached. This is ensured by
  35:Core/Src/robot/robot_functions.cpp ****  * After the desired step and angle is reached, the function returns True.
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 3


  36:Core/Src/robot/robot_functions.cpp **** */
  37:Core/Src/robot/robot_functions.cpp **** bool go(int step, float angle)
  38:Core/Src/robot/robot_functions.cpp **** {
  39:Core/Src/robot/robot_functions.cpp **** 	angle *= PI / 180;
  40:Core/Src/robot/robot_functions.cpp **** 	move_leg(step, angle);
  41:Core/Src/robot/robot_functions.cpp **** 	if ((step == 100))
  42:Core/Src/robot/robot_functions.cpp **** 	{
  43:Core/Src/robot/robot_functions.cpp **** 		
  44:Core/Src/robot/robot_functions.cpp **** 		USE_IMU_FLAG = false;
  45:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(0);
  46:Core/Src/robot/robot_functions.cpp **** 	}
  47:Core/Src/robot/robot_functions.cpp **** 	else
  48:Core/Src/robot/robot_functions.cpp **** 	{
  49:Core/Src/robot/robot_functions.cpp **** 		move_steering(step, angle);
  50:Core/Src/robot/robot_functions.cpp **** 	}
  51:Core/Src/robot/robot_functions.cpp **** 	// printf(" steps = %d\t robot_angle = %d\t curr_angle = %d\t", (int)(leg[0].get_steps()), (int)(r
  52:Core/Src/robot/robot_functions.cpp **** 	printf(" steps = %d\t robot_angle = %d\t leg_1_angle = %d\t leg_2_angle = %d", (int)(leg[0].get_st
  53:Core/Src/robot/robot_functions.cpp **** 	       (int)(robot_angle * 180 / PI), (int)(leg[0].get_actual_angle() * 180 / PI), (int)(leg[1].ge
  54:Core/Src/robot/robot_functions.cpp **** 
  55:Core/Src/robot/robot_functions.cpp **** 	// if ((leg[0].get_steps()   >= step) && (fabs(angle - robot_angle) <= 0.1))
  56:Core/Src/robot/robot_functions.cpp **** 	if (leg[0].get_steps() >= step)
  57:Core/Src/robot/robot_functions.cpp **** 	{
  58:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(0);
  59:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
  60:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
  61:Core/Src/robot/robot_functions.cpp **** 		return true;
  62:Core/Src/robot/robot_functions.cpp **** 	}
  63:Core/Src/robot/robot_functions.cpp **** 	else
  64:Core/Src/robot/robot_functions.cpp **** 	{
  65:Core/Src/robot/robot_functions.cpp **** 		return false;
  66:Core/Src/robot/robot_functions.cpp **** 	}
  67:Core/Src/robot/robot_functions.cpp **** }
  68:Core/Src/robot/robot_functions.cpp **** /*
  69:Core/Src/robot/robot_functions.cpp ****  *The function move_leg() is the basic function to give speed to the motor.
  70:Core/Src/robot/robot_functions.cpp ****  *\return params: void
  71:Core/Src/robot/robot_functions.cpp ****  *\input parameter: steps, angle
  72:Core/Src/robot/robot_functions.cpp ****  *This function takes two input parameters: step and angle. Although the parameter angle is not use
  73:Core/Src/robot/robot_functions.cpp ****  *The variable leg_speed stores the value of speed. When the robot is in sand_dune region, the spee
  74:Core/Src/robot/robot_functions.cpp ****  *The variable del_speed stores the value of difference in speed in case where the legs are not in 
  75:Core/Src/robot/robot_functions.cpp ****  *If the legs are not in 180 degrees phase difference, some calculations need to be made in order t
  76:Core/Src/robot/robot_functions.cpp ****  *This is done by evaluating the angles every time. Whenever the returned angle is not in the desir
  77:Core/Src/robot/robot_functions.cpp ****  *difference is the two leg angles multiplied by leg_speed which is again multiplied by the factor 
  78:Core/Src/robot/robot_functions.cpp ****  *Following the above reference, the leg_speed is calculated in closed loop basis.
  79:Core/Src/robot/robot_functions.cpp **** */
  80:Core/Src/robot/robot_functions.cpp **** void move_leg(int step, float angle)
  81:Core/Src/robot/robot_functions.cpp **** {
  82:Core/Src/robot/robot_functions.cpp **** 	float del_speed = 0;
  83:Core/Src/robot/robot_functions.cpp **** 	float leg_speed = robot_speed;
  84:Core/Src/robot/robot_functions.cpp **** 
  85:Core/Src/robot/robot_functions.cpp **** 	//Setting the slow speed in sand dune and tussok
  86:Core/Src/robot/robot_functions.cpp **** 	leg_speed = ((step==100)||(step== (int)steps[6])) ? 4.3 : robot_speed;
  87:Core/Src/robot/robot_functions.cpp **** 
  88:Core/Src/robot/robot_functions.cpp **** 	leg_speed = motion_profile(leg[0].get_angle() * 180 / PI, 1, leg_speed);
  89:Core/Src/robot/robot_functions.cpp **** 
  90:Core/Src/robot/robot_functions.cpp **** 	del_speed = 3 * (leg[0].get_actual_angle() - leg[1].get_actual_angle()) * leg_speed;
  91:Core/Src/robot/robot_functions.cpp **** 	if (fabs(del_speed) >= leg_speed)
  92:Core/Src/robot/robot_functions.cpp **** 	{
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 4


  93:Core/Src/robot/robot_functions.cpp **** 		del_speed /= fabs(del_speed);
  94:Core/Src/robot/robot_functions.cpp **** 		del_speed *= leg_speed;
  95:Core/Src/robot/robot_functions.cpp **** 	}
  96:Core/Src/robot/robot_functions.cpp **** 	leg[0].set_omega(leg_speed - del_speed);
  97:Core/Src/robot/robot_functions.cpp **** 	leg[1].set_omega(leg_speed + del_speed);
  98:Core/Src/robot/robot_functions.cpp **** }
  99:Core/Src/robot/robot_functions.cpp **** 
 100:Core/Src/robot/robot_functions.cpp **** /*
 101:Core/Src/robot/robot_functions.cpp ****  *The function move_steering() is concerned with moving the steering to certain angle with certain 
 102:Core/Src/robot/robot_functions.cpp ****  *Return patameter: void
 103:Core/Src/robot/robot_functions.cpp ****  *Input parameters: step, angle
 104:Core/Src/robot/robot_functions.cpp ****  *During initialization, the summation_angle is set to 0. After the robot starts to move, there is 
 105:Core/Src/robot/robot_functions.cpp ****  * This error of course needs to be minimized. This minimization is done by  summing all the drifts
 106:Core/Src/robot/robot_functions.cpp ****  * that it gives to the robot. Whenever the steering sets the angle for robot, this error is also a
 107:Core/Src/robot/robot_functions.cpp ****  * The robot changes the angle whenever the outside leg is raised. For the robot and leg to be in t
 108:Core/Src/robot/robot_functions.cpp ****  * the outside leg is in fallen state.
 109:Core/Src/robot/robot_functions.cpp **** */
 110:Core/Src/robot/robot_functions.cpp **** void move_steering(int step, float angle)
 111:Core/Src/robot/robot_functions.cpp **** {
 112:Core/Src/robot/robot_functions.cpp **** 	// if ((step == steps[0]) && (leg[0].is_raised() != Leg_condition::RAISED)) 
 113:Core/Src/robot/robot_functions.cpp **** 	if (step == steps[0])
 114:Core/Src/robot/robot_functions.cpp **** 	{
 115:Core/Src/robot/robot_functions.cpp **** 		summation_angle += 1.3*robot_angle;
 116:Core/Src/robot/robot_functions.cpp **** 		angle = -summation_angle;
 117:Core/Src/robot/robot_functions.cpp **** 		angle /= 100;
 118:Core/Src/robot/robot_functions.cpp **** 	}
 119:Core/Src/robot/robot_functions.cpp **** 	if (leg[0].is_raised() == Leg_condition::RAISED)
 120:Core/Src/robot/robot_functions.cpp **** 	{
 121:Core/Src/robot/robot_functions.cpp **** 		// printf("  raised  ");
 122:Core/Src/robot/robot_functions.cpp **** 		set_angle(angle);
 123:Core/Src/robot/robot_functions.cpp **** 	}
 124:Core/Src/robot/robot_functions.cpp **** 	else if (leg[0].is_raised() == Leg_condition::FALLEN)
 125:Core/Src/robot/robot_functions.cpp **** 	{
 126:Core/Src/robot/robot_functions.cpp **** 		// printf("  fallen  ");
 127:Core/Src/robot/robot_functions.cpp **** 		correct_steering_angle(angle);
 128:Core/Src/robot/robot_functions.cpp **** 	}
 129:Core/Src/robot/robot_functions.cpp **** 	else
 130:Core/Src/robot/robot_functions.cpp **** 	{
 131:Core/Src/robot/robot_functions.cpp **** 		// printf("  nothing  ");
 132:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 133:Core/Src/robot/robot_functions.cpp **** 	}
 134:Core/Src/robot/robot_functions.cpp **** }
 135:Core/Src/robot/robot_functions.cpp **** /*
 136:Core/Src/robot/robot_functions.cpp ****  * The function set_angle() is concerned with setting the angle for steering.
 137:Core/Src/robot/robot_functions.cpp ****  * Return params : void
 138:Core/Src/robot/robot_functions.cpp ****  * Input patams : angle
 139:Core/Src/robot/robot_functions.cpp ****  * The variable del_angle stores the differnece in given input angle and the current angle returned
 140:Core/Src/robot/robot_functions.cpp ****  * If this del_angle returns positive value, it depicts that the robot has already reached the angl
 141:Core/Src/robot/robot_functions.cpp ****  * TO correct this to the desired angle the angle needs to be set.
 142:Core/Src/robot/robot_functions.cpp ****  * If this del_angle returns a negative value, it depicts that the robot has not reached the desire
 143:Core/Src/robot/robot_functions.cpp **** */
 144:Core/Src/robot/robot_functions.cpp **** void set_angle(float angle)
 145:Core/Src/robot/robot_functions.cpp **** {
 146:Core/Src/robot/robot_functions.cpp **** 	float del_angle = (angle - robot_angle) * 180 / PI;
 147:Core/Src/robot/robot_functions.cpp **** 	// printf("\tdel_angle = %d\t", (int)(del_angle));
 148:Core/Src/robot/robot_functions.cpp **** 	if(abs(del_angle) >= 0.5){
 149:Core/Src/robot/robot_functions.cpp **** 		if (del_angle >= 0)
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 5


 150:Core/Src/robot/robot_functions.cpp **** 		{
 151:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle > (steering_angle_limit * 180 / PI)) ? (steering_angle_limit * 180
 152:Core/Src/robot/robot_functions.cpp **** 		}
 153:Core/Src/robot/robot_functions.cpp **** 		else
 154:Core/Src/robot/robot_functions.cpp **** 		{
 155:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle < -(steering_angle_limit * 180 / PI)) ? -(steering_angle_limit * 1
 156:Core/Src/robot/robot_functions.cpp **** 		}
 157:Core/Src/robot/robot_functions.cpp **** 	}
 158:Core/Src/robot/robot_functions.cpp **** 	//*/
 159:Core/Src/robot/robot_functions.cpp **** }
 160:Core/Src/robot/robot_functions.cpp **** /*
 161:Core/Src/robot/robot_functions.cpp ****  * This function correct_steering_angle() is called whenever the outside leg is fallen and the stee
 162:Core/Src/robot/robot_functions.cpp ****  * return param: void
 163:Core/Src/robot/robot_functions.cpp ****  * input params: angle
 164:Core/Src/robot/robot_functions.cpp ****  * same as set_angle function. the difference is this function is called whenever the leg is not ra
 165:Core/Src/robot/robot_functions.cpp ****  * the leg is raised.
 166:Core/Src/robot/robot_functions.cpp **** */
 167:Core/Src/robot/robot_functions.cpp **** void correct_steering_angle(float angle)
 168:Core/Src/robot/robot_functions.cpp **** {
 169:Core/Src/robot/robot_functions.cpp **** 	float del_angle = (angle - robot_angle) * 180 / PI;
 170:Core/Src/robot/robot_functions.cpp **** 	if (fabs(del_angle) <= (2*steering_angle_limit * 180 / PI))
 171:Core/Src/robot/robot_functions.cpp **** 	{
 172:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(0);
 173:Core/Src/robot/robot_functions.cpp **** 		// printf("center_alligned\t");
 174:Core/Src/robot/robot_functions.cpp **** 	}
 175:Core/Src/robot/robot_functions.cpp **** 	else
 176:Core/Src/robot/robot_functions.cpp **** 	{
 177:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(del_angle > 0 ? -(steering_angle_limit * 180 / PI) : (steering_angle_limit * 1
 178:Core/Src/robot/robot_functions.cpp **** 		// printf("peak_alligned\t");
 179:Core/Src/robot/robot_functions.cpp **** 	}
 180:Core/Src/robot/robot_functions.cpp **** 	//*/
 181:Core/Src/robot/robot_functions.cpp **** }
 182:Core/Src/robot/robot_functions.cpp **** /**
 183:Core/Src/robot/robot_functions.cpp ****  * This function calculate_robot_angle() calculates the relative robot angle from the initial posit
 184:Core/Src/robot/robot_functions.cpp ****  * to zero and all other angles are taken with reference to this initial angle.
 185:Core/Src/robot/robot_functions.cpp ****  * return param : void
 186:Core/Src/robot/robot_functions.cpp ****  * /params input parameters : void
 187:Core/Src/robot/robot_functions.cpp ****  * The variable robot_angle stores the realtive value of robot angle from the original position
 188:Core/Src/robot/robot_functions.cpp ****  * The temp_robot_angle is just the temporary variable.
 189:Core/Src/robot/robot_functions.cpp **** */
 190:Core/Src/robot/robot_functions.cpp **** void calculate_robot_angle()
 191:Core/Src/robot/robot_functions.cpp **** {
 192:Core/Src/robot/robot_functions.cpp **** 	if (USE_IMU_FLAG)
 193:Core/Src/robot/robot_functions.cpp **** 	{
 194:Core/Src/robot/robot_functions.cpp **** 		robot_angle = (initial_angle.getZ() - curr_angle.getZ()) * PI / 180;
 195:Core/Src/robot/robot_functions.cpp **** 		temp_robot_angle = robot_angle;
 196:Core/Src/robot/robot_functions.cpp **** 		// printf("\tusing IMU\t");
 197:Core/Src/robot/robot_functions.cpp **** 	}
 198:Core/Src/robot/robot_functions.cpp **** 	else
 199:Core/Src/robot/robot_functions.cpp **** 	{
 200:Core/Src/robot/robot_functions.cpp **** 		if (leg[0].is_raised_without_deadzone())
 201:Core/Src/robot/robot_functions.cpp **** 		{
 202:Core/Src/robot/robot_functions.cpp **** 			robot_angle = steering.get_angle() + temp_robot_angle;
 203:Core/Src/robot/robot_functions.cpp **** 			// printf("\t%d\t%d", (int)(steering.get_angle()*180/PI), (int)(temp_robot_angle*180/PI));
 204:Core/Src/robot/robot_functions.cpp **** 		}
 205:Core/Src/robot/robot_functions.cpp **** 		else
 206:Core/Src/robot/robot_functions.cpp **** 		{
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 6


 207:Core/Src/robot/robot_functions.cpp **** 			temp_robot_angle = robot_angle - steering.get_angle();
 208:Core/Src/robot/robot_functions.cpp **** 			// printf("\t%d\t%d", (int)(steering.get_angle()*180/PI), (int)(temp_robot_angle*180/PI));
 209:Core/Src/robot/robot_functions.cpp **** 		}
 210:Core/Src/robot/robot_functions.cpp **** 		// printf("\tusing ENCODER\t");
 211:Core/Src/robot/robot_functions.cpp **** 	}
 212:Core/Src/robot/robot_functions.cpp **** }
 213:Core/Src/robot/robot_functions.cpp **** 
 214:Core/Src/robot/robot_functions.cpp **** /**
 215:Core/Src/robot/robot_functions.cpp ****  * \brief This function initializes the robot in erected position at the start of the game.
 216:Core/Src/robot/robot_functions.cpp ****  * \bug remember to face towards anticlockwise direction from the 0 position at the start of the ga
 217:Core/Src/robot/robot_functions.cpp ****  * \params void
 218:Core/Src/robot/robot_functions.cpp ****  * \returns void
 219:Core/Src/robot/robot_functions.cpp ****  */
 220:Core/Src/robot/robot_functions.cpp **** 
 221:Core/Src/robot/robot_functions.cpp **** void initialize_position(void)
 222:Core/Src/robot/robot_functions.cpp **** {
 223:Core/Src/robot/robot_functions.cpp **** 	uint32_t dt = HAL_GetTick();
 224:Core/Src/robot/robot_functions.cpp **** 	while (true)
 225:Core/Src/robot/robot_functions.cpp **** 	{
 226:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 227:Core/Src/robot/robot_functions.cpp **** 		{
 228:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 229:Core/Src/robot/robot_functions.cpp **** 			printf("\nInitializing_Leg_Orientation\t");
 230:Core/Src/robot/robot_functions.cpp **** 			if (initialize_leg_position() == true)
 231:Core/Src/robot/robot_functions.cpp **** 				break;
 232:Core/Src/robot/robot_functions.cpp **** 		}
 233:Core/Src/robot/robot_functions.cpp **** 	}
 234:Core/Src/robot/robot_functions.cpp **** 	for (int32_t i = 0; i < 3000000; i++)
 235:Core/Src/robot/robot_functions.cpp **** 	{
 236:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 237:Core/Src/robot/robot_functions.cpp **** 		{
 238:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 239:Core/Src/robot/robot_functions.cpp **** 			printf("\n\tWaiting_The_Leg \t");
 240:Core/Src/robot/robot_functions.cpp **** 			leg[0].steps = 0;
 241:Core/Src/robot/robot_functions.cpp **** 			leg[1].steps = 0;
 242:Core/Src/robot/robot_functions.cpp **** 			leg[0].reset_angle(90 * PI / 180);
 243:Core/Src/robot/robot_functions.cpp **** 			leg[1].reset_angle(90 * PI / 180);
 244:Core/Src/robot/robot_functions.cpp **** 			leg[0].reset_actual_angle(90 * PI / 180);
 245:Core/Src/robot/robot_functions.cpp **** 			leg[1].reset_actual_angle(90 * PI / 180);
 246:Core/Src/robot/robot_functions.cpp **** 			leg[0].set_omega(0);
 247:Core/Src/robot/robot_functions.cpp **** 			leg[1].set_omega(0);
 248:Core/Src/robot/robot_functions.cpp **** 			steering.set_omega(0);
 249:Core/Src/robot/robot_functions.cpp **** 			STEERING_FLAG = false;
 250:Core/Src/robot/robot_functions.cpp **** 		}
 251:Core/Src/robot/robot_functions.cpp **** 	}
 252:Core/Src/robot/robot_functions.cpp **** 	start_time = HAL_GetTick();
 253:Core/Src/robot/robot_functions.cpp **** 	while (true)
 254:Core/Src/robot/robot_functions.cpp **** 	{
 255:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 256:Core/Src/robot/robot_functions.cpp **** 		{
 257:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 258:Core/Src/robot/robot_functions.cpp **** 			printf("\tInitializing_Steering_Orientation\t %d \t %d", (int)HAL_GetTick(), (int)start_time);
 259:Core/Src/robot/robot_functions.cpp **** 			leg[0].set_omega(0);
 260:Core/Src/robot/robot_functions.cpp **** 			leg[1].set_omega(0);
 261:Core/Src/robot/robot_functions.cpp **** 			if (initialize_steering_position() == true)
 262:Core/Src/robot/robot_functions.cpp **** 				break;
 263:Core/Src/robot/robot_functions.cpp **** 		}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 7


 264:Core/Src/robot/robot_functions.cpp **** 	}
 265:Core/Src/robot/robot_functions.cpp **** }
 266:Core/Src/robot/robot_functions.cpp **** 
 267:Core/Src/robot/robot_functions.cpp **** /**
 268:Core/Src/robot/robot_functions.cpp ****  * \brief This function initializes the leg in erected position at the start of the game.
 269:Core/Src/robot/robot_functions.cpp ****  * \params void
 270:Core/Src/robot/robot_functions.cpp ****  * \returns true if leg is erected.
 271:Core/Src/robot/robot_functions.cpp ****  */
 272:Core/Src/robot/robot_functions.cpp **** bool initialize_leg_position(void)
 273:Core/Src/robot/robot_functions.cpp **** {
 274:Core/Src/robot/robot_functions.cpp **** 	float initial_tolerance = 8;
 275:Core/Src/robot/robot_functions.cpp **** 	float leg_initial_position = 90;
 276:Core/Src/robot/robot_functions.cpp **** 	static bool leg0_flag = false;
 277:Core/Src/robot/robot_functions.cpp **** 	static bool leg1_flag = false;
 278:Core/Src/robot/robot_functions.cpp **** 
 279:Core/Src/robot/robot_functions.cpp **** 	// printf("\n\tsteps0 = %d, angle0 = %d\tsteps0 = %d, angle0 = %d, \trobot_angle = %d"
 280:Core/Src/robot/robot_functions.cpp **** 	// , leg[0].get_steps(), (int)(leg[0].get_angle() * 180 / PI), leg[1].get_steps(), (int)(leg[1].ge
 281:Core/Src/robot/robot_functions.cpp **** 	if ((leg[0].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 282:Core/Src/robot/robot_functions.cpp **** 	    (leg[0].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180) && (leg[0].get_s
 283:Core/Src/robot/robot_functions.cpp **** 	{
 284:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(0);
 285:Core/Src/robot/robot_functions.cpp **** 		leg0_flag = true;
 286:Core/Src/robot/robot_functions.cpp **** 	}
 287:Core/Src/robot/robot_functions.cpp **** 	else
 288:Core/Src/robot/robot_functions.cpp **** 	{
 289:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(3);
 290:Core/Src/robot/robot_functions.cpp **** 		leg0_flag = false;
 291:Core/Src/robot/robot_functions.cpp **** 	}
 292:Core/Src/robot/robot_functions.cpp **** 
 293:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 294:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)) && (leg[1].get_
 295:Core/Src/robot/robot_functions.cpp **** 	{
 296:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
 297:Core/Src/robot/robot_functions.cpp **** 		leg1_flag = true;
 298:Core/Src/robot/robot_functions.cpp **** 	}
 299:Core/Src/robot/robot_functions.cpp **** 	else
 300:Core/Src/robot/robot_functions.cpp **** 	{
 301:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(3);
 302:Core/Src/robot/robot_functions.cpp **** 		leg1_flag = false;
 303:Core/Src/robot/robot_functions.cpp **** 	}
 304:Core/Src/robot/robot_functions.cpp **** 
 305:Core/Src/robot/robot_functions.cpp **** 	if (leg0_flag && leg1_flag)
 306:Core/Src/robot/robot_functions.cpp **** 	{
 307:Core/Src/robot/robot_functions.cpp **** 
 308:Core/Src/robot/robot_functions.cpp **** 		return true;
 309:Core/Src/robot/robot_functions.cpp **** 	}
 310:Core/Src/robot/robot_functions.cpp **** 	else
 311:Core/Src/robot/robot_functions.cpp **** 	{
 312:Core/Src/robot/robot_functions.cpp **** 		return false;
 313:Core/Src/robot/robot_functions.cpp **** 	}
 314:Core/Src/robot/robot_functions.cpp **** }
 315:Core/Src/robot/robot_functions.cpp **** 
 316:Core/Src/robot/robot_functions.cpp **** /**
 317:Core/Src/robot/robot_functions.cpp ****  * \brief Called by initialize_position();
 318:Core/Src/robot/robot_functions.cpp ****  * \brief This function initializes the steering in center position at the start of the game.
 319:Core/Src/robot/robot_functions.cpp ****  * \bug remember to towards anticlockwise direction from the 0 position at the start of the game.
 320:Core/Src/robot/robot_functions.cpp ****  * \params void
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 8


 321:Core/Src/robot/robot_functions.cpp ****  * \returns true if reached to 0 angle.
 322:Core/Src/robot/robot_functions.cpp ****  */
 323:Core/Src/robot/robot_functions.cpp **** bool initialize_steering_position(void)
 324:Core/Src/robot/robot_functions.cpp **** {
 325:Core/Src/robot/robot_functions.cpp **** 	printf("\nangle = %d\t", (int)(steering.get_angle() * 180 / PI));
 326:Core/Src/robot/robot_functions.cpp **** 	// printf("\tsteps0 = %d, angle0 = %d\tsteps0 = %d, angle0 = %d", leg[0].get_steps(),(int)(leg[0].
 327:Core/Src/robot/robot_functions.cpp **** 	// , leg[1].get_steps(),(int)(leg[1].get_angle()*180/PI) );
 328:Core/Src/robot/robot_functions.cpp **** 	if (((HAL_GetTick() - start_time) >= 500))
 329:Core/Src/robot/robot_functions.cpp **** 	{
 330:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 331:Core/Src/robot/robot_functions.cpp **** 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 332:Core/Src/robot/robot_functions.cpp **** 		return true;
 333:Core/Src/robot/robot_functions.cpp **** 	}
 334:Core/Src/robot/robot_functions.cpp **** 	if (STEERING_FLAG)
 335:Core/Src/robot/robot_functions.cpp **** 	{
 336:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 337:Core/Src/robot/robot_functions.cpp **** 		return true;
 338:Core/Src/robot/robot_functions.cpp **** 	}
 339:Core/Src/robot/robot_functions.cpp **** 	else
 340:Core/Src/robot/robot_functions.cpp **** 	{
 341:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0.5);
 342:Core/Src/robot/robot_functions.cpp **** 		return false;
 343:Core/Src/robot/robot_functions.cpp **** 	}
 344:Core/Src/robot/robot_functions.cpp **** }
 345:Core/Src/robot/robot_functions.cpp **** 
 346:Core/Src/robot/robot_functions.cpp **** bool getup_n_run()
 347:Core/Src/robot/robot_functions.cpp **** {
 348:Core/Src/robot/robot_functions.cpp **** 	float initial_tolerance = 4;
 349:Core/Src/robot/robot_functions.cpp **** 	float leg_initial_position = 90;
 350:Core/Src/robot/robot_functions.cpp **** 
 351:Core/Src/robot/robot_functions.cpp **** 	// printf("\tInitializing_Leg_Orientation_GETUP\t");
 352:Core/Src/robot/robot_functions.cpp **** 	leg[0].set_omega(0);
 353:Core/Src/robot/robot_functions.cpp **** 	// printf(" \t%d \t%d", (int)(leg[1].get_angle()), (int)(leg_initial_position));
 354:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 355:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)))
 356:Core/Src/robot/robot_functions.cpp **** 	{
 357:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
 358:Core/Src/robot/robot_functions.cpp **** 		leg[0].reset_actual_angle(90 * PI / 180);
 359:Core/Src/robot/robot_functions.cpp **** 		leg[1].reset_actual_angle(90 * PI / 180);
 360:Core/Src/robot/robot_functions.cpp **** 		leg[0].reset_angle(90 * PI / 180);
 361:Core/Src/robot/robot_functions.cpp **** 		leg[1].reset_angle(90 * PI / 180);
 362:Core/Src/robot/robot_functions.cpp **** 		// printf("\tIF\t");
 363:Core/Src/robot/robot_functions.cpp **** 		return true;
 364:Core/Src/robot/robot_functions.cpp **** 	}
 365:Core/Src/robot/robot_functions.cpp **** 	else
 366:Core/Src/robot/robot_functions.cpp **** 	{
 367:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(3);
 368:Core/Src/robot/robot_functions.cpp **** 		// printf("\tELSE\t");
 369:Core/Src/robot/robot_functions.cpp **** 		return false;
 370:Core/Src/robot/robot_functions.cpp **** 	}
 371:Core/Src/robot/robot_functions.cpp **** 
 372:Core/Src/robot/robot_functions.cpp **** }
 373:Core/Src/robot/robot_functions.cpp **** 
 374:Core/Src/robot/robot_functions.cpp **** /**
 375:Core/Src/robot/robot_functions.cpp ****  * \brief Called by initialize_position();
 376:Core/Src/robot/robot_functions.cpp ****  * \brief This function calculates all the datas including the motor omegas, orientation and angles
 377:Core/Src/robot/robot_functions.cpp ****  * \remarks remember to call this function only once in every 10 ms.
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 9


 378:Core/Src/robot/robot_functions.cpp ****  * \params void
 379:Core/Src/robot/robot_functions.cpp ****  * \returns void
 380:Core/Src/robot/robot_functions.cpp ****  */
 381:Core/Src/robot/robot_functions.cpp **** void calculate_datas()
 382:Core/Src/robot/robot_functions.cpp **** {
 383:Core/Src/robot/robot_functions.cpp **** 	leg[0].calculate_omega();
 384:Core/Src/robot/robot_functions.cpp **** 	leg[1].calculate_omega();
 385:Core/Src/robot/robot_functions.cpp **** 	steering.calculate_omega();
 386:Core/Src/robot/robot_functions.cpp **** 	curr_angle = read_Orientation(10);
 387:Core/Src/robot/robot_functions.cpp **** 	calculate_robot_angle();
 388:Core/Src/robot/robot_functions.cpp **** 	// printf("\tangleZ = %d\t", (int)curr_angle.getZ());
 389:Core/Src/robot/robot_functions.cpp **** 	// printf("\trobot_angle = %d\t", (int)(robot_angle*180/PI));
 390:Core/Src/robot/robot_functions.cpp **** }
 391:Core/Src/robot/robot_functions.cpp **** 
 392:Core/Src/robot/robot_functions.cpp **** float motion_profile(float angle_in_degrees, float min_speed, float max_speed)
 393:Core/Src/robot/robot_functions.cpp **** {
 394:Core/Src/robot/robot_functions.cpp **** 	float damping_angle = 30;
 395:Core/Src/robot/robot_functions.cpp **** 	float speed = 0;
 396:Core/Src/robot/robot_functions.cpp **** 	min_speed = 1.1;
 397:Core/Src/robot/robot_functions.cpp **** 	if (angle_in_degrees > 180)
 398:Core/Src/robot/robot_functions.cpp **** 	{
 399:Core/Src/robot/robot_functions.cpp **** 		angle_in_degrees -= 180;
 400:Core/Src/robot/robot_functions.cpp **** 		// max_speed = 10;
 401:Core/Src/robot/robot_functions.cpp **** 	}
 402:Core/Src/robot/robot_functions.cpp **** 	if ((angle_in_degrees >= 0) && (angle_in_degrees <= damping_angle))
 403:Core/Src/robot/robot_functions.cpp **** 	{
 404:Core/Src/robot/robot_functions.cpp **** 		speed = ((max_speed - min_speed) / (damping_angle - 0)) * (angle_in_degrees - 0) + min_speed;
 405:Core/Src/robot/robot_functions.cpp **** 		// printf("condition1");
 406:Core/Src/robot/robot_functions.cpp **** 	}
 407:Core/Src/robot/robot_functions.cpp **** 
 408:Core/Src/robot/robot_functions.cpp **** 	else if ((angle_in_degrees >= (180 - damping_angle)) && (angle_in_degrees <= 180))
 409:Core/Src/robot/robot_functions.cpp **** 	{
 410:Core/Src/robot/robot_functions.cpp **** 		speed = ((min_speed - max_speed) / (180 - (180 - damping_angle))) * (angle_in_degrees - (180 - da
 411:Core/Src/robot/robot_functions.cpp **** 		// printf("conditionelseif");
 412:Core/Src/robot/robot_functions.cpp **** 	}
 413:Core/Src/robot/robot_functions.cpp **** 
 414:Core/Src/robot/robot_functions.cpp **** 	else
 415:Core/Src/robot/robot_functions.cpp **** 	{
 416:Core/Src/robot/robot_functions.cpp **** 		speed = max_speed;
 417:Core/Src/robot/robot_functions.cpp **** 		// printf("else");
 418:Core/Src/robot/robot_functions.cpp **** 	}
 419:Core/Src/robot/robot_functions.cpp **** 	// printf("\tSpeed = %d", (int)(speed*100));
 420:Core/Src/robot/robot_functions.cpp **** 	return speed;
 421:Core/Src/robot/robot_functions.cpp **** }...
  51              		.loc 2 421 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              	.LVL1:
  56 0000 0128     		cmp	r0, #1
  57 0002 00D0     		beq	.L8
  58              	.L5:
  59 0004 7047     		bx	lr
  60              	.L8:
  61              		.loc 2 421 0 is_stmt 0 discriminator 1
  62 0006 4FF6FF73 		movw	r3, #65535
  63 000a 9942     		cmp	r1, r3
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 10


  64 000c FAD1     		bne	.L5
  65              		.loc 2 421 0
  66 000e 70B5     		push	{r4, r5, r6, lr}
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 16
  69              		.cfi_offset 4, -16
  70              		.cfi_offset 5, -12
  71              		.cfi_offset 6, -8
  72              		.cfi_offset 14, -4
  73              	.LVL2:
  74              	.LBB97:
  75              	.LBB98:
  76              	.LBB99:
  77              	.LBB100:
  78              	.LBB101:
  33:Core/Inc/utils/vec3.h **** 
  34:Core/Inc/utils/vec3.h ****         T getX() const { return x_; }
  35:Core/Inc/utils/vec3.h ****         T getY() const { return y_; }
  36:Core/Inc/utils/vec3.h ****         T getZ() const { return z_; }
  37:Core/Inc/utils/vec3.h ****         void setX(T x) { x_ = x; }
  79              		.loc 1 37 0 is_stmt 1
  80 0010 0948     		ldr	r0, .L9
  81              	.LVL3:
  82 0012 0024     		movs	r4, #0
  83 0014 0460     		str	r4, [r0]	@ float
  84              	.LVL4:
  85              	.LBE101:
  86              	.LBE100:
  87              	.LBB102:
  88              	.LBB103:
  38:Core/Inc/utils/vec3.h ****         void setY(T y) { y_ = y; }
  89              		.loc 1 38 0
  90 0016 4460     		str	r4, [r0, #4]	@ float
  91              	.LVL5:
  92              	.LBE103:
  93              	.LBE102:
  94              	.LBB104:
  95              	.LBB105:
  39:Core/Inc/utils/vec3.h ****         void setZ(T z) { z_ = z; }
  96              		.loc 1 39 0
  97 0018 8460     		str	r4, [r0, #8]	@ float
  98              	.LVL6:
  99              	.LBE105:
 100              	.LBE104:
 101              	.LBE99:
 102              	.LBE98:
 103              	.LBE97:
   6:Core/Src/robot/robot_functions.cpp **** Vec3<float> initial_angle;
 104              		.loc 2 6 0
 105 001a 084E     		ldr	r6, .L9+4
 106 001c 084D     		ldr	r5, .L9+8
 107 001e 3246     		mov	r2, r6
 108 0020 2946     		mov	r1, r5
 109              	.LVL7:
 110 0022 FFF7FEFF 		bl	__aeabi_atexit
 111              	.LVL8:
 112              	.LBB106:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 11


 113              	.LBB107:
 114              	.LBB108:
 115              	.LBB109:
 116              	.LBB110:
  37:Core/Inc/utils/vec3.h ****         void setY(T y) { y_ = y; }
 117              		.loc 1 37 0
 118 0026 0748     		ldr	r0, .L9+12
 119 0028 0460     		str	r4, [r0]	@ float
 120              	.LVL9:
 121              	.LBE110:
 122              	.LBE109:
 123              	.LBB111:
 124              	.LBB112:
  38:Core/Inc/utils/vec3.h ****         void setZ(T z) { z_ = z; }
 125              		.loc 1 38 0
 126 002a 4460     		str	r4, [r0, #4]	@ float
 127              	.LVL10:
 128              	.LBE112:
 129              	.LBE111:
 130              	.LBB113:
 131              	.LBB114:
 132              		.loc 1 39 0
 133 002c 8460     		str	r4, [r0, #8]	@ float
 134              	.LVL11:
 135              	.LBE114:
 136              	.LBE113:
 137              	.LBE108:
 138              	.LBE107:
 139              	.LBE106:
   7:Core/Src/robot/robot_functions.cpp **** Vec3<float> curr_angle;
 140              		.loc 2 7 0
 141 002e 3246     		mov	r2, r6
 142 0030 2946     		mov	r1, r5
 143 0032 FFF7FEFF 		bl	__aeabi_atexit
 144              	.LVL12:
 145              		.loc 2 421 0
 146 0036 70BD     		pop	{r4, r5, r6, pc}
 147              	.L10:
 148              		.align	2
 149              	.L9:
 150 0038 00000000 		.word	.LANCHOR0
 151 003c 00000000 		.word	__dso_handle
 152 0040 00000000 		.word	_ZN4Vec3IfED1Ev
 153 0044 00000000 		.word	.LANCHOR1
 154              		.cfi_endproc
 155              	.LFE515:
 157              		.global	__aeabi_f2d
 158              		.global	__aeabi_ddiv
 159              		.global	__aeabi_d2f
 160              		.global	__aeabi_dcmpgt
 161              		.global	__aeabi_dcmplt
 162              		.section	.text._Z9set_anglef,"ax",%progbits
 163              		.align	1
 164              		.global	_Z9set_anglef
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 12


 168              		.fpu fpv4-sp-d16
 170              	_Z9set_anglef:
 171              	.LFB495:
 145:Core/Src/robot/robot_functions.cpp **** {
 172              		.loc 2 145 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL13:
 177 0000 08B5     		push	{r3, lr}
 178              	.LCFI1:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 3, -8
 181              		.cfi_offset 14, -4
 182 0002 2DED028B 		vpush.64	{d8}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 80, -16
 186              		.cfi_offset 81, -12
 146:Core/Src/robot/robot_functions.cpp **** 	float del_angle = (angle - robot_angle) * 180 / PI;
 187              		.loc 2 146 0
 188 0006 2A4B     		ldr	r3, .L27+24
 189 0008 D3ED007A 		vldr.32	s15, [r3]
 190 000c 30EE670A 		vsub.f32	s0, s0, s15
 191              	.LVL14:
 192 0010 DFED287A 		vldr.32	s15, .L27+28
 193 0014 60EE277A 		vmul.f32	s15, s0, s15
 194 0018 17EE900A 		vmov	r0, s15
 195 001c FFF7FEFF 		bl	__aeabi_f2d
 196              	.LVL15:
 197 0020 1DA3     		adr	r3, .L27
 198 0022 D3E90023 		ldrd	r2, [r3]
 199 0026 FFF7FEFF 		bl	__aeabi_ddiv
 200              	.LVL16:
 201 002a FFF7FEFF 		bl	__aeabi_d2f
 202              	.LVL17:
 203 002e 08EE100A 		vmov	s16, r0
 204              	.LVL18:
 205              	.LBB115:
 206              	.LBB116:
 207              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
   1:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
   3:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // Copyright (C) 2016-2017 Free Software Foundation, Inc.
   4:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** //
   5:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // any later version.
  10:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  11:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  16:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 13


  17:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  20:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  25:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** /** @file include/bits/std_abs.h
  26:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****  */
  29:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  30:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  33:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #pragma GCC system_header
  34:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  35:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #include <bits/c++config.h>
  36:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  37:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #include_next <stdlib.h>
  39:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** # include_next <math.h>
  41:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #endif
  42:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  44:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #undef abs
  45:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  46:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** extern "C++"
  47:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** {
  48:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** {
  50:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  52:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   using ::abs;
  53:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  54:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   inline long
  56:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
  57:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #endif
  58:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  59:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   inline long long
  61:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #endif
  63:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  64:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  68:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  69:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  70:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   abs(double __x)
  71:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   { return __builtin_fabs(__x); }
  72:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h **** 
  73:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 14


  74:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   abs(float __x)
  75:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\bits\std_abs.h ****   { return __builtin_fabsf(__x); }
 208              		.loc 3 75 0
 209 0032 B0EEC87A 		vabs.f32	s14, s16
 210              	.LVL19:
 211              	.LBE116:
 212              	.LBE115:
 148:Core/Src/robot/robot_functions.cpp **** 	if(abs(del_angle) >= 0.5){
 213              		.loc 2 148 0
 214 0036 F6EE007A 		vmov.f32	s15, #5.0e-1
 215 003a B4EEE77A 		vcmpe.f32	s14, s15
 216 003e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 217 0042 11DB     		blt	.L11
 149:Core/Src/robot/robot_functions.cpp **** 		if (del_angle >= 0)
 218              		.loc 2 149 0
 219 0044 B5EEC08A 		vcmpe.f32	s16, #0
 220 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 221 004c 12DB     		blt	.L24
 151:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle > (steering_angle_limit * 180 / PI)) ? (steering_angle_limit * 180
 222              		.loc 2 151 0
 223 004e FFF7FEFF 		bl	__aeabi_f2d
 224              	.LVL20:
 225 0052 13A3     		adr	r3, .L27+8
 226 0054 D3E90023 		ldrd	r2, [r3]
 227 0058 FFF7FEFF 		bl	__aeabi_dcmpgt
 228              	.LVL21:
 229 005c 38B9     		cbnz	r0, .L26
 230              	.LVL22:
 231              	.L16:
 151:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle > (steering_angle_limit * 180 / PI)) ? (steering_angle_limit * 180
 232              		.loc 2 151 0 is_stmt 0 discriminator 4
 233 005e B0EE480A 		vmov.f32	s0, s16
 234 0062 1548     		ldr	r0, .L27+32
 235 0064 FFF7FEFF 		bl	_ZN8steering9set_angleEf
 236              	.LVL23:
 237              	.L11:
 159:Core/Src/robot/robot_functions.cpp **** }
 238              		.loc 2 159 0 is_stmt 1
 239 0068 BDEC028B 		vldm	sp!, {d8}
 240              	.LCFI3:
 241              		.cfi_remember_state
 242              		.cfi_restore 80
 243              		.cfi_restore 81
 244              		.cfi_def_cfa_offset 8
 245 006c 08BD     		pop	{r3, pc}
 246              	.LVL24:
 247              	.L26:
 248              	.LCFI4:
 249              		.cfi_restore_state
 151:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle > (steering_angle_limit * 180 / PI)) ? (steering_angle_limit * 180
 250              		.loc 2 151 0
 251 006e B2EE008A 		vmov.f32	s16, #8.0e+0
 252              	.LVL25:
 253 0072 F4E7     		b	.L16
 254              	.LVL26:
 255              	.L24:
 155:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle < -(steering_angle_limit * 180 / PI)) ? -(steering_angle_limit * 1
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 15


 256              		.loc 2 155 0
 257 0074 FFF7FEFF 		bl	__aeabi_f2d
 258              	.LVL27:
 259 0078 0BA3     		adr	r3, .L27+16
 260 007a D3E90023 		ldrd	r2, [r3]
 261 007e FFF7FEFF 		bl	__aeabi_dcmplt
 262              	.LVL28:
 263 0082 08B1     		cbz	r0, .L18
 264 0084 BAEE008A 		vmov.f32	s16, #-8.0e+0
 265              	.LVL29:
 266              	.L18:
 155:Core/Src/robot/robot_functions.cpp **** 			steering.set_angle((del_angle < -(steering_angle_limit * 180 / PI)) ? -(steering_angle_limit * 1
 267              		.loc 2 155 0 is_stmt 0 discriminator 4
 268 0088 B0EE480A 		vmov.f32	s0, s16
 269 008c 0A48     		ldr	r0, .L27+32
 270 008e FFF7FEFF 		bl	_ZN8steering9set_angleEf
 271              	.LVL30:
 159:Core/Src/robot/robot_functions.cpp **** }
 272              		.loc 2 159 0 is_stmt 1 discriminator 4
 273 0092 E9E7     		b	.L11
 274              	.L28:
 275 0094 AFF30080 		.align	3
 276              	.L27:
 277 0098 182D4454 		.word	1413754136
 278 009c FB210940 		.word	1074340347
 279 00a0 2D4B7807 		.word	125324077
 280 00a4 00002040 		.word	1075838976
 281 00a8 2D4B7807 		.word	125324077
 282 00ac 000020C0 		.word	-1071644672
 283 00b0 00000000 		.word	.LANCHOR2
 284 00b4 00003443 		.word	1127481344
 285 00b8 00000000 		.word	steering
 286              		.cfi_endproc
 287              	.LFE495:
 289              		.global	__aeabi_dcmple
 290              		.section	.text._Z22correct_steering_anglef,"ax",%progbits
 291              		.align	1
 292              		.global	_Z22correct_steering_anglef
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	_Z22correct_steering_anglef:
 299              	.LFB496:
 168:Core/Src/robot/robot_functions.cpp **** {
 300              		.loc 2 168 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              	.LVL31:
 305 0000 08B5     		push	{r3, lr}
 306              	.LCFI5:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 3, -8
 309              		.cfi_offset 14, -4
 310 0002 2DED028B 		vpush.64	{d8}
 311              	.LCFI6:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 16


 312              		.cfi_def_cfa_offset 16
 313              		.cfi_offset 80, -16
 314              		.cfi_offset 81, -12
 169:Core/Src/robot/robot_functions.cpp **** 	float del_angle = (angle - robot_angle) * 180 / PI;
 315              		.loc 2 169 0
 316 0006 204B     		ldr	r3, .L42+16
 317 0008 D3ED007A 		vldr.32	s15, [r3]
 318 000c 30EE670A 		vsub.f32	s0, s0, s15
 319              	.LVL32:
 320 0010 DFED1E7A 		vldr.32	s15, .L42+20
 321 0014 60EE277A 		vmul.f32	s15, s0, s15
 322 0018 17EE900A 		vmov	r0, s15
 323 001c FFF7FEFF 		bl	__aeabi_f2d
 324              	.LVL33:
 325 0020 15A3     		adr	r3, .L42
 326 0022 D3E90023 		ldrd	r2, [r3]
 327 0026 FFF7FEFF 		bl	__aeabi_ddiv
 328              	.LVL34:
 329 002a FFF7FEFF 		bl	__aeabi_d2f
 330              	.LVL35:
 331 002e 08EE100A 		vmov	s16, r0
 332              	.LVL36:
 170:Core/Src/robot/robot_functions.cpp **** 	if (fabs(del_angle) <= (2*steering_angle_limit * 180 / PI))
 333              		.loc 2 170 0
 334 0032 F0EEC87A 		vabs.f32	s15, s16
 335 0036 17EE900A 		vmov	r0, s15
 336              	.LVL37:
 337 003a FFF7FEFF 		bl	__aeabi_f2d
 338              	.LVL38:
 339 003e 10A3     		adr	r3, .L42+8
 340 0040 D3E90023 		ldrd	r2, [r3]
 341 0044 FFF7FEFF 		bl	__aeabi_dcmple
 342              	.LVL39:
 343 0048 60B9     		cbnz	r0, .L41
 177:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(del_angle > 0 ? -(steering_angle_limit * 180 / PI) : (steering_angle_limit * 1
 344              		.loc 2 177 0
 345 004a B5EEC08A 		vcmpe.f32	s16, #0
 346 004e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 347 0052 0DDD     		ble	.L39
 348 0054 BAEE000A 		vmov.f32	s0, #-8.0e+0
 349              	.L33:
 177:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(del_angle > 0 ? -(steering_angle_limit * 180 / PI) : (steering_angle_limit * 1
 350              		.loc 2 177 0 is_stmt 0 discriminator 4
 351 0058 0D48     		ldr	r0, .L42+24
 352 005a FFF7FEFF 		bl	_ZN8steering9set_angleEf
 353              	.LVL40:
 354              	.L29:
 181:Core/Src/robot/robot_functions.cpp **** }
 355              		.loc 2 181 0 is_stmt 1
 356 005e BDEC028B 		vldm	sp!, {d8}
 357              	.LCFI7:
 358              		.cfi_remember_state
 359              		.cfi_restore 80
 360              		.cfi_restore 81
 361              		.cfi_def_cfa_offset 8
 362              	.LVL41:
 363 0062 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 17


 364              	.LVL42:
 365              	.L41:
 366              	.LCFI8:
 367              		.cfi_restore_state
 172:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(0);
 368              		.loc 2 172 0
 369 0064 9FED0B0A 		vldr.32	s0, .L42+28
 370 0068 0948     		ldr	r0, .L42+24
 371 006a FFF7FEFF 		bl	_ZN8steering9set_angleEf
 372              	.LVL43:
 373 006e F6E7     		b	.L29
 374              	.L39:
 177:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(del_angle > 0 ? -(steering_angle_limit * 180 / PI) : (steering_angle_limit * 1
 375              		.loc 2 177 0
 376 0070 B2EE000A 		vmov.f32	s0, #8.0e+0
 377 0074 F0E7     		b	.L33
 378              	.L43:
 379 0076 00BF     		.align	3
 380              	.L42:
 381 0078 182D4454 		.word	1413754136
 382 007c FB210940 		.word	1074340347
 383 0080 2D4B7807 		.word	125324077
 384 0084 00003040 		.word	1076887552
 385 0088 00000000 		.word	.LANCHOR2
 386 008c 00003443 		.word	1127481344
 387 0090 00000000 		.word	steering
 388 0094 00000000 		.word	0
 389              		.cfi_endproc
 390              	.LFE496:
 392              		.global	__aeabi_dmul
 393              		.global	__aeabi_dadd
 394              		.section	.text._Z13move_steeringif,"ax",%progbits
 395              		.align	1
 396              		.global	_Z13move_steeringif
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	_Z13move_steeringif:
 403              	.LFB494:
 111:Core/Src/robot/robot_functions.cpp **** {
 404              		.loc 2 111 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              	.LVL44:
 409 0000 D0B5     		push	{r4, r6, r7, lr}
 410              	.LCFI9:
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 4, -16
 413              		.cfi_offset 6, -12
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 2DED028B 		vpush.64	{d8}
 417              	.LCFI10:
 418              		.cfi_def_cfa_offset 24
 419              		.cfi_offset 80, -24
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 18


 420              		.cfi_offset 81, -20
 421 0006 B0EE408A 		vmov.f32	s16, s0
 113:Core/Src/robot/robot_functions.cpp **** 	if (step == steps[0])
 422              		.loc 2 113 0
 423 000a 07EE900A 		vmov	s15, r0	@ int
 424 000e B8EEE77A 		vcvt.f32.s32	s14, s15
 425 0012 234B     		ldr	r3, .L52+8
 426 0014 D3ED007A 		vldr.32	s15, [r3]
 427 0018 B4EE677A 		vcmp.f32	s14, s15
 428 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 429 0020 1DD1     		bne	.L45
 115:Core/Src/robot/robot_functions.cpp **** 		summation_angle += 1.3*robot_angle;
 430              		.loc 2 115 0
 431 0022 204B     		ldr	r3, .L52+12
 432 0024 1868     		ldr	r0, [r3]	@ float
 433              	.LVL45:
 434 0026 FFF7FEFF 		bl	__aeabi_f2d
 435              	.LVL46:
 436 002a 1BA3     		adr	r3, .L52
 437 002c D3E90023 		ldrd	r2, [r3]
 438 0030 FFF7FEFF 		bl	__aeabi_dmul
 439              	.LVL47:
 440 0034 0646     		mov	r6, r0
 441 0036 0F46     		mov	r7, r1
 442 0038 1B4C     		ldr	r4, .L52+16
 443 003a 2068     		ldr	r0, [r4]	@ float
 444 003c FFF7FEFF 		bl	__aeabi_f2d
 445              	.LVL48:
 446 0040 3246     		mov	r2, r6
 447 0042 3B46     		mov	r3, r7
 448 0044 FFF7FEFF 		bl	__aeabi_dadd
 449              	.LVL49:
 450 0048 FFF7FEFF 		bl	__aeabi_d2f
 451              	.LVL50:
 452 004c 2060     		str	r0, [r4]	@ float
 116:Core/Src/robot/robot_functions.cpp **** 		angle = -summation_angle;
 453              		.loc 2 116 0
 454 004e 07EE900A 		vmov	s15, r0
 455 0052 F1EE677A 		vneg.f32	s15, s15
 456              	.LVL51:
 117:Core/Src/robot/robot_functions.cpp **** 		angle /= 100;
 457              		.loc 2 117 0
 458 0056 9FED157A 		vldr.32	s14, .L52+20
 459 005a 87EE878A 		vdiv.f32	s16, s15, s14
 460              	.LVL52:
 461              	.L45:
 119:Core/Src/robot/robot_functions.cpp **** 	if (leg[0].is_raised() == Leg_condition::RAISED)
 462              		.loc 2 119 0
 463 005e 1448     		ldr	r0, .L52+24
 464 0060 FFF7FEFF 		bl	_ZN3leg9is_raisedEv
 465              	.LVL53:
 466 0064 50B1     		cbz	r0, .L50
 124:Core/Src/robot/robot_functions.cpp **** 	else if (leg[0].is_raised() == Leg_condition::FALLEN)
 467              		.loc 2 124 0
 468 0066 1248     		ldr	r0, .L52+24
 469 0068 FFF7FEFF 		bl	_ZN3leg9is_raisedEv
 470              	.LVL54:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 19


 471 006c 0128     		cmp	r0, #1
 472 006e 0CD0     		beq	.L51
 132:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 473              		.loc 2 132 0
 474 0070 9FED100A 		vldr.32	s0, .L52+28
 475 0074 1048     		ldr	r0, .L52+32
 476 0076 FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 477              	.LVL55:
 134:Core/Src/robot/robot_functions.cpp **** }
 478              		.loc 2 134 0
 479 007a 03E0     		b	.L44
 480              	.L50:
 122:Core/Src/robot/robot_functions.cpp **** 		set_angle(angle);
 481              		.loc 2 122 0
 482 007c B0EE480A 		vmov.f32	s0, s16
 483 0080 FFF7FEFF 		bl	_Z9set_anglef
 484              	.LVL56:
 485              	.L44:
 134:Core/Src/robot/robot_functions.cpp **** }
 486              		.loc 2 134 0
 487 0084 BDEC028B 		vldm	sp!, {d8}
 488              	.LCFI11:
 489              		.cfi_remember_state
 490              		.cfi_restore 80
 491              		.cfi_restore 81
 492              		.cfi_def_cfa_offset 16
 493              	.LVL57:
 494 0088 D0BD     		pop	{r4, r6, r7, pc}
 495              	.LVL58:
 496              	.L51:
 497              	.LCFI12:
 498              		.cfi_restore_state
 127:Core/Src/robot/robot_functions.cpp **** 		correct_steering_angle(angle);
 499              		.loc 2 127 0
 500 008a B0EE480A 		vmov.f32	s0, s16
 501 008e FFF7FEFF 		bl	_Z22correct_steering_anglef
 502              	.LVL59:
 503 0092 F7E7     		b	.L44
 504              	.L53:
 505 0094 AFF30080 		.align	3
 506              	.L52:
 507 0098 CDCCCCCC 		.word	-858993459
 508 009c CCCCF43F 		.word	1073007820
 509 00a0 00000000 		.word	steps
 510 00a4 00000000 		.word	.LANCHOR2
 511 00a8 00000000 		.word	.LANCHOR3
 512 00ac 0000C842 		.word	1120403456
 513 00b0 00000000 		.word	leg
 514 00b4 00000000 		.word	0
 515 00b8 00000000 		.word	steering
 516              		.cfi_endproc
 517              	.LFE494:
 519              		.section	.text._Z21calculate_robot_anglev,"ax",%progbits
 520              		.align	1
 521              		.global	_Z21calculate_robot_anglev
 522              		.syntax unified
 523              		.thumb
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 20


 524              		.thumb_func
 525              		.fpu fpv4-sp-d16
 527              	_Z21calculate_robot_anglev:
 528              	.LFB497:
 191:Core/Src/robot/robot_functions.cpp **** {
 529              		.loc 2 191 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533 0000 08B5     		push	{r3, lr}
 534              	.LCFI13:
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 3, -8
 537              		.cfi_offset 14, -4
 538 0002 2DED028B 		vpush.64	{d8}
 539              	.LCFI14:
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 80, -16
 542              		.cfi_offset 81, -12
 192:Core/Src/robot/robot_functions.cpp **** 	if (USE_IMU_FLAG)
 543              		.loc 2 192 0
 544 0006 204B     		ldr	r3, .L60+8
 545 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 546 000a EBB1     		cbz	r3, .L55
 547              	.LVL60:
 548              	.LBB117:
 549              	.LBB118:
  36:Core/Inc/utils/vec3.h ****         void setX(T x) { x_ = x; }
 550              		.loc 1 36 0
 551 000c 1F4B     		ldr	r3, .L60+12
 552 000e 93ED027A 		vldr.32	s14, [r3, #8]
 553              	.LVL61:
 554              	.LBE118:
 555              	.LBE117:
 556              	.LBB119:
 557              	.LBB120:
 558 0012 1F4B     		ldr	r3, .L60+16
 559 0014 D3ED027A 		vldr.32	s15, [r3, #8]
 560              	.LVL62:
 561              	.LBE120:
 562              	.LBE119:
 194:Core/Src/robot/robot_functions.cpp **** 		robot_angle = (initial_angle.getZ() - curr_angle.getZ()) * PI / 180;
 563              		.loc 2 194 0
 564 0018 77EE677A 		vsub.f32	s15, s14, s15
 565 001c 17EE900A 		vmov	r0, s15
 566 0020 FFF7FEFF 		bl	__aeabi_f2d
 567              	.LVL63:
 568 0024 16A3     		adr	r3, .L60
 569 0026 D3E90023 		ldrd	r2, [r3]
 570 002a FFF7FEFF 		bl	__aeabi_dmul
 571              	.LVL64:
 572 002e 0022     		movs	r2, #0
 573 0030 184B     		ldr	r3, .L60+20
 574 0032 FFF7FEFF 		bl	__aeabi_ddiv
 575              	.LVL65:
 576 0036 FFF7FEFF 		bl	__aeabi_d2f
 577              	.LVL66:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 21


 578 003a 174B     		ldr	r3, .L60+24
 579 003c 1860     		str	r0, [r3]	@ float
 195:Core/Src/robot/robot_functions.cpp **** 		temp_robot_angle = robot_angle;
 580              		.loc 2 195 0
 581 003e 174B     		ldr	r3, .L60+28
 582 0040 1860     		str	r0, [r3]	@ float
 583              	.L54:
 212:Core/Src/robot/robot_functions.cpp **** }
 584              		.loc 2 212 0
 585 0042 BDEC028B 		vldm	sp!, {d8}
 586              	.LCFI15:
 587              		.cfi_remember_state
 588              		.cfi_restore 80
 589              		.cfi_restore 81
 590              		.cfi_def_cfa_offset 8
 591 0046 08BD     		pop	{r3, pc}
 592              	.L55:
 593              	.LCFI16:
 594              		.cfi_restore_state
 200:Core/Src/robot/robot_functions.cpp **** 		if (leg[0].is_raised_without_deadzone())
 595              		.loc 2 200 0
 596 0048 1548     		ldr	r0, .L60+32
 597 004a FFF7FEFF 		bl	_ZN3leg26is_raised_without_deadzoneEv
 598              	.LVL67:
 599 004e 58B9     		cbnz	r0, .L59
 207:Core/Src/robot/robot_functions.cpp **** 			temp_robot_angle = robot_angle - steering.get_angle();
 600              		.loc 2 207 0
 601 0050 114B     		ldr	r3, .L60+24
 602 0052 93ED008A 		vldr.32	s16, [r3]
 603              	.LVL68:
 604              	.LBB121:
 605              	.LBB122:
 606              		.file 4 "Core/Inc/devs/steering.h"
   1:Core/Inc/devs/steering.h **** /**
   2:Core/Inc/devs/steering.h ****  * steering.h
   3:Core/Inc/devs/steering.h ****  *
   4:Core/Inc/devs/steering.h ****  * \brief Provide control over steering of the horse
   5:Core/Inc/devs/steering.h ****  *
   6:Core/Inc/devs/steering.h ****  * This file is meant as an wrapper to the elements in the encoder. 
   7:Core/Inc/devs/steering.h ****  * It uses the functions of other headers (ie motor.h, encoder.h, 
   8:Core/Inc/devs/steering.h ****  * limit_switch.h and pid.h tocontrol all the functions available 
   9:Core/Inc/devs/steering.h ****  * in the steering.
  10:Core/Inc/devs/steering.h ****  *
  11:Core/Inc/devs/steering.h ****  * \author 	$Author 	: Prashant_Bhatta
  12:Core/Inc/devs/steering.h ****  * \date 	$Date		: 2005/04/14 14:16:20 $
  13:Core/Inc/devs/steering.h ****  * \contact	$Contact	: 073bex425.prashant@pcampus.edu.np
  14:Core/Inc/devs/steering.h ****  *
  15:Core/Inc/devs/steering.h ****  */
  16:Core/Inc/devs/steering.h **** #ifndef _STEERING_H_
  17:Core/Inc/devs/steering.h **** #define _STEERING_H_
  18:Core/Inc/devs/steering.h **** 
  19:Core/Inc/devs/steering.h **** #include "motor.h"
  20:Core/Inc/devs/steering.h **** #include "encoder.h"
  21:Core/Inc/devs/steering.h **** #include "pid.h"
  22:Core/Inc/devs/steering.h **** #include "limit_switch.h"
  23:Core/Inc/devs/steering.h **** 
  24:Core/Inc/devs/steering.h **** class steering
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 22


  25:Core/Inc/devs/steering.h **** {
  26:Core/Inc/devs/steering.h **** public:
  27:Core/Inc/devs/steering.h **** 	/// These lines of codes are just for protection of random defination of the objects.
  28:Core/Inc/devs/steering.h **** 	steering(){}
  29:Core/Inc/devs/steering.h **** 	steering(steering &&) = default;
  30:Core/Inc/devs/steering.h **** 	steering(const steering &) = default;
  31:Core/Inc/devs/steering.h **** 	steering &operator=(steering &&) = default;
  32:Core/Inc/devs/steering.h **** 	steering &operator=(const steering &) = default;
  33:Core/Inc/devs/steering.h **** 	~steering(){}
  34:Core/Inc/devs/steering.h **** 
  35:Core/Inc/devs/steering.h **** 	/**
  36:Core/Inc/devs/steering.h **** 	 * \brief This function setups the configurations for the steering
  37:Core/Inc/devs/steering.h **** 	 * \param motor: pointer to motor_config which contains all the 
  38:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor
  39:Core/Inc/devs/steering.h **** 	 * \param encoder: pointer to encoder_config which contains all the 
  40:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor  
  41:Core/Inc/devs/steering.h **** 	 * \return void
  42:Core/Inc/devs/steering.h **** 	 */
  43:Core/Inc/devs/steering.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  44:Core/Inc/devs/steering.h **** 		motor__.set_config(motor);
  45:Core/Inc/devs/steering.h **** 		encoder__.set_config(encoder);
  46:Core/Inc/devs/steering.h **** 	}
  47:Core/Inc/devs/steering.h **** 
  48:Core/Inc/devs/steering.h **** 	/**
  49:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for PID algorithm
  50:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for PID
  51:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  52:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  53:Core/Inc/devs/steering.h **** 	 * \return void
  54:Core/Inc/devs/steering.h **** 	 */
  55:Core/Inc/devs/steering.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  56:Core/Inc/devs/steering.h **** 		dpid_.set_P(kp);
  57:Core/Inc/devs/steering.h **** 		dpid_.set_I(ki);
  58:Core/Inc/devs/steering.h **** 		dpid_.set_D(kd);
  59:Core/Inc/devs/steering.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  60:Core/Inc/devs/steering.h **** 	}
  61:Core/Inc/devs/steering.h **** 
  62:Core/Inc/devs/steering.h **** 	/**
  63:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for Angle_PID algorithm
  64:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for Anggle_PID
  65:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  66:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  67:Core/Inc/devs/steering.h **** 	 * \return void
  68:Core/Inc/devs/steering.h **** 	 */
  69:Core/Inc/devs/steering.h **** 	void set_angle_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  70:Core/Inc/devs/steering.h **** 		apid_.set_P(kp);
  71:Core/Inc/devs/steering.h **** 		apid_.set_I(ki);
  72:Core/Inc/devs/steering.h **** 		apid_.set_D(kd);
  73:Core/Inc/devs/steering.h **** 		apid_.set_Limits(upper_limit, lower_limit);
  74:Core/Inc/devs/steering.h **** 	}
  75:Core/Inc/devs/steering.h **** 
  76:Core/Inc/devs/steering.h **** 
  77:Core/Inc/devs/steering.h **** 	/** 
  78:Core/Inc/devs/steering.h **** 	 * \brief sets omega for the steering
  79:Core/Inc/devs/steering.h **** 	 * 
  80:Core/Inc/devs/steering.h **** 	 */
  81:Core/Inc/devs/steering.h **** 	void set_omega(float omega);
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 23


  82:Core/Inc/devs/steering.h **** 
  83:Core/Inc/devs/steering.h **** 	/** 
  84:Core/Inc/devs/steering.h **** 	 * \brief sets angle for the steering
  85:Core/Inc/devs/steering.h **** 	 * 
  86:Core/Inc/devs/steering.h **** 	 */
  87:Core/Inc/devs/steering.h **** 	void set_angle(float angle);
  88:Core/Inc/devs/steering.h **** 
  89:Core/Inc/devs/steering.h **** 	/**
  90:Core/Inc/devs/steering.h **** 	 * \brief resets the angle provided by the encoder
  91:Core/Inc/devs/steering.h **** 	 * \param angle_in_radian at which it is to be reset
  92:Core/Inc/devs/steering.h **** 	 * \return void
  93:Core/Inc/devs/steering.h **** 	 */
  94:Core/Inc/devs/steering.h **** 	void reset_angle(float angle_in_radians) {encoder__.reset_angle(angle_in_radians);}
  95:Core/Inc/devs/steering.h **** 
  96:Core/Inc/devs/steering.h **** 	/**
  97:Core/Inc/devs/steering.h **** 	 * \brief calculates omega of the steering motor
  98:Core/Inc/devs/steering.h **** 	 * \remark Dont forget to call this function every 10 ms
  99:Core/Inc/devs/steering.h **** 	 * \param void
 100:Core/Inc/devs/steering.h **** 	 * \return void
 101:Core/Inc/devs/steering.h **** 	 */
 102:Core/Inc/devs/steering.h **** 	void calculate_omega(){	encoder__.calculate_omega();}
 103:Core/Inc/devs/steering.h **** 
 104:Core/Inc/devs/steering.h **** 	/**
 105:Core/Inc/devs/steering.h **** 	 * \brief returns the current omega calculated by the encoder
 106:Core/Inc/devs/steering.h **** 	 */
 107:Core/Inc/devs/steering.h **** 	float get_omega(void){return encoder__.get_omega();}
 108:Core/Inc/devs/steering.h **** 
 109:Core/Inc/devs/steering.h **** 	/**
 110:Core/Inc/devs/steering.h **** 	 * \brief returns the current angle calculated by the encoder
 111:Core/Inc/devs/steering.h **** 	 */
 112:Core/Inc/devs/steering.h **** 	float get_angle(void){return encoder__.get_angle();}
 607              		.loc 4 112 0
 608 0056 1348     		ldr	r0, .L60+36
 609 0058 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 610              	.LVL69:
 611              	.LBE122:
 612              	.LBE121:
 207:Core/Src/robot/robot_functions.cpp **** 			temp_robot_angle = robot_angle - steering.get_angle();
 613              		.loc 2 207 0
 614 005c 38EE400A 		vsub.f32	s0, s16, s0
 615 0060 0E4B     		ldr	r3, .L60+28
 616 0062 83ED000A 		vstr.32	s0, [r3]
 212:Core/Src/robot/robot_functions.cpp **** }
 617              		.loc 2 212 0
 618 0066 ECE7     		b	.L54
 619              	.L59:
 620              	.LVL70:
 621              	.LBB123:
 622              	.LBB124:
 623              		.loc 4 112 0
 624 0068 0E48     		ldr	r0, .L60+36
 625 006a FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 626              	.LVL71:
 627              	.LBE124:
 628              	.LBE123:
 202:Core/Src/robot/robot_functions.cpp **** 			robot_angle = steering.get_angle() + temp_robot_angle;
 629              		.loc 2 202 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 24


 630 006e 0B4B     		ldr	r3, .L60+28
 631 0070 D3ED007A 		vldr.32	s15, [r3]
 632 0074 30EE270A 		vadd.f32	s0, s0, s15
 633 0078 074B     		ldr	r3, .L60+24
 634 007a 83ED000A 		vstr.32	s0, [r3]
 635 007e E0E7     		b	.L54
 636              	.L61:
 637              		.align	3
 638              	.L60:
 639 0080 182D4454 		.word	1413754136
 640 0084 FB210940 		.word	1074340347
 641 0088 00000000 		.word	USE_IMU_FLAG
 642 008c 00000000 		.word	.LANCHOR0
 643 0090 00000000 		.word	.LANCHOR1
 644 0094 00806640 		.word	1080459264
 645 0098 00000000 		.word	.LANCHOR2
 646 009c 00000000 		.word	.LANCHOR4
 647 00a0 00000000 		.word	leg
 648 00a4 0C000000 		.word	steering+12
 649              		.cfi_endproc
 650              	.LFE497:
 652              		.section	.text._Z23initialize_leg_positionv,"ax",%progbits
 653              		.align	1
 654              		.global	_Z23initialize_leg_positionv
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv4-sp-d16
 660              	_Z23initialize_leg_positionv:
 661              	.LFB499:
 273:Core/Src/robot/robot_functions.cpp **** {
 662              		.loc 2 273 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666 0000 08B5     		push	{r3, lr}
 667              	.LCFI17:
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 3, -8
 670              		.cfi_offset 14, -4
 671              	.LVL72:
 672              	.LBB125:
 673              	.LBB126:
 674              		.file 5 "Core/Inc/devs/leg.h"
   1:Core/Inc/devs/leg.h **** #ifndef _LEG_H_
   2:Core/Inc/devs/leg.h **** #define _LEG_H_
   3:Core/Inc/devs/leg.h **** 
   4:Core/Inc/devs/leg.h **** #include "motor.h"
   5:Core/Inc/devs/leg.h **** #include "encoder.h"
   6:Core/Inc/devs/leg.h **** #include "pid.h"
   7:Core/Inc/devs/leg.h **** #include "limit_switch.h"
   8:Core/Inc/devs/leg.h **** #include "defines.h"
   9:Core/Inc/devs/leg.h **** #include "pid_algorithms.h"
  10:Core/Inc/devs/leg.h **** 
  11:Core/Inc/devs/leg.h **** enum Leg_condition{	RAISED, 
  12:Core/Inc/devs/leg.h **** 			FALLEN, 
  13:Core/Inc/devs/leg.h **** 			UNDEFINED};
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 25


  14:Core/Inc/devs/leg.h **** 
  15:Core/Inc/devs/leg.h **** class leg
  16:Core/Inc/devs/leg.h **** {
  17:Core/Inc/devs/leg.h **** public:
  18:Core/Inc/devs/leg.h **** 	leg() {}
  19:Core/Inc/devs/leg.h **** 	leg(leg &&) = default;
  20:Core/Inc/devs/leg.h **** 	leg(const leg &) = default;
  21:Core/Inc/devs/leg.h **** 	leg &operator=(leg &&) = default;
  22:Core/Inc/devs/leg.h **** 	leg &operator=(const leg &) = default;
  23:Core/Inc/devs/leg.h **** 	~leg(){}
  24:Core/Inc/devs/leg.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  25:Core/Inc/devs/leg.h **** 		motor__.set_config(motor);
  26:Core/Inc/devs/leg.h **** 		encoder__.set_config(encoder);
  27:Core/Inc/devs/leg.h **** 	}
  28:Core/Inc/devs/leg.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  29:Core/Inc/devs/leg.h **** 		dpid_.set_P(kp);
  30:Core/Inc/devs/leg.h **** 		dpid_.set_I(ki);
  31:Core/Inc/devs/leg.h **** 		dpid_.set_D(kd);
  32:Core/Inc/devs/leg.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  33:Core/Inc/devs/leg.h **** 	}
  34:Core/Inc/devs/leg.h **** 
  35:Core/Inc/devs/leg.h **** 	
  36:Core/Inc/devs/leg.h **** 	void set_omega(float omega);
  37:Core/Inc/devs/leg.h **** 	float ramp(float omega);
  38:Core/Inc/devs/leg.h **** 	void set_gravity_compensator_constant(float kgravity){kg_ = kgravity;}
  39:Core/Inc/devs/leg.h **** 	void reset_angle(float angle_in_radians);
  40:Core/Inc/devs/leg.h **** 	void reset_actual_angle(float angle_in_radians){encoder__.reset_actual_angle(angle_in_radians);}
  41:Core/Inc/devs/leg.h **** 	void calculate_omega();
  42:Core/Inc/devs/leg.h **** 	Leg_condition is_raised();
  43:Core/Inc/devs/leg.h **** 	bool is_raised_without_deadzone();
  44:Core/Inc/devs/leg.h **** 
  45:Core/Inc/devs/leg.h **** 	int get_steps(){return steps;}
  46:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
  47:Core/Inc/devs/leg.h **** 	float get_angle(void){return encoder__.get_angle();}
 675              		.loc 5 47 0
 676 0002 3748     		ldr	r0, .L80+16
 677 0004 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 678              	.LVL73:
 679              	.LBE126:
 680              	.LBE125:
 281:Core/Src/robot/robot_functions.cpp **** 	if ((leg[0].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 681              		.loc 2 281 0
 682 0008 10EE100A 		vmov	r0, s0
 683 000c FFF7FEFF 		bl	__aeabi_f2d
 684              	.LVL74:
 685 0010 2FA3     		adr	r3, .L80
 686 0012 D3E90023 		ldrd	r2, [r3]
 687 0016 FFF7FEFF 		bl	__aeabi_dcmpgt
 688              	.LVL75:
 689 001a 80B1     		cbz	r0, .L63
 690              	.LVL76:
 691              	.LBB127:
 692              	.LBB128:
 693              		.loc 5 47 0
 694 001c 3048     		ldr	r0, .L80+16
 695 001e FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 696              	.LVL77:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 26


 697              	.LBE128:
 698              	.LBE127:
 282:Core/Src/robot/robot_functions.cpp **** 	    (leg[0].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180) && (leg[0].get_s
 699              		.loc 2 282 0
 700 0022 10EE100A 		vmov	r0, s0
 701 0026 FFF7FEFF 		bl	__aeabi_f2d
 702              	.LVL78:
 281:Core/Src/robot/robot_functions.cpp **** 	if ((leg[0].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 703              		.loc 2 281 0
 704 002a 2BA3     		adr	r3, .L80+8
 705 002c D3E90023 		ldrd	r2, [r3]
 706 0030 FFF7FEFF 		bl	__aeabi_dcmplt
 707              	.LVL79:
 708 0034 18B1     		cbz	r0, .L63
 709              	.LVL80:
 710              	.LBB129:
 711              	.LBB130:
  45:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
 712              		.loc 5 45 0
 713 0036 2B4B     		ldr	r3, .L80+20
 714 0038 1B69     		ldr	r3, [r3, #16]
 715              	.LVL81:
 716              	.LBE130:
 717              	.LBE129:
 282:Core/Src/robot/robot_functions.cpp **** 	    (leg[0].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180) && (leg[0].get_s
 718              		.loc 2 282 0
 719 003a 002B     		cmp	r3, #0
 720 003c 32D1     		bne	.L79
 721              	.L63:
 289:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(3);
 722              		.loc 2 289 0 discriminator 3
 723 003e B0EE080A 		vmov.f32	s0, #3.0e+0
 724 0042 2848     		ldr	r0, .L80+20
 725 0044 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 726              	.LVL82:
 290:Core/Src/robot/robot_functions.cpp **** 		leg0_flag = false;
 727              		.loc 2 290 0 discriminator 3
 728 0048 274B     		ldr	r3, .L80+24
 729 004a 0022     		movs	r2, #0
 730 004c 1A70     		strb	r2, [r3]
 731              	.L66:
 732              	.LVL83:
 733              	.LBB131:
 734              	.LBB132:
 735              		.loc 5 47 0
 736 004e 2748     		ldr	r0, .L80+28
 737 0050 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 738              	.LVL84:
 739              	.LBE132:
 740              	.LBE131:
 293:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 741              		.loc 2 293 0
 742 0054 10EE100A 		vmov	r0, s0
 743 0058 FFF7FEFF 		bl	__aeabi_f2d
 744              	.LVL85:
 294:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)) && (leg[1].get_
 745              		.loc 2 294 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 27


 746 005c 1CA3     		adr	r3, .L80
 747 005e D3E90023 		ldrd	r2, [r3]
 748 0062 FFF7FEFF 		bl	__aeabi_dcmpgt
 749              	.LVL86:
 750 0066 78B1     		cbz	r0, .L67
 751              	.LVL87:
 752              	.LBB133:
 753              	.LBB134:
 754              		.loc 5 47 0
 755 0068 2048     		ldr	r0, .L80+28
 756 006a FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 757              	.LVL88:
 758              	.LBE134:
 759              	.LBE133:
 294:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)) && (leg[1].get_
 760              		.loc 2 294 0
 761 006e 10EE100A 		vmov	r0, s0
 762 0072 FFF7FEFF 		bl	__aeabi_f2d
 763              	.LVL89:
 293:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 764              		.loc 2 293 0
 765 0076 18A3     		adr	r3, .L80+8
 766 0078 D3E90023 		ldrd	r2, [r3]
 767 007c FFF7FEFF 		bl	__aeabi_dcmplt
 768              	.LVL90:
 769 0080 10B1     		cbz	r0, .L67
 770              	.LVL91:
 771              	.LBB135:
 772              	.LBB136:
  45:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
 773              		.loc 5 45 0
 774 0082 184B     		ldr	r3, .L80+20
 775 0084 9B6E     		ldr	r3, [r3, #104]
 776              	.LVL92:
 777              	.LBE136:
 778              	.LBE135:
 294:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)) && (leg[1].get_
 779              		.loc 2 294 0
 780 0086 B3B9     		cbnz	r3, .L70
 781              	.L67:
 301:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(3);
 782              		.loc 2 301 0 discriminator 2
 783 0088 B0EE080A 		vmov.f32	s0, #3.0e+0
 784 008c 1848     		ldr	r0, .L80+32
 785 008e FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 786              	.LVL93:
 302:Core/Src/robot/robot_functions.cpp **** 		leg1_flag = false;
 787              		.loc 2 302 0 discriminator 2
 788 0092 184B     		ldr	r3, .L80+36
 789 0094 0022     		movs	r2, #0
 790 0096 1A70     		strb	r2, [r3]
 791              	.L71:
 305:Core/Src/robot/robot_functions.cpp **** 	if (leg0_flag && leg1_flag)
 792              		.loc 2 305 0
 793 0098 134B     		ldr	r3, .L80+24
 794 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 795 009c A3B1     		cbz	r3, .L73
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 28


 305:Core/Src/robot/robot_functions.cpp **** 	if (leg0_flag && leg1_flag)
 796              		.loc 2 305 0 is_stmt 0 discriminator 1
 797 009e 154B     		ldr	r3, .L80+36
 798 00a0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 799              	.L72:
 314:Core/Src/robot/robot_functions.cpp **** }
 800              		.loc 2 314 0 is_stmt 1
 801 00a2 08BD     		pop	{r3, pc}
 802              	.L79:
 284:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(0);
 803              		.loc 2 284 0
 804 00a4 9FED140A 		vldr.32	s0, .L80+40
 805 00a8 0E48     		ldr	r0, .L80+20
 806 00aa FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 807              	.LVL94:
 285:Core/Src/robot/robot_functions.cpp **** 		leg0_flag = true;
 808              		.loc 2 285 0
 809 00ae 0E4B     		ldr	r3, .L80+24
 810 00b0 0122     		movs	r2, #1
 811 00b2 1A70     		strb	r2, [r3]
 812 00b4 CBE7     		b	.L66
 813              	.L70:
 296:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
 814              		.loc 2 296 0
 815 00b6 9FED100A 		vldr.32	s0, .L80+40
 816 00ba 0D48     		ldr	r0, .L80+32
 817 00bc FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 818              	.LVL95:
 297:Core/Src/robot/robot_functions.cpp **** 		leg1_flag = true;
 819              		.loc 2 297 0
 820 00c0 0C4B     		ldr	r3, .L80+36
 821 00c2 0122     		movs	r2, #1
 822 00c4 1A70     		strb	r2, [r3]
 823 00c6 E7E7     		b	.L71
 824              	.L73:
 312:Core/Src/robot/robot_functions.cpp **** 		return false;
 825              		.loc 2 312 0
 826 00c8 0020     		movs	r0, #0
 827 00ca EAE7     		b	.L72
 828              	.L81:
 829 00cc AFF30080 		.align	3
 830              	.L80:
 831 00d0 70D9F97F 		.word	2147080560
 832 00d4 12E6F63F 		.word	1073145362
 833 00d8 BF808E28 		.word	680427711
 834 00dc E45DFB3F 		.word	1073438180
 835 00e0 3C000000 		.word	leg+60
 836 00e4 00000000 		.word	leg
 837 00e8 00000000 		.word	.LANCHOR5
 838 00ec 94000000 		.word	leg+148
 839 00f0 58000000 		.word	leg+88
 840 00f4 00000000 		.word	.LANCHOR6
 841 00f8 00000000 		.word	0
 842              		.cfi_endproc
 843              	.LFE499:
 845              		.global	__aeabi_d2iz
 846              		.section	.text._Z28initialize_steering_positionv,"ax",%progbits
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 29


 847              		.align	1
 848              		.global	_Z28initialize_steering_positionv
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	_Z28initialize_steering_positionv:
 855              	.LFB500:
 324:Core/Src/robot/robot_functions.cpp **** {
 856              		.loc 2 324 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860 0000 10B5     		push	{r4, lr}
 861              	.LCFI18:
 862              		.cfi_def_cfa_offset 8
 863              		.cfi_offset 4, -8
 864              		.cfi_offset 14, -4
 865              	.LVL96:
 866              	.LBB137:
 867              	.LBB138:
 868              		.loc 4 112 0
 869 0002 1F48     		ldr	r0, .L89+8
 870 0004 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 871              	.LVL97:
 872              	.LBE138:
 873              	.LBE137:
 325:Core/Src/robot/robot_functions.cpp **** 	printf("\nangle = %d\t", (int)(steering.get_angle() * 180 / PI));
 874              		.loc 2 325 0
 875 0008 DFED1E7A 		vldr.32	s15, .L89+12
 876 000c 60EE277A 		vmul.f32	s15, s0, s15
 877 0010 17EE900A 		vmov	r0, s15
 878 0014 FFF7FEFF 		bl	__aeabi_f2d
 879              	.LVL98:
 880 0018 17A3     		adr	r3, .L89
 881 001a D3E90023 		ldrd	r2, [r3]
 882 001e FFF7FEFF 		bl	__aeabi_ddiv
 883              	.LVL99:
 884 0022 FFF7FEFF 		bl	__aeabi_d2iz
 885              	.LVL100:
 886 0026 0146     		mov	r1, r0
 887 0028 1748     		ldr	r0, .L89+16
 888 002a FFF7FEFF 		bl	printf
 889              	.LVL101:
 328:Core/Src/robot/robot_functions.cpp **** 	if (((HAL_GetTick() - start_time) >= 500))
 890              		.loc 2 328 0
 891 002e FFF7FEFF 		bl	HAL_GetTick
 892              	.LVL102:
 893 0032 164B     		ldr	r3, .L89+20
 894 0034 1B68     		ldr	r3, [r3]
 895 0036 C01A     		subs	r0, r0, r3
 896 0038 B0F5FA7F 		cmp	r0, #500
 897 003c 09D2     		bcs	.L87
 334:Core/Src/robot/robot_functions.cpp **** 	if (STEERING_FLAG)
 898              		.loc 2 334 0
 899 003e 144B     		ldr	r3, .L89+24
 900 0040 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 30


 901 0042 9CB9     		cbnz	r4, .L88
 341:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0.5);
 902              		.loc 2 341 0
 903 0044 B6EE000A 		vmov.f32	s0, #5.0e-1
 904 0048 1248     		ldr	r0, .L89+28
 905 004a FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 906              	.LVL103:
 907              	.L84:
 344:Core/Src/robot/robot_functions.cpp **** }
 908              		.loc 2 344 0
 909 004e 2046     		mov	r0, r4
 910 0050 10BD     		pop	{r4, pc}
 911              	.L87:
 330:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 912              		.loc 2 330 0
 913 0052 9FED110A 		vldr.32	s0, .L89+32
 914 0056 0F48     		ldr	r0, .L89+28
 915 0058 FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 916              	.LVL104:
 331:Core/Src/robot/robot_functions.cpp **** 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 917              		.loc 2 331 0
 918 005c 0122     		movs	r2, #1
 919 005e 4FF48051 		mov	r1, #4096
 920 0062 0E48     		ldr	r0, .L89+36
 921 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 922              	.LVL105:
 332:Core/Src/robot/robot_functions.cpp **** 		return true;
 923              		.loc 2 332 0
 924 0068 0124     		movs	r4, #1
 925 006a F0E7     		b	.L84
 926              	.L88:
 336:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 927              		.loc 2 336 0
 928 006c 9FED0A0A 		vldr.32	s0, .L89+32
 929 0070 0848     		ldr	r0, .L89+28
 930 0072 FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 931              	.LVL106:
 337:Core/Src/robot/robot_functions.cpp **** 		return true;
 932              		.loc 2 337 0
 933 0076 EAE7     		b	.L84
 934              	.L90:
 935              		.align	3
 936              	.L89:
 937 0078 182D4454 		.word	1413754136
 938 007c FB210940 		.word	1074340347
 939 0080 0C000000 		.word	steering+12
 940 0084 00003443 		.word	1127481344
 941 0088 00000000 		.word	.LC0
 942 008c 00000000 		.word	.LANCHOR7
 943 0090 00000000 		.word	.LANCHOR8
 944 0094 00000000 		.word	steering
 945 0098 00000000 		.word	0
 946 009c 000C0240 		.word	1073875968
 947              		.cfi_endproc
 948              	.LFE500:
 950              		.section	.text._Z19initialize_positionv,"ax",%progbits
 951              		.align	1
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 31


 952              		.global	_Z19initialize_positionv
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 956              		.fpu fpv4-sp-d16
 958              	_Z19initialize_positionv:
 959              	.LFB498:
 222:Core/Src/robot/robot_functions.cpp **** {
 960              		.loc 2 222 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 965              	.LCFI19:
 966              		.cfi_def_cfa_offset 24
 967              		.cfi_offset 4, -24
 968              		.cfi_offset 5, -20
 969              		.cfi_offset 6, -16
 970              		.cfi_offset 7, -12
 971              		.cfi_offset 8, -8
 972              		.cfi_offset 14, -4
 973 0004 2DED028B 		vpush.64	{d8}
 974              	.LCFI20:
 975              		.cfi_def_cfa_offset 32
 976              		.cfi_offset 80, -32
 977              		.cfi_offset 81, -28
 223:Core/Src/robot/robot_functions.cpp **** 	uint32_t dt = HAL_GetTick();
 978              		.loc 2 223 0
 979 0008 FFF7FEFF 		bl	HAL_GetTick
 980              	.LVL107:
 981 000c 0646     		mov	r6, r0
 982              	.LVL108:
 983              	.L92:
 226:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 984              		.loc 2 226 0
 985 000e FFF7FEFF 		bl	HAL_GetTick
 986              	.LVL109:
 987 0012 801B     		subs	r0, r0, r6
 988 0014 0928     		cmp	r0, #9
 989 0016 FAD9     		bls	.L92
 228:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 990              		.loc 2 228 0
 991 0018 FFF7FEFF 		bl	HAL_GetTick
 992              	.LVL110:
 993 001c 0646     		mov	r6, r0
 994              	.LVL111:
 229:Core/Src/robot/robot_functions.cpp **** 			printf("\nInitializing_Leg_Orientation\t");
 995              		.loc 2 229 0
 996 001e 3A48     		ldr	r0, .L100
 997              	.LVL112:
 998 0020 FFF7FEFF 		bl	printf
 999              	.LVL113:
 230:Core/Src/robot/robot_functions.cpp **** 			if (initialize_leg_position() == true)
 1000              		.loc 2 230 0
 1001 0024 FFF7FEFF 		bl	_Z23initialize_leg_positionv
 1002              	.LVL114:
 1003 0028 0028     		cmp	r0, #0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 32


 1004 002a F0D0     		beq	.L92
 1005              	.LBB139:
 234:Core/Src/robot/robot_functions.cpp **** 	for (int32_t i = 0; i < 3000000; i++)
 1006              		.loc 2 234 0
 1007 002c 0024     		movs	r4, #0
 1008 002e 00E0     		b	.L96
 1009              	.LVL115:
 1010              	.L95:
 234:Core/Src/robot/robot_functions.cpp **** 	for (int32_t i = 0; i < 3000000; i++)
 1011              		.loc 2 234 0 is_stmt 0 discriminator 2
 1012 0030 0134     		adds	r4, r4, #1
 1013              	.LVL116:
 1014              	.L96:
 234:Core/Src/robot/robot_functions.cpp **** 	for (int32_t i = 0; i < 3000000; i++)
 1015              		.loc 2 234 0 discriminator 1
 1016 0032 364B     		ldr	r3, .L100+4
 1017 0034 9C42     		cmp	r4, r3
 1018 0036 3CDC     		bgt	.L94
 236:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 1019              		.loc 2 236 0 is_stmt 1
 1020 0038 FFF7FEFF 		bl	HAL_GetTick
 1021              	.LVL117:
 1022 003c 801B     		subs	r0, r0, r6
 1023 003e 0928     		cmp	r0, #9
 1024 0040 F6D9     		bls	.L95
 238:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 1025              		.loc 2 238 0
 1026 0042 FFF7FEFF 		bl	HAL_GetTick
 1027              	.LVL118:
 1028 0046 0646     		mov	r6, r0
 1029              	.LVL119:
 239:Core/Src/robot/robot_functions.cpp **** 			printf("\n\tWaiting_The_Leg \t");
 1030              		.loc 2 239 0
 1031 0048 3148     		ldr	r0, .L100+8
 1032              	.LVL120:
 1033 004a FFF7FEFF 		bl	printf
 1034              	.LVL121:
 240:Core/Src/robot/robot_functions.cpp **** 			leg[0].steps = 0;
 1035              		.loc 2 240 0
 1036 004e 314D     		ldr	r5, .L100+12
 1037 0050 0027     		movs	r7, #0
 1038 0052 2F61     		str	r7, [r5, #16]
 241:Core/Src/robot/robot_functions.cpp **** 			leg[1].steps = 0;
 1039              		.loc 2 241 0
 1040 0054 AF66     		str	r7, [r5, #104]
 242:Core/Src/robot/robot_functions.cpp **** 			leg[0].reset_angle(90 * PI / 180);
 1041              		.loc 2 242 0
 1042 0056 9FED308A 		vldr.32	s16, .L100+16
 1043 005a B0EE480A 		vmov.f32	s0, s16
 1044 005e 2846     		mov	r0, r5
 1045 0060 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 1046              	.LVL122:
 243:Core/Src/robot/robot_functions.cpp **** 			leg[1].reset_angle(90 * PI / 180);
 1047              		.loc 2 243 0
 1048 0064 05F15808 		add	r8, r5, #88
 1049 0068 B0EE480A 		vmov.f32	s0, s16
 1050 006c 4046     		mov	r0, r8
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 33


 1051 006e FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 1052              	.LVL123:
 1053              	.LBB140:
 1054              	.LBB141:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 1055              		.loc 5 40 0
 1056 0072 B0EE480A 		vmov.f32	s0, s16
 1057 0076 05F13C00 		add	r0, r5, #60
 1058 007a FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 1059              	.LVL124:
 1060              	.LBE141:
 1061              	.LBE140:
 1062              	.LBB142:
 1063              	.LBB143:
 1064 007e B0EE480A 		vmov.f32	s0, s16
 1065 0082 05F19400 		add	r0, r5, #148
 1066 0086 FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 1067              	.LVL125:
 1068              	.LBE143:
 1069              	.LBE142:
 246:Core/Src/robot/robot_functions.cpp **** 			leg[0].set_omega(0);
 1070              		.loc 2 246 0
 1071 008a 9FED248A 		vldr.32	s16, .L100+20
 1072 008e B0EE480A 		vmov.f32	s0, s16
 1073 0092 2846     		mov	r0, r5
 1074 0094 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1075              	.LVL126:
 247:Core/Src/robot/robot_functions.cpp **** 			leg[1].set_omega(0);
 1076              		.loc 2 247 0
 1077 0098 B0EE480A 		vmov.f32	s0, s16
 1078 009c 4046     		mov	r0, r8
 1079 009e FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1080              	.LVL127:
 248:Core/Src/robot/robot_functions.cpp **** 			steering.set_omega(0);
 1081              		.loc 2 248 0
 1082 00a2 B0EE480A 		vmov.f32	s0, s16
 1083 00a6 1E48     		ldr	r0, .L100+24
 1084 00a8 FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 1085              	.LVL128:
 249:Core/Src/robot/robot_functions.cpp **** 			STEERING_FLAG = false;
 1086              		.loc 2 249 0
 1087 00ac 1D4B     		ldr	r3, .L100+28
 1088 00ae 1F70     		strb	r7, [r3]
 1089 00b0 BEE7     		b	.L95
 1090              	.L94:
 1091              	.LBE139:
 252:Core/Src/robot/robot_functions.cpp **** 	start_time = HAL_GetTick();
 1092              		.loc 2 252 0
 1093 00b2 FFF7FEFF 		bl	HAL_GetTick
 1094              	.LVL129:
 1095 00b6 1C4B     		ldr	r3, .L100+32
 1096 00b8 1860     		str	r0, [r3]
 1097              	.LVL130:
 1098              	.L97:
 255:Core/Src/robot/robot_functions.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 1099              		.loc 2 255 0
 1100 00ba FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 34


 1101              	.LVL131:
 1102 00be 801B     		subs	r0, r0, r6
 1103 00c0 0928     		cmp	r0, #9
 1104 00c2 FAD9     		bls	.L97
 257:Core/Src/robot/robot_functions.cpp **** 			dt = HAL_GetTick();
 1105              		.loc 2 257 0
 1106 00c4 FFF7FEFF 		bl	HAL_GetTick
 1107              	.LVL132:
 1108 00c8 0646     		mov	r6, r0
 1109              	.LVL133:
 258:Core/Src/robot/robot_functions.cpp **** 			printf("\tInitializing_Steering_Orientation\t %d \t %d", (int)HAL_GetTick(), (int)start_time);
 1110              		.loc 2 258 0
 1111 00ca FFF7FEFF 		bl	HAL_GetTick
 1112              	.LVL134:
 1113 00ce 164B     		ldr	r3, .L100+32
 1114 00d0 1A68     		ldr	r2, [r3]
 1115 00d2 0146     		mov	r1, r0
 1116 00d4 1548     		ldr	r0, .L100+36
 1117 00d6 FFF7FEFF 		bl	printf
 1118              	.LVL135:
 259:Core/Src/robot/robot_functions.cpp **** 			leg[0].set_omega(0);
 1119              		.loc 2 259 0
 1120 00da 9FED108A 		vldr.32	s16, .L100+20
 1121 00de 0D4C     		ldr	r4, .L100+12
 1122 00e0 B0EE480A 		vmov.f32	s0, s16
 1123 00e4 2046     		mov	r0, r4
 1124 00e6 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1125              	.LVL136:
 260:Core/Src/robot/robot_functions.cpp **** 			leg[1].set_omega(0);
 1126              		.loc 2 260 0
 1127 00ea B0EE480A 		vmov.f32	s0, s16
 1128 00ee 04F15800 		add	r0, r4, #88
 1129 00f2 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1130              	.LVL137:
 261:Core/Src/robot/robot_functions.cpp **** 			if (initialize_steering_position() == true)
 1131              		.loc 2 261 0
 1132 00f6 FFF7FEFF 		bl	_Z28initialize_steering_positionv
 1133              	.LVL138:
 1134 00fa 0028     		cmp	r0, #0
 1135 00fc DDD0     		beq	.L97
 265:Core/Src/robot/robot_functions.cpp **** }
 1136              		.loc 2 265 0
 1137 00fe BDEC028B 		vldm	sp!, {d8}
 1138              	.LCFI21:
 1139              		.cfi_restore 80
 1140              		.cfi_restore 81
 1141              		.cfi_def_cfa_offset 24
 1142 0102 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1143              	.LVL139:
 1144              	.L101:
 1145 0106 00BF     		.align	2
 1146              	.L100:
 1147 0108 00000000 		.word	.LC1
 1148 010c BFC62D00 		.word	2999999
 1149 0110 20000000 		.word	.LC2
 1150 0114 00000000 		.word	leg
 1151 0118 DB0FC93F 		.word	1070141403
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 35


 1152 011c 00000000 		.word	0
 1153 0120 00000000 		.word	steering
 1154 0124 00000000 		.word	.LANCHOR8
 1155 0128 00000000 		.word	.LANCHOR7
 1156 012c 34000000 		.word	.LC3
 1157              		.cfi_endproc
 1158              	.LFE498:
 1160              		.section	.text._Z11getup_n_runv,"ax",%progbits
 1161              		.align	1
 1162              		.global	_Z11getup_n_runv
 1163              		.syntax unified
 1164              		.thumb
 1165              		.thumb_func
 1166              		.fpu fpv4-sp-d16
 1168              	_Z11getup_n_runv:
 1169              	.LFB501:
 347:Core/Src/robot/robot_functions.cpp **** {
 1170              		.loc 2 347 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174 0000 10B5     		push	{r4, lr}
 1175              	.LCFI22:
 1176              		.cfi_def_cfa_offset 8
 1177              		.cfi_offset 4, -8
 1178              		.cfi_offset 14, -4
 1179 0002 2DED028B 		vpush.64	{d8}
 1180              	.LCFI23:
 1181              		.cfi_def_cfa_offset 16
 1182              		.cfi_offset 80, -16
 1183              		.cfi_offset 81, -12
 1184              	.LVL140:
 352:Core/Src/robot/robot_functions.cpp **** 	leg[0].set_omega(0);
 1185              		.loc 2 352 0
 1186 0006 2A4C     		ldr	r4, .L111+16
 1187 0008 9FED2A0A 		vldr.32	s0, .L111+20
 1188 000c 2046     		mov	r0, r4
 1189 000e FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1190              	.LVL141:
 1191              	.LBB144:
 1192              	.LBB145:
 1193              		.loc 5 47 0
 1194 0012 04F19400 		add	r0, r4, #148
 1195 0016 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 1196              	.LVL142:
 1197              	.LBE145:
 1198              	.LBE144:
 354:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 1199              		.loc 2 354 0
 1200 001a 10EE100A 		vmov	r0, s0
 1201 001e FFF7FEFF 		bl	__aeabi_f2d
 1202              	.LVL143:
 1203 0022 1FA3     		adr	r3, .L111
 1204 0024 D3E90023 		ldrd	r2, [r3]
 1205 0028 FFF7FEFF 		bl	__aeabi_dcmpgt
 1206              	.LVL144:
 1207 002c 68B1     		cbz	r0, .L103
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 36


 1208              	.LVL145:
 1209              	.LBB146:
 1210              	.LBB147:
 1211              		.loc 5 47 0
 1212 002e 04F19400 		add	r0, r4, #148
 1213 0032 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 1214              	.LVL146:
 1215              	.LBE147:
 1216              	.LBE146:
 355:Core/Src/robot/robot_functions.cpp **** 	    (leg[1].get_angle() < ((leg_initial_position + initial_tolerance) * PI / 180)))
 1217              		.loc 2 355 0
 1218 0036 10EE100A 		vmov	r0, s0
 1219 003a FFF7FEFF 		bl	__aeabi_f2d
 1220              	.LVL147:
 354:Core/Src/robot/robot_functions.cpp **** 	if ((leg[1].get_angle() > ((leg_initial_position - initial_tolerance) * PI / 180)) &&
 1221              		.loc 2 354 0
 1222 003e 1AA3     		adr	r3, .L111+8
 1223 0040 D3E90023 		ldrd	r2, [r3]
 1224 0044 FFF7FEFF 		bl	__aeabi_dcmplt
 1225              	.LVL148:
 1226 0048 40B9     		cbnz	r0, .L110
 1227              	.L103:
 367:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(3);
 1228              		.loc 2 367 0 discriminator 4
 1229 004a B0EE080A 		vmov.f32	s0, #3.0e+0
 1230 004e 1A48     		ldr	r0, .L111+24
 1231 0050 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1232              	.LVL149:
 369:Core/Src/robot/robot_functions.cpp **** 		return false;
 1233              		.loc 2 369 0 discriminator 4
 1234 0054 0020     		movs	r0, #0
 1235              	.L106:
 372:Core/Src/robot/robot_functions.cpp **** }
 1236              		.loc 2 372 0
 1237 0056 BDEC028B 		vldm	sp!, {d8}
 1238              	.LCFI24:
 1239              		.cfi_remember_state
 1240              		.cfi_restore 80
 1241              		.cfi_restore 81
 1242              		.cfi_def_cfa_offset 8
 1243 005a 10BD     		pop	{r4, pc}
 1244              	.L110:
 1245              	.LCFI25:
 1246              		.cfi_restore_state
 357:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
 1247              		.loc 2 357 0
 1248 005c 5834     		adds	r4, r4, #88
 1249 005e 9FED150A 		vldr.32	s0, .L111+20
 1250 0062 2046     		mov	r0, r4
 1251 0064 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1252              	.LVL150:
 1253              	.LBB148:
 1254              	.LBB149:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 1255              		.loc 5 40 0
 1256 0068 9FED148A 		vldr.32	s16, .L111+28
 1257 006c B0EE480A 		vmov.f32	s0, s16
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 37


 1258 0070 A4F11C00 		sub	r0, r4, #28
 1259 0074 FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 1260              	.LVL151:
 1261              	.LBE149:
 1262              	.LBE148:
 1263              	.LBB150:
 1264              	.LBB151:
 1265 0078 B0EE480A 		vmov.f32	s0, s16
 1266 007c 04F13C00 		add	r0, r4, #60
 1267 0080 FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 1268              	.LVL152:
 1269              	.LBE151:
 1270              	.LBE150:
 360:Core/Src/robot/robot_functions.cpp **** 		leg[0].reset_angle(90 * PI / 180);
 1271              		.loc 2 360 0
 1272 0084 B0EE480A 		vmov.f32	s0, s16
 1273 0088 A4F15800 		sub	r0, r4, #88
 1274 008c FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 1275              	.LVL153:
 361:Core/Src/robot/robot_functions.cpp **** 		leg[1].reset_angle(90 * PI / 180);
 1276              		.loc 2 361 0
 1277 0090 B0EE480A 		vmov.f32	s0, s16
 1278 0094 2046     		mov	r0, r4
 1279 0096 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 1280              	.LVL154:
 363:Core/Src/robot/robot_functions.cpp **** 		return true;
 1281              		.loc 2 363 0
 1282 009a 0120     		movs	r0, #1
 1283 009c DBE7     		b	.L106
 1284              	.L112:
 1285 009e 00BF     		.align	3
 1286              	.L111:
 1287 00a0 44031FEA 		.word	-367066300
 1288 00a4 0604F83F 		.word	1073218566
 1289 00a8 EC5669BE 		.word	-1100392724
 1290 00ac EF3FFA3F 		.word	1073364975
 1291 00b0 00000000 		.word	leg
 1292 00b4 00000000 		.word	0
 1293 00b8 58000000 		.word	leg+88
 1294 00bc DB0FC93F 		.word	1070141403
 1295              		.cfi_endproc
 1296              	.LFE501:
 1298              		.section	.text._Z15calculate_datasv,"ax",%progbits
 1299              		.align	1
 1300              		.global	_Z15calculate_datasv
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1304              		.fpu fpv4-sp-d16
 1306              	_Z15calculate_datasv:
 1307              	.LFB502:
 382:Core/Src/robot/robot_functions.cpp **** {
 1308              		.loc 2 382 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 16
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 38


 1313              	.LCFI26:
 1314              		.cfi_def_cfa_offset 8
 1315              		.cfi_offset 4, -8
 1316              		.cfi_offset 14, -4
 1317 0002 84B0     		sub	sp, sp, #16
 1318              	.LCFI27:
 1319              		.cfi_def_cfa_offset 24
 383:Core/Src/robot/robot_functions.cpp **** 	leg[0].calculate_omega();
 1320              		.loc 2 383 0
 1321 0004 0C4C     		ldr	r4, .L115
 1322 0006 2046     		mov	r0, r4
 1323 0008 FFF7FEFF 		bl	_ZN3leg15calculate_omegaEv
 1324              	.LVL155:
 384:Core/Src/robot/robot_functions.cpp **** 	leg[1].calculate_omega();
 1325              		.loc 2 384 0
 1326 000c 04F15800 		add	r0, r4, #88
 1327 0010 FFF7FEFF 		bl	_ZN3leg15calculate_omegaEv
 1328              	.LVL156:
 1329              	.LBB152:
 1330              	.LBB153:
 102:Core/Inc/devs/steering.h **** 
 1331              		.loc 4 102 0
 1332 0014 0948     		ldr	r0, .L115+4
 1333 0016 FFF7FEFF 		bl	_ZN7encoder15calculate_omegaEv
 1334              	.LVL157:
 1335              	.LBE153:
 1336              	.LBE152:
 386:Core/Src/robot/robot_functions.cpp **** 	curr_angle = read_Orientation(10);
 1337              		.loc 2 386 0
 1338 001a 01AC     		add	r4, sp, #4
 1339 001c 0A21     		movs	r1, #10
 1340 001e 2046     		mov	r0, r4
 1341 0020 FFF7FEFF 		bl	_Z16read_Orientationm
 1342              	.LVL158:
 1343 0024 064B     		ldr	r3, .L115+8
 1344 0026 94E80700 		ldm	r4, {r0, r1, r2}
 1345 002a 83E80700 		stm	r3, {r0, r1, r2}
 387:Core/Src/robot/robot_functions.cpp **** 	calculate_robot_angle();
 1346              		.loc 2 387 0
 1347 002e FFF7FEFF 		bl	_Z21calculate_robot_anglev
 1348              	.LVL159:
 390:Core/Src/robot/robot_functions.cpp **** }
 1349              		.loc 2 390 0
 1350 0032 04B0     		add	sp, sp, #16
 1351              	.LCFI28:
 1352              		.cfi_def_cfa_offset 8
 1353              		@ sp needed
 1354 0034 10BD     		pop	{r4, pc}
 1355              	.L116:
 1356 0036 00BF     		.align	2
 1357              	.L115:
 1358 0038 00000000 		.word	leg
 1359 003c 0C000000 		.word	steering+12
 1360 0040 00000000 		.word	.LANCHOR1
 1361              		.cfi_endproc
 1362              	.LFE502:
 1364              		.section	.text._Z14motion_profilefff,"ax",%progbits
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 39


 1365              		.align	1
 1366              		.global	_Z14motion_profilefff
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	_Z14motion_profilefff:
 1373              	.LFB503:
 393:Core/Src/robot/robot_functions.cpp **** {
 1374              		.loc 2 393 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 1379              	.LVL160:
 397:Core/Src/robot/robot_functions.cpp **** 	if (angle_in_degrees > 180)
 1380              		.loc 2 397 0
 1381 0000 DFED237A 		vldr.32	s15, .L136
 1382 0004 B4EEE70A 		vcmpe.f32	s0, s15
 1383 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1384 000c 01DD     		ble	.L118
 399:Core/Src/robot/robot_functions.cpp **** 		angle_in_degrees -= 180;
 1385              		.loc 2 399 0
 1386 000e 30EE670A 		vsub.f32	s0, s0, s15
 1387              	.LVL161:
 1388              	.L118:
 402:Core/Src/robot/robot_functions.cpp **** 	if ((angle_in_degrees >= 0) && (angle_in_degrees <= damping_angle))
 1389              		.loc 2 402 0
 1390 0012 B5EEC00A 		vcmpe.f32	s0, #0
 1391 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1392 001a 06DB     		blt	.L120
 402:Core/Src/robot/robot_functions.cpp **** 	if ((angle_in_degrees >= 0) && (angle_in_degrees <= damping_angle))
 1393              		.loc 2 402 0 is_stmt 0 discriminator 1
 1394 001c F3EE0E7A 		vmov.f32	s15, #3.0e+1
 1395 0020 B4EEE70A 		vcmpe.f32	s0, s15
 1396 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1397 0028 1ED9     		bls	.L135
 1398              	.L120:
 408:Core/Src/robot/robot_functions.cpp **** 	else if ((angle_in_degrees >= (180 - damping_angle)) && (angle_in_degrees <= 180))
 1399              		.loc 2 408 0 is_stmt 1
 1400 002a DFED1A7A 		vldr.32	s15, .L136+4
 1401 002e B4EEE70A 		vcmpe.f32	s0, s15
 1402 0032 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1403 0036 24DB     		blt	.L133
 408:Core/Src/robot/robot_functions.cpp **** 	else if ((angle_in_degrees >= (180 - damping_angle)) && (angle_in_degrees <= 180))
 1404              		.loc 2 408 0 is_stmt 0 discriminator 1
 1405 0038 DFED157A 		vldr.32	s15, .L136
 1406 003c B4EEE70A 		vcmpe.f32	s0, s15
 1407 0040 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1408 0044 20D8     		bhi	.L134
 410:Core/Src/robot/robot_functions.cpp **** 		speed = ((min_speed - max_speed) / (180 - (180 - damping_angle))) * (angle_in_degrees - (180 - da
 1409              		.loc 2 410 0 is_stmt 1
 1410 0046 DFED147A 		vldr.32	s15, .L136+8
 1411 004a 77EEC17A 		vsub.f32	s15, s15, s2
 1412 004e F3EE0E6A 		vmov.f32	s13, #3.0e+1
 1413 0052 87EEA67A 		vdiv.f32	s14, s15, s13
 1414 0056 DFED0F7A 		vldr.32	s15, .L136+4
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 40


 1415 005a 70EE677A 		vsub.f32	s15, s0, s15
 1416 005e 27EE270A 		vmul.f32	s0, s14, s15
 1417              	.LVL162:
 1418 0062 30EE010A 		vadd.f32	s0, s0, s2
 1419              	.LVL163:
 1420 0066 7047     		bx	lr
 1421              	.LVL164:
 1422              	.L135:
 404:Core/Src/robot/robot_functions.cpp **** 		speed = ((max_speed - min_speed) / (damping_angle - 0)) * (angle_in_degrees - 0) + min_speed;
 1423              		.loc 2 404 0
 1424 0068 9FED0B7A 		vldr.32	s14, .L136+8
 1425 006c 71EE477A 		vsub.f32	s15, s2, s14
 1426 0070 F3EE0E6A 		vmov.f32	s13, #3.0e+1
 1427 0074 87EEA61A 		vdiv.f32	s2, s15, s13
 1428              	.LVL165:
 1429 0078 21EE001A 		vmul.f32	s2, s2, s0
 1430 007c 31EE070A 		vadd.f32	s0, s2, s14
 1431              	.LVL166:
 1432 0080 7047     		bx	lr
 1433              	.LVL167:
 1434              	.L133:
 416:Core/Src/robot/robot_functions.cpp **** 		speed = max_speed;
 1435              		.loc 2 416 0
 1436 0082 B0EE410A 		vmov.f32	s0, s2
 1437              	.LVL168:
 1438 0086 7047     		bx	lr
 1439              	.LVL169:
 1440              	.L134:
 1441 0088 B0EE410A 		vmov.f32	s0, s2
 1442              	.LVL170:
 1443              		.loc 2 421 0
 1444 008c 7047     		bx	lr
 1445              	.L137:
 1446 008e 00BF     		.align	2
 1447              	.L136:
 1448 0090 00003443 		.word	1127481344
 1449 0094 00001643 		.word	1125515264
 1450 0098 CDCC8C3F 		.word	1066192077
 1451              		.cfi_endproc
 1452              	.LFE503:
 1454              		.section	.text._Z8move_legif,"ax",%progbits
 1455              		.align	1
 1456              		.global	_Z8move_legif
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	_Z8move_legif:
 1463              	.LFB493:
  81:Core/Src/robot/robot_functions.cpp **** {
 1464              		.loc 2 81 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468              	.LVL171:
 1469 0000 10B5     		push	{r4, lr}
 1470              	.LCFI29:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 41


 1471              		.cfi_def_cfa_offset 8
 1472              		.cfi_offset 4, -8
 1473              		.cfi_offset 14, -4
 1474 0002 2DED028B 		vpush.64	{d8}
 1475              	.LCFI30:
 1476              		.cfi_def_cfa_offset 16
 1477              		.cfi_offset 80, -16
 1478              		.cfi_offset 81, -12
 1479              	.LVL172:
  86:Core/Src/robot/robot_functions.cpp **** 	leg_speed = ((step==100)||(step== (int)steps[6])) ? 4.3 : robot_speed;
 1480              		.loc 2 86 0
 1481 0006 6428     		cmp	r0, #100
 1482 0008 55D0     		beq	.L142
  86:Core/Src/robot/robot_functions.cpp **** 	leg_speed = ((step==100)||(step== (int)steps[6])) ? 4.3 : robot_speed;
 1483              		.loc 2 86 0 is_stmt 0 discriminator 2
 1484 000a 2F4B     		ldr	r3, .L147+8
 1485 000c D3ED067A 		vldr.32	s15, [r3, #24]
 1486 0010 FDEEE77A 		vcvt.s32.f32	s15, s15
 1487 0014 17EE903A 		vmov	r3, s15	@ int
 1488 0018 8342     		cmp	r3, r0
 1489 001a 49D0     		beq	.L146
  86:Core/Src/robot/robot_functions.cpp **** 	leg_speed = ((step==100)||(step== (int)steps[6])) ? 4.3 : robot_speed;
 1490              		.loc 2 86 0
 1491 001c B1EE088A 		vmov.f32	s16, #6.0e+0
 1492              	.L139:
 1493              	.LVL173:
 1494              	.LBB154:
 1495              	.LBB155:
 1496              		.loc 5 47 0 is_stmt 1 discriminator 6
 1497 0020 2A4C     		ldr	r4, .L147+12
 1498 0022 2046     		mov	r0, r4
 1499              	.LVL174:
 1500 0024 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 1501              	.LVL175:
 1502              	.LBE155:
 1503              	.LBE154:
  88:Core/Src/robot/robot_functions.cpp **** 	leg_speed = motion_profile(leg[0].get_angle() * 180 / PI, 1, leg_speed);
 1504              		.loc 2 88 0 discriminator 6
 1505 0028 DFED297A 		vldr.32	s15, .L147+16
 1506 002c 60EE277A 		vmul.f32	s15, s0, s15
 1507 0030 17EE900A 		vmov	r0, s15
 1508 0034 FFF7FEFF 		bl	__aeabi_f2d
 1509              	.LVL176:
 1510 0038 21A3     		adr	r3, .L147
 1511 003a D3E90023 		ldrd	r2, [r3]
 1512 003e FFF7FEFF 		bl	__aeabi_ddiv
 1513              	.LVL177:
 1514 0042 FFF7FEFF 		bl	__aeabi_d2f
 1515              	.LVL178:
 1516 0046 B0EE481A 		vmov.f32	s2, s16
 1517 004a F7EE000A 		vmov.f32	s1, #1.0e+0
 1518 004e 00EE100A 		vmov	s0, r0
 1519 0052 FFF7FEFF 		bl	_Z14motion_profilefff
 1520              	.LVL179:
 1521 0056 F0EE408A 		vmov.f32	s17, s0
 1522              	.LVL180:
 1523              	.LBB156:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 42


 1524              	.LBB157:
  48:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
 1525              		.loc 5 48 0 discriminator 6
 1526 005a 2046     		mov	r0, r4
 1527 005c FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 1528              	.LVL181:
 1529 0060 B0EE408A 		vmov.f32	s16, s0
 1530              	.LVL182:
 1531              	.LBE157:
 1532              	.LBE156:
 1533              	.LBB158:
 1534              	.LBB159:
 1535 0064 04F15800 		add	r0, r4, #88
 1536 0068 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 1537              	.LVL183:
 1538              	.LBE159:
 1539              	.LBE158:
  90:Core/Src/robot/robot_functions.cpp **** 	del_speed = 3 * (leg[0].get_actual_angle() - leg[1].get_actual_angle()) * leg_speed;
 1540              		.loc 2 90 0 discriminator 6
 1541 006c 38EE408A 		vsub.f32	s16, s16, s0
 1542 0070 B0EE080A 		vmov.f32	s0, #3.0e+0
 1543 0074 28EE008A 		vmul.f32	s16, s16, s0
 1544 0078 28EE288A 		vmul.f32	s16, s16, s17
 1545              	.LVL184:
 1546              	.LBB160:
 1547              	.LBB161:
 1548              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
   1:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // -*- C++ -*- C forwarding header.
   2:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
   3:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** //
   5:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // any later version.
  10:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  11:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // GNU General Public License for more details.
  15:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  16:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  20:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  25:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** /** @file include/cmath
  26:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *
  29:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  and its contents are (mostly) the same as that header, but are all
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 43


  31:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  *  as macros in C).
  33:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****  */
  34:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  35:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** //
  36:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // ISO C++ 14882: 26.5  C library
  37:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** //
  38:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  39:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #pragma GCC system_header
  40:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  41:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #include <bits/c++config.h>
  42:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #include <bits/cpp_type_traits.h>
  43:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #include <ext/type_traits.h>
  44:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #include_next <math.h>
  46:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #include <bits/std_abs.h>
  48:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  49:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef _GLIBCXX_CMATH
  50:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #define _GLIBCXX_CMATH 1
  51:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  52:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef div
  54:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef acos
  55:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef asin
  56:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef atan
  57:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef atan2
  58:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef ceil
  59:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef cos
  60:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef cosh
  61:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef exp
  62:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef fabs
  63:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef floor
  64:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef fmod
  65:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef frexp
  66:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef ldexp
  67:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef log
  68:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef log10
  69:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef modf
  70:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef pow
  71:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef sin
  72:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef sinh
  73:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef sqrt
  74:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef tan
  75:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #undef tanh
  76:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  77:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** extern "C++"
  78:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** {
  79:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** {
  81:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  83:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::acos;
  84:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  85:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   acos(float __x)
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 44


  88:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_acosf(__x); }
  89:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  90:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   acos(long double __x)
  92:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_acosl(__x); }
  93:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
  94:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
  95:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
  96:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
  97:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
  99:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     acos(_Tp __x)
 100:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_acos(__x); }
 101:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 102:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::asin;
 103:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 104:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   asin(float __x)
 107:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_asinf(__x); }
 108:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 109:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   asin(long double __x)
 111:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_asinl(__x); }
 112:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 113:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 114:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 115:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 116:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 118:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     asin(_Tp __x)
 119:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_asin(__x); }
 120:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 121:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::atan;
 122:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 123:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   atan(float __x)
 126:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_atanf(__x); }
 127:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 128:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   atan(long double __x)
 130:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_atanl(__x); }
 131:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 132:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 133:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 134:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 135:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 137:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     atan(_Tp __x)
 138:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_atan(__x); }
 139:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 140:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::atan2;
 141:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 142:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   atan2(float __y, float __x)
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 45


 145:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_atan2f(__y, __x); }
 146:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 147:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   atan2(long double __y, long double __x)
 149:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_atan2l(__y, __x); }
 150:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 151:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 152:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp, typename _Up>
 153:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 154:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     atan2(_Tp __y, _Up __x)
 156:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     {
 157:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****       return atan2(__type(__y), __type(__x));
 159:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     }
 160:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 161:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::ceil;
 162:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 163:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   ceil(float __x)
 166:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_ceilf(__x); }
 167:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 168:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   ceil(long double __x)
 170:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_ceill(__x); }
 171:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 172:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 173:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 174:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 175:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 177:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     ceil(_Tp __x)
 178:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_ceil(__x); }
 179:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 180:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::cos;
 181:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 182:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   cos(float __x)
 185:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_cosf(__x); }
 186:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 187:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   cos(long double __x)
 189:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_cosl(__x); }
 190:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 191:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 192:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 193:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 194:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 196:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     cos(_Tp __x)
 197:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_cos(__x); }
 198:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 199:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::cosh;
 200:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 201:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 46


 202:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   cosh(float __x)
 204:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_coshf(__x); }
 205:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 206:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   cosh(long double __x)
 208:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_coshl(__x); }
 209:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 210:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 211:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 212:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 213:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 215:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     cosh(_Tp __x)
 216:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_cosh(__x); }
 217:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 218:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::exp;
 219:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 220:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   exp(float __x)
 223:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_expf(__x); }
 224:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 225:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   exp(long double __x)
 227:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_expl(__x); }
 228:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #endif
 229:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 230:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   template<typename _Tp>
 231:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 232:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****                                     double>::__type
 234:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     exp(_Tp __x)
 235:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****     { return __builtin_exp(__x); }
 236:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 237:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   using ::fabs;
 238:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** 
 239:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   fabs(float __x)
 242:c:\program files (x86)\gnu tools arm embedded\7 2017-q4-major\arm-none-eabi\include\c++\7.2.1\cmath ****   { return __builtin_fabsf(__x); }
 1549              		.loc 6 242 0 discriminator 6
 1550 007c F0EEC87A 		vabs.f32	s15, s16
 1551              	.LVL185:
 1552              	.LBE161:
 1553              	.LBE160:
  91:Core/Src/robot/robot_functions.cpp **** 	if (fabs(del_speed) >= leg_speed)
 1554              		.loc 2 91 0 discriminator 6
 1555 0080 F4EEE78A 		vcmpe.f32	s17, s15
 1556 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1557 0088 03D8     		bhi	.L140
  93:Core/Src/robot/robot_functions.cpp **** 		del_speed /= fabs(del_speed);
 1558              		.loc 2 93 0
 1559 008a 88EE277A 		vdiv.f32	s14, s16, s15
 1560              	.LVL186:
  94:Core/Src/robot/robot_functions.cpp **** 		del_speed *= leg_speed;
 1561              		.loc 2 94 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 47


 1562 008e 28EE878A 		vmul.f32	s16, s17, s14
 1563              	.LVL187:
 1564              	.L140:
  96:Core/Src/robot/robot_functions.cpp **** 	leg[0].set_omega(leg_speed - del_speed);
 1565              		.loc 2 96 0
 1566 0092 104C     		ldr	r4, .L147+20
 1567 0094 38EEC80A 		vsub.f32	s0, s17, s16
 1568 0098 2046     		mov	r0, r4
 1569 009a FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1570              	.LVL188:
  97:Core/Src/robot/robot_functions.cpp **** 	leg[1].set_omega(leg_speed + del_speed);
 1571              		.loc 2 97 0
 1572 009e 38EE280A 		vadd.f32	s0, s16, s17
 1573 00a2 04F15800 		add	r0, r4, #88
 1574 00a6 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1575              	.LVL189:
  98:Core/Src/robot/robot_functions.cpp **** }
 1576              		.loc 2 98 0
 1577 00aa BDEC028B 		vldm	sp!, {d8}
 1578              	.LCFI31:
 1579              		.cfi_remember_state
 1580              		.cfi_restore 80
 1581              		.cfi_restore 81
 1582              		.cfi_def_cfa_offset 8
 1583              	.LVL190:
 1584 00ae 10BD     		pop	{r4, pc}
 1585              	.LVL191:
 1586              	.L146:
 1587              	.LCFI32:
 1588              		.cfi_restore_state
  86:Core/Src/robot/robot_functions.cpp **** 	leg_speed = ((step==100)||(step== (int)steps[6])) ? 4.3 : robot_speed;
 1589              		.loc 2 86 0
 1590 00b0 9FED098A 		vldr.32	s16, .L147+24
 1591 00b4 B4E7     		b	.L139
 1592              	.L142:
 1593 00b6 9FED088A 		vldr.32	s16, .L147+24
 1594 00ba B1E7     		b	.L139
 1595              	.L148:
 1596 00bc AFF30080 		.align	3
 1597              	.L147:
 1598 00c0 182D4454 		.word	1413754136
 1599 00c4 FB210940 		.word	1074340347
 1600 00c8 00000000 		.word	steps
 1601 00cc 3C000000 		.word	leg+60
 1602 00d0 00003443 		.word	1127481344
 1603 00d4 00000000 		.word	leg
 1604 00d8 9A998940 		.word	1082759578
 1605              		.cfi_endproc
 1606              	.LFE493:
 1608              		.section	.text._Z2goif,"ax",%progbits
 1609              		.align	1
 1610              		.global	_Z2goif
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu fpv4-sp-d16
 1616              	_Z2goif:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 48


 1617              	.LFB492:
  38:Core/Src/robot/robot_functions.cpp **** {
 1618              		.loc 2 38 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622              	.LVL192:
 1623 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1624              	.LCFI33:
 1625              		.cfi_def_cfa_offset 32
 1626              		.cfi_offset 4, -32
 1627              		.cfi_offset 5, -28
 1628              		.cfi_offset 6, -24
 1629              		.cfi_offset 7, -20
 1630              		.cfi_offset 8, -16
 1631              		.cfi_offset 9, -12
 1632              		.cfi_offset 10, -8
 1633              		.cfi_offset 14, -4
 1634 0004 2DED028B 		vpush.64	{d8}
 1635              	.LCFI34:
 1636              		.cfi_def_cfa_offset 40
 1637              		.cfi_offset 80, -40
 1638              		.cfi_offset 81, -36
 1639 0008 84B0     		sub	sp, sp, #16
 1640              	.LCFI35:
 1641              		.cfi_def_cfa_offset 56
 1642 000a 0546     		mov	r5, r0
  39:Core/Src/robot/robot_functions.cpp **** 	angle *= PI / 180;
 1643              		.loc 2 39 0
 1644 000c 10EE100A 		vmov	r0, s0
 1645              	.LVL193:
 1646 0010 FFF7FEFF 		bl	__aeabi_f2d
 1647              	.LVL194:
 1648 0014 4DA3     		adr	r3, .L157+36
 1649 0016 D3E90023 		ldrd	r2, [r3]
 1650 001a FFF7FEFF 		bl	__aeabi_dmul
 1651              	.LVL195:
 1652 001e FFF7FEFF 		bl	__aeabi_d2f
 1653              	.LVL196:
 1654 0022 08EE100A 		vmov	s16, r0
 1655              	.LVL197:
  40:Core/Src/robot/robot_functions.cpp **** 	move_leg(step, angle);
 1656              		.loc 2 40 0
 1657 0026 00EE100A 		vmov	s0, r0
 1658 002a 2846     		mov	r0, r5
 1659              	.LVL198:
 1660 002c FFF7FEFF 		bl	_Z8move_legif
 1661              	.LVL199:
  41:Core/Src/robot/robot_functions.cpp **** 	if ((step == 100))
 1662              		.loc 2 41 0
 1663 0030 642D     		cmp	r5, #100
 1664 0032 59D0     		beq	.L155
  49:Core/Src/robot/robot_functions.cpp **** 		move_steering(step, angle);
 1665              		.loc 2 49 0
 1666 0034 B0EE480A 		vmov.f32	s0, s16
 1667 0038 2846     		mov	r0, r5
 1668 003a FFF7FEFF 		bl	_Z13move_steeringif
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 49


 1669              	.LVL200:
 1670              	.L151:
 1671              	.LBB162:
 1672              	.LBB163:
  45:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
 1673              		.loc 5 45 0
 1674 003e 3C4C     		ldr	r4, .L157+8
 1675 0040 D4F810A0 		ldr	r10, [r4, #16]
 1676              	.LVL201:
 1677              	.LBE163:
 1678              	.LBE162:
  53:Core/Src/robot/robot_functions.cpp **** 	       (int)(robot_angle * 180 / PI), (int)(leg[0].get_actual_angle() * 180 / PI), (int)(leg[1].ge
 1679              		.loc 2 53 0
 1680 0044 3B4B     		ldr	r3, .L157+12
 1681 0046 D3ED007A 		vldr.32	s15, [r3]
 1682 004a 9FED3B8A 		vldr.32	s16, .L157+16
 1683              	.LVL202:
 1684 004e 67EE887A 		vmul.f32	s15, s15, s16
 1685 0052 17EE900A 		vmov	r0, s15
 1686 0056 FFF7FEFF 		bl	__aeabi_f2d
 1687              	.LVL203:
 1688 005a 33A3     		adr	r3, .L157
 1689 005c D3E90023 		ldrd	r2, [r3]
 1690 0060 FFF7FEFF 		bl	__aeabi_ddiv
 1691              	.LVL204:
 1692 0064 0646     		mov	r6, r0
 1693 0066 0F46     		mov	r7, r1
 1694              	.LVL205:
 1695              	.LBB164:
 1696              	.LBB165:
 1697              		.loc 5 48 0
 1698 0068 04F13C00 		add	r0, r4, #60
 1699 006c FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 1700              	.LVL206:
 1701              	.LBE165:
 1702              	.LBE164:
  53:Core/Src/robot/robot_functions.cpp **** 	       (int)(robot_angle * 180 / PI), (int)(leg[0].get_actual_angle() * 180 / PI), (int)(leg[1].ge
 1703              		.loc 2 53 0
 1704 0070 60EE087A 		vmul.f32	s15, s0, s16
 1705 0074 17EE900A 		vmov	r0, s15
 1706 0078 FFF7FEFF 		bl	__aeabi_f2d
 1707              	.LVL207:
 1708 007c 2AA3     		adr	r3, .L157
 1709 007e D3E90023 		ldrd	r2, [r3]
 1710 0082 FFF7FEFF 		bl	__aeabi_ddiv
 1711              	.LVL208:
 1712 0086 8046     		mov	r8, r0
 1713 0088 8946     		mov	r9, r1
 1714              	.LVL209:
 1715              	.LBB166:
 1716              	.LBB167:
 1717              		.loc 5 48 0
 1718 008a 04F19400 		add	r0, r4, #148
 1719 008e FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 1720              	.LVL210:
 1721              	.LBE167:
 1722              	.LBE166:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 50


  53:Core/Src/robot/robot_functions.cpp **** 	       (int)(robot_angle * 180 / PI), (int)(leg[0].get_actual_angle() * 180 / PI), (int)(leg[1].ge
 1723              		.loc 2 53 0
 1724 0092 60EE087A 		vmul.f32	s15, s0, s16
 1725 0096 17EE900A 		vmov	r0, s15
 1726 009a FFF7FEFF 		bl	__aeabi_f2d
 1727              	.LVL211:
 1728 009e 22A3     		adr	r3, .L157
 1729 00a0 D3E90023 		ldrd	r2, [r3]
 1730 00a4 FFF7FEFF 		bl	__aeabi_ddiv
 1731              	.LVL212:
 1732 00a8 CDE90201 		strd	r0, [sp, #8]
  52:Core/Src/robot/robot_functions.cpp **** 	printf(" steps = %d\t robot_angle = %d\t leg_1_angle = %d\t leg_2_angle = %d", (int)(leg[0].get_st
 1733              		.loc 2 52 0
 1734 00ac 4046     		mov	r0, r8
 1735 00ae 4946     		mov	r1, r9
 1736 00b0 FFF7FEFF 		bl	__aeabi_d2iz
 1737              	.LVL213:
 1738 00b4 8046     		mov	r8, r0
 1739 00b6 3046     		mov	r0, r6
 1740 00b8 3946     		mov	r1, r7
 1741 00ba FFF7FEFF 		bl	__aeabi_d2iz
 1742              	.LVL214:
 1743 00be 0646     		mov	r6, r0
 1744 00c0 DDE90201 		ldrd	r0, [sp, #8]
 1745 00c4 FFF7FEFF 		bl	__aeabi_d2iz
 1746              	.LVL215:
 1747 00c8 0090     		str	r0, [sp]
 1748 00ca 4346     		mov	r3, r8
 1749 00cc 3246     		mov	r2, r6
 1750 00ce 5146     		mov	r1, r10
 1751 00d0 1A48     		ldr	r0, .L157+20
 1752 00d2 FFF7FEFF 		bl	printf
 1753              	.LVL216:
 1754              	.LBB168:
 1755              	.LBB169:
  45:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
 1756              		.loc 5 45 0
 1757 00d6 2369     		ldr	r3, [r4, #16]
 1758              	.LVL217:
 1759              	.LBE169:
 1760              	.LBE168:
  56:Core/Src/robot/robot_functions.cpp **** 	if (leg[0].get_steps() >= step)
 1761              		.loc 2 56 0
 1762 00d8 9D42     		cmp	r5, r3
 1763 00da 0EDD     		ble	.L156
  65:Core/Src/robot/robot_functions.cpp **** 		return false;
 1764              		.loc 2 65 0
 1765 00dc 0020     		movs	r0, #0
 1766              	.L152:
  67:Core/Src/robot/robot_functions.cpp **** }
 1767              		.loc 2 67 0
 1768 00de 04B0     		add	sp, sp, #16
 1769              	.LCFI36:
 1770              		.cfi_remember_state
 1771              		.cfi_def_cfa_offset 40
 1772              		@ sp needed
 1773 00e0 BDEC028B 		vldm	sp!, {d8}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 51


 1774              	.LCFI37:
 1775              		.cfi_restore 80
 1776              		.cfi_restore 81
 1777              		.cfi_def_cfa_offset 32
 1778 00e4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1779              	.LVL218:
 1780              	.L155:
 1781              	.LCFI38:
 1782              		.cfi_restore_state
  44:Core/Src/robot/robot_functions.cpp **** 		USE_IMU_FLAG = false;
 1783              		.loc 2 44 0
 1784 00e8 154B     		ldr	r3, .L157+24
 1785 00ea 0022     		movs	r2, #0
 1786 00ec 1A70     		strb	r2, [r3]
  45:Core/Src/robot/robot_functions.cpp **** 		steering.set_angle(0);
 1787              		.loc 2 45 0
 1788 00ee 9FED150A 		vldr.32	s0, .L157+28
 1789 00f2 1548     		ldr	r0, .L157+32
 1790 00f4 FFF7FEFF 		bl	_ZN8steering9set_angleEf
 1791              	.LVL219:
 1792 00f8 A1E7     		b	.L151
 1793              	.LVL220:
 1794              	.L156:
  58:Core/Src/robot/robot_functions.cpp **** 		leg[0].set_omega(0);
 1795              		.loc 2 58 0
 1796 00fa 9FED128A 		vldr.32	s16, .L157+28
 1797 00fe B0EE480A 		vmov.f32	s0, s16
 1798 0102 2046     		mov	r0, r4
 1799 0104 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1800              	.LVL221:
  59:Core/Src/robot/robot_functions.cpp **** 		leg[1].set_omega(0);
 1801              		.loc 2 59 0
 1802 0108 B0EE480A 		vmov.f32	s0, s16
 1803 010c 04F15800 		add	r0, r4, #88
 1804 0110 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 1805              	.LVL222:
  60:Core/Src/robot/robot_functions.cpp **** 		steering.set_omega(0);
 1806              		.loc 2 60 0
 1807 0114 B0EE480A 		vmov.f32	s0, s16
 1808 0118 0B48     		ldr	r0, .L157+32
 1809 011a FFF7FEFF 		bl	_ZN8steering9set_omegaEf
 1810              	.LVL223:
  61:Core/Src/robot/robot_functions.cpp **** 		return true;
 1811              		.loc 2 61 0
 1812 011e 0120     		movs	r0, #1
 1813 0120 DDE7     		b	.L152
 1814              	.L158:
 1815 0122 00BFAFF3 		.align	3
 1815      0080
 1816              	.L157:
 1817 0128 182D4454 		.word	1413754136
 1818 012c FB210940 		.word	1074340347
 1819 0130 00000000 		.word	leg
 1820 0134 00000000 		.word	.LANCHOR2
 1821 0138 00003443 		.word	1127481344
 1822 013c 00000000 		.word	.LC4
 1823 0140 00000000 		.word	USE_IMU_FLAG
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 52


 1824 0144 00000000 		.word	0
 1825 0148 00000000 		.word	steering
 1826 014c 399D52A2 		.word	-1571644103
 1827 0150 46DF913F 		.word	1066524486
 1828              		.cfi_endproc
 1829              	.LFE492:
 1831              		.section	.text._GLOBAL__sub_I_initial_angle,"ax",%progbits
 1832              		.align	1
 1833              		.syntax unified
 1834              		.thumb
 1835              		.thumb_func
 1836              		.fpu fpv4-sp-d16
 1838              	_GLOBAL__sub_I_initial_angle:
 1839              	.LFB516:
 1840              		.loc 2 421 0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
 1844 0000 08B5     		push	{r3, lr}
 1845              	.LCFI39:
 1846              		.cfi_def_cfa_offset 8
 1847              		.cfi_offset 3, -8
 1848              		.cfi_offset 14, -4
 1849              		.loc 2 421 0
 1850 0002 4FF6FF71 		movw	r1, #65535
 1851 0006 0120     		movs	r0, #1
 1852 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 1853              	.LVL224:
 1854 000c 08BD     		pop	{r3, pc}
 1855              		.cfi_endproc
 1856              	.LFE516:
 1858              		.section	.init_array,"aw",%init_array
 1859              		.align	2
 1860 0000 00000000 		.word	_GLOBAL__sub_I_initial_angle(target1)
 1861              		.global	tolerance
 1862              		.global	temp_robot_angle
 1863              		.global	robot_angle
 1864              		.global	STEERING_FLAG
 1865              		.global	start_time
 1866              		.global	summation_angle
 1867              		.global	curr_angle
 1868              		.global	initial_angle
 1869              		.section	.bss.STEERING_FLAG,"aw",%nobits
 1870              		.set	.LANCHOR8,. + 0
 1873              	STEERING_FLAG:
 1874 0000 00       		.space	1
 1875              		.section	.bss._ZZ23initialize_leg_positionvE9leg0_flag,"aw",%nobits
 1876              		.set	.LANCHOR5,. + 0
 1879              	_ZZ23initialize_leg_positionvE9leg0_flag:
 1880 0000 00       		.space	1
 1881              		.section	.bss._ZZ23initialize_leg_positionvE9leg1_flag,"aw",%nobits
 1882              		.set	.LANCHOR6,. + 0
 1885              	_ZZ23initialize_leg_positionvE9leg1_flag:
 1886 0000 00       		.space	1
 1887              		.section	.bss.curr_angle,"aw",%nobits
 1888              		.align	2
 1889              		.set	.LANCHOR1,. + 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 53


 1892              	curr_angle:
 1893 0000 00000000 		.space	12
 1893      00000000 
 1893      00000000 
 1894              		.section	.bss.initial_angle,"aw",%nobits
 1895              		.align	2
 1896              		.set	.LANCHOR0,. + 0
 1899              	initial_angle:
 1900 0000 00000000 		.space	12
 1900      00000000 
 1900      00000000 
 1901              		.section	.bss.robot_angle,"aw",%nobits
 1902              		.align	2
 1903              		.set	.LANCHOR2,. + 0
 1906              	robot_angle:
 1907 0000 00000000 		.space	4
 1908              		.section	.bss.start_time,"aw",%nobits
 1909              		.align	2
 1910              		.set	.LANCHOR7,. + 0
 1913              	start_time:
 1914 0000 00000000 		.space	4
 1915              		.section	.bss.summation_angle,"aw",%nobits
 1916              		.align	2
 1917              		.set	.LANCHOR3,. + 0
 1920              	summation_angle:
 1921 0000 00000000 		.space	4
 1922              		.section	.bss.temp_robot_angle,"aw",%nobits
 1923              		.align	2
 1924              		.set	.LANCHOR4,. + 0
 1927              	temp_robot_angle:
 1928 0000 00000000 		.space	4
 1929              		.section	.data.tolerance,"aw",%progbits
 1930              		.align	2
 1933              	tolerance:
 1934 0000 5077563D 		.word	1029076816
 1935              		.section	.rodata._Z19initialize_positionv.str1.4,"aMS",%progbits,1
 1936              		.align	2
 1937              	.LC1:
 1938 0000 0A496E69 		.ascii	"\012Initializing_Leg_Orientation\011\000"
 1938      7469616C 
 1938      697A696E 
 1938      675F4C65 
 1938      675F4F72 
 1939 001f 00       		.space	1
 1940              	.LC2:
 1941 0020 0A095761 		.ascii	"\012\011Waiting_The_Leg \011\000"
 1941      6974696E 
 1941      675F5468 
 1941      655F4C65 
 1941      67200900 
 1942              	.LC3:
 1943 0034 09496E69 		.ascii	"\011Initializing_Steering_Orientation\011 %d \011 %"
 1943      7469616C 
 1943      697A696E 
 1943      675F5374 
 1943      65657269 
 1944 005e 6400     		.ascii	"d\000"
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 54


 1945              		.section	.rodata._Z28initialize_steering_positionv.str1.4,"aMS",%progbits,1
 1946              		.align	2
 1947              	.LC0:
 1948 0000 0A616E67 		.ascii	"\012angle = %d\011\000"
 1948      6C65203D 
 1948      20256409 
 1948      00
 1949              		.section	.rodata._Z2goif.str1.4,"aMS",%progbits,1
 1950              		.align	2
 1951              	.LC4:
 1952 0000 20737465 		.ascii	" steps = %d\011 robot_angle = %d\011 leg_1_angle = "
 1952      7073203D 
 1952      20256409 
 1952      20726F62 
 1952      6F745F61 
 1953 002d 25640920 		.ascii	"%d\011 leg_2_angle = %d\000"
 1953      6C65675F 
 1953      325F616E 
 1953      676C6520 
 1953      3D202564 
 1954              		.text
 1955              	.Letext0:
 1956              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1957              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1958              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 1959              		.file 10 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1960              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1961              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1962              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1963              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 1964              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1965              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1966              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1967              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1968              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1969              		.file 20 "Core/Inc/periphs/tim.h"
 1970              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1971              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1972              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1973              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1974              		.file 25 "Core/Inc/devs/motor.h"
 1975              		.file 26 "Core/Inc/devs/encoder.h"
 1976              		.file 27 "Core/Inc/utils/pid_algorithms.h"
 1977              		.file 28 "Core/Inc/devs/limit_switch.h"
 1978              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1979              		.file 30 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1980              		.file 31 "<built-in>"
 1981              		.file 32 "Core/Inc/robot/robot_functions.h"
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 robot_functions.cpp
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:18     .text._ZN4Vec3IfED2Ev:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:25     .text._ZN4Vec3IfED2Ev:00000000 _ZN4Vec3IfED2Ev
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:25     .text._ZN4Vec3IfED2Ev:00000000 _ZN4Vec3IfED1Ev
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:42     .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:48     .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:150    .text._Z41__static_initialization_and_destruction_0ii:00000038 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:163    .text._Z9set_anglef:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:170    .text._Z9set_anglef:00000000 _Z9set_anglef
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:277    .text._Z9set_anglef:00000098 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:291    .text._Z22correct_steering_anglef:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:298    .text._Z22correct_steering_anglef:00000000 _Z22correct_steering_anglef
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:381    .text._Z22correct_steering_anglef:00000078 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:395    .text._Z13move_steeringif:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:402    .text._Z13move_steeringif:00000000 _Z13move_steeringif
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:507    .text._Z13move_steeringif:00000098 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:520    .text._Z21calculate_robot_anglev:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:527    .text._Z21calculate_robot_anglev:00000000 _Z21calculate_robot_anglev
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:639    .text._Z21calculate_robot_anglev:00000080 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:653    .text._Z23initialize_leg_positionv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:660    .text._Z23initialize_leg_positionv:00000000 _Z23initialize_leg_positionv
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:831    .text._Z23initialize_leg_positionv:000000d0 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:847    .text._Z28initialize_steering_positionv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:854    .text._Z28initialize_steering_positionv:00000000 _Z28initialize_steering_positionv
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:937    .text._Z28initialize_steering_positionv:00000078 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:951    .text._Z19initialize_positionv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:958    .text._Z19initialize_positionv:00000000 _Z19initialize_positionv
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1147   .text._Z19initialize_positionv:00000108 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1161   .text._Z11getup_n_runv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1168   .text._Z11getup_n_runv:00000000 _Z11getup_n_runv
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1287   .text._Z11getup_n_runv:000000a0 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1299   .text._Z15calculate_datasv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1306   .text._Z15calculate_datasv:00000000 _Z15calculate_datasv
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1358   .text._Z15calculate_datasv:00000038 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1365   .text._Z14motion_profilefff:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1372   .text._Z14motion_profilefff:00000000 _Z14motion_profilefff
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1448   .text._Z14motion_profilefff:00000090 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1455   .text._Z8move_legif:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1462   .text._Z8move_legif:00000000 _Z8move_legif
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1598   .text._Z8move_legif:000000c0 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1609   .text._Z2goif:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1616   .text._Z2goif:00000000 _Z2goif
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1817   .text._Z2goif:00000128 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1832   .text._GLOBAL__sub_I_initial_angle:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1838   .text._GLOBAL__sub_I_initial_angle:00000000 _GLOBAL__sub_I_initial_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1859   .init_array:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1933   .data.tolerance:00000000 tolerance
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1927   .bss.temp_robot_angle:00000000 temp_robot_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1906   .bss.robot_angle:00000000 robot_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1873   .bss.STEERING_FLAG:00000000 STEERING_FLAG
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1913   .bss.start_time:00000000 start_time
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1920   .bss.summation_angle:00000000 summation_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1892   .bss.curr_angle:00000000 curr_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1899   .bss.initial_angle:00000000 initial_angle
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1874   .bss.STEERING_FLAG:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1879   .bss._ZZ23initialize_leg_positionvE9leg0_flag:00000000 _ZZ23initialize_leg_positionvE9leg0_flag
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s 			page 56


C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1880   .bss._ZZ23initialize_leg_positionvE9leg0_flag:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1885   .bss._ZZ23initialize_leg_positionvE9leg1_flag:00000000 _ZZ23initialize_leg_positionvE9leg1_flag
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1886   .bss._ZZ23initialize_leg_positionvE9leg1_flag:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1888   .bss.curr_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1895   .bss.initial_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1902   .bss.robot_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1909   .bss.start_time:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1916   .bss.summation_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1923   .bss.temp_robot_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1930   .data.tolerance:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1936   .rodata._Z19initialize_positionv.str1.4:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1946   .rodata._Z28initialize_steering_positionv.str1.4:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccAcbPTm.s:1950   .rodata._Z2goif.str1.4:00000000 $d
                           .group:00000000 _ZN4Vec3IfED5Ev

UNDEFINED SYMBOLS
__aeabi_atexit
__dso_handle
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_dcmpgt
__aeabi_dcmplt
_ZN8steering9set_angleEf
steering
__aeabi_dcmple
__aeabi_dmul
__aeabi_dadd
_ZN3leg9is_raisedEv
_ZN8steering9set_omegaEf
steps
leg
_ZN3leg26is_raised_without_deadzoneEv
_ZN7encoder9get_angleEv
USE_IMU_FLAG
_ZN3leg9set_omegaEf
__aeabi_d2iz
printf
HAL_GetTick
HAL_GPIO_WritePin
_ZN3leg11reset_angleEf
_ZN7encoder18reset_actual_angleEf
_ZN3leg15calculate_omegaEv
_ZN7encoder15calculate_omegaEv
_Z16read_Orientationm
_ZN7encoder16get_actual_angleEv
