ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"robot.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_f2d
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_d2iz
  20              		.section	.text._Z11start_RobotP12Robot_States,"ax",%progbits
  21              		.align	1
  22              		.global	_Z11start_RobotP12Robot_States
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu fpv4-sp-d16
  28              	_Z11start_RobotP12Robot_States:
  29              	.LFB492:
  30              		.file 1 "Core/Src/robot/robot.cpp"
   1:Core/Src/robot/robot.cpp **** #include "robot.h"
   2:Core/Src/robot/robot.cpp **** extern leg leg[2];
   3:Core/Src/robot/robot.cpp **** extern steering steering;
   4:Core/Src/robot/robot.cpp **** 
   5:Core/Src/robot/robot.cpp **** extern Vec3<float> initial_angle;
   6:Core/Src/robot/robot.cpp **** 
   7:Core/Src/robot/robot.cpp **** Robot_States robo_state;
   8:Core/Src/robot/robot.cpp **** 
   9:Core/Src/robot/robot.cpp **** bool ROBOT_START_FLAG = false;
  10:Core/Src/robot/robot.cpp **** bool USE_IMU_FLAG = true;
  11:Core/Src/robot/robot.cpp **** bool FRONT_PROXIMITY_FLAG = false;
  12:Core/Src/robot/robot.cpp **** bool BACK_PROXIMITY_FLAG = false;
  13:Core/Src/robot/robot.cpp **** 
  14:Core/Src/robot/robot.cpp **** int steps[7] = {9, 14, 18, 20, 30, 32, 45};
  15:Core/Src/robot/robot.cpp **** float angles[7] = {0, 45, 45, 80, 0, 0, 0};
  16:Core/Src/robot/robot.cpp **** 
  17:Core/Src/robot/robot.cpp **** float steering_angle = 0;
  18:Core/Src/robot/robot.cpp **** float steering_omega = 0;
  19:Core/Src/robot/robot.cpp **** 
  20:Core/Src/robot/robot.cpp **** void start_Robot(enum Robot_States *state_)
  21:Core/Src/robot/robot.cpp **** {
  31              		.loc 1 21 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 16
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              	.LVL0:
  36 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  37              	.LCFI0:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 2


  38              		.cfi_def_cfa_offset 32
  39              		.cfi_offset 4, -32
  40              		.cfi_offset 5, -28
  41              		.cfi_offset 6, -24
  42              		.cfi_offset 7, -20
  43              		.cfi_offset 8, -16
  44              		.cfi_offset 9, -12
  45              		.cfi_offset 10, -8
  46              		.cfi_offset 14, -4
  47 0004 2DED028B 		vpush.64	{d8}
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 40
  50              		.cfi_offset 80, -40
  51              		.cfi_offset 81, -36
  52 0008 84B0     		sub	sp, sp, #16
  53              	.LCFI2:
  54              		.cfi_def_cfa_offset 56
  55 000a 0446     		mov	r4, r0
  22:Core/Src/robot/robot.cpp **** 	switch (*state_)
  56              		.loc 1 22 0
  57 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  58 000e 092B     		cmp	r3, #9
  59 0010 00F23F82 		bhi	.L1
  60 0014 DFE813F0 		tbh	[pc, r3, lsl #1]
  61              	.L4:
  62 0018 0A00     		.2byte	(.L3-.L4)/2
  63 001a A100     		.2byte	(.L5-.L4)/2
  64 001c C600     		.2byte	(.L6-.L4)/2
  65 001e F900     		.2byte	(.L7-.L4)/2
  66 0020 2701     		.2byte	(.L8-.L4)/2
  67 0022 4C01     		.2byte	(.L9-.L4)/2
  68 0024 7101     		.2byte	(.L10-.L4)/2
  69 0026 C601     		.2byte	(.L11-.L4)/2
  70 0028 CC01     		.2byte	(.L12-.L4)/2
  71 002a 2302     		.2byte	(.L13-.L4)/2
  72              		.p2align 1
  73              	.L3:
  23:Core/Src/robot/robot.cpp **** 	{
  24:Core/Src/robot/robot.cpp **** 	case HOME:
  25:Core/Src/robot/robot.cpp **** 	{
  26:Core/Src/robot/robot.cpp **** 		/**
  27:Core/Src/robot/robot.cpp **** 		 * vitra ko khutta tala teknaparcha
  28:Core/Src/robot/robot.cpp **** 		 * baira ko khutta mathi teknaparcha
  29:Core/Src/robot/robot.cpp **** 		 * steering IR navetinjel ghumaunaparcha
  30:Core/Src/robot/robot.cpp **** 		 * tespachi stop vaera bascha
  31:Core/Src/robot/robot.cpp **** 		 * user button thichesi this state ends 
  32:Core/Src/robot/robot.cpp **** 		 *  state_A flag set garnaparcha 
  33:Core/Src/robot/robot.cpp **** 			*/
  34:Core/Src/robot/robot.cpp **** 		printf("\n\tWaiting_to_start\t");
  74              		.loc 1 34 0
  75 002c C848     		ldr	r0, .L17+8
  76              	.LVL1:
  77 002e FFF7FEFF 		bl	printf
  78              	.LVL2:
  35:Core/Src/robot/robot.cpp **** 		// printf("steering_angle = %d \t", (int)(steering.get_angle()*1800/PI));
  36:Core/Src/robot/robot.cpp **** 		leg[0].set_omega(0);
  79              		.loc 1 36 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 3


  80 0032 9FEDC88A 		vldr.32	s16, .L17+12
  81 0036 C84D     		ldr	r5, .L17+16
  82 0038 B0EE480A 		vmov.f32	s0, s16
  83 003c 2846     		mov	r0, r5
  84 003e FFF7FEFF 		bl	_ZN3leg9set_omegaEf
  85              	.LVL3:
  37:Core/Src/robot/robot.cpp **** 		leg[1].set_omega(0);
  86              		.loc 1 37 0
  87 0042 B0EE480A 		vmov.f32	s0, s16
  88 0046 05F15800 		add	r0, r5, #88
  89 004a FFF7FEFF 		bl	_ZN3leg9set_omegaEf
  90              	.LVL4:
  38:Core/Src/robot/robot.cpp **** 		steering.set_angle(0);
  91              		.loc 1 38 0
  92 004e DFF850A3 		ldr	r10, .L17+88
  93 0052 B0EE480A 		vmov.f32	s0, s16
  94 0056 5046     		mov	r0, r10
  95 0058 FFF7FEFF 		bl	_ZN8steering9set_angleEf
  96              	.LVL5:
  97              	.LBB19:
  98              	.LBB20:
  99              		.file 2 "Core/Inc/devs/leg.h"
   1:Core/Inc/devs/leg.h **** #ifndef _LEG_H_
   2:Core/Inc/devs/leg.h **** #define _LEG_H_
   3:Core/Inc/devs/leg.h **** 
   4:Core/Inc/devs/leg.h **** #include "motor.h"
   5:Core/Inc/devs/leg.h **** #include "encoder.h"
   6:Core/Inc/devs/leg.h **** #include "pid.h"
   7:Core/Inc/devs/leg.h **** #include "limit_switch.h"
   8:Core/Inc/devs/leg.h **** #include "defines.h"
   9:Core/Inc/devs/leg.h **** #include "pid_algorithms.h"
  10:Core/Inc/devs/leg.h **** 
  11:Core/Inc/devs/leg.h **** enum Leg_condition{	RAISED, 
  12:Core/Inc/devs/leg.h **** 			FALLEN, 
  13:Core/Inc/devs/leg.h **** 			UNDEFINED};
  14:Core/Inc/devs/leg.h **** 
  15:Core/Inc/devs/leg.h **** class leg
  16:Core/Inc/devs/leg.h **** {
  17:Core/Inc/devs/leg.h **** public:
  18:Core/Inc/devs/leg.h **** 	leg() {}
  19:Core/Inc/devs/leg.h **** 	leg(leg &&) = default;
  20:Core/Inc/devs/leg.h **** 	leg(const leg &) = default;
  21:Core/Inc/devs/leg.h **** 	leg &operator=(leg &&) = default;
  22:Core/Inc/devs/leg.h **** 	leg &operator=(const leg &) = default;
  23:Core/Inc/devs/leg.h **** 	~leg(){}
  24:Core/Inc/devs/leg.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  25:Core/Inc/devs/leg.h **** 		motor__.set_config(motor);
  26:Core/Inc/devs/leg.h **** 		encoder__.set_config(encoder);
  27:Core/Inc/devs/leg.h **** 	}
  28:Core/Inc/devs/leg.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  29:Core/Inc/devs/leg.h **** 		dpid_.set_P(kp);
  30:Core/Inc/devs/leg.h **** 		dpid_.set_I(ki);
  31:Core/Inc/devs/leg.h **** 		dpid_.set_D(kd);
  32:Core/Inc/devs/leg.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  33:Core/Inc/devs/leg.h **** 	}
  34:Core/Inc/devs/leg.h **** 
  35:Core/Inc/devs/leg.h **** 	
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 4


  36:Core/Inc/devs/leg.h **** 	void set_omega(float omega);
  37:Core/Inc/devs/leg.h **** 	float ramp(float omega);
  38:Core/Inc/devs/leg.h **** 	void set_gravity_compensator_constant(float kgravity){kg_ = kgravity;}
  39:Core/Inc/devs/leg.h **** 	void reset_angle(float angle_in_radians);
  40:Core/Inc/devs/leg.h **** 	void reset_actual_angle(float angle_in_radians){encoder__.reset_actual_angle(angle_in_radians);}
 100              		.loc 2 40 0
 101 005c 9FEDBF8A 		vldr.32	s16, .L17+20
 102 0060 05F13C07 		add	r7, r5, #60
 103 0064 B0EE480A 		vmov.f32	s0, s16
 104 0068 3846     		mov	r0, r7
 105 006a FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 106              	.LVL6:
 107              	.LBE20:
 108              	.LBE19:
 109              	.LBB21:
 110              	.LBB22:
 111 006e 9435     		adds	r5, r5, #148
 112 0070 B0EE480A 		vmov.f32	s0, s16
 113 0074 2846     		mov	r0, r5
 114 0076 FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 115              	.LVL7:
 116              	.LBE22:
 117              	.LBE21:
  39:Core/Src/robot/robot.cpp **** 		leg[0].reset_actual_angle(90 * PI / 180);
  40:Core/Src/robot/robot.cpp **** 		leg[1].reset_actual_angle(90 * PI / 180);
  41:Core/Src/robot/robot.cpp **** 		initial_angle = read_Orientation(10);
 118              		.loc 1 41 0
 119 007a 01AE     		add	r6, sp, #4
 120 007c 0A21     		movs	r1, #10
 121 007e 3046     		mov	r0, r6
 122 0080 FFF7FEFF 		bl	_Z16read_Orientationm
 123              	.LVL8:
 124 0084 B64B     		ldr	r3, .L17+24
 125 0086 96E80700 		ldm	r6, {r0, r1, r2}
 126 008a 83E80700 		stm	r3, {r0, r1, r2}
 127              	.LVL9:
 128              	.LBB23:
 129              	.LBB24:
  41:Core/Inc/devs/leg.h **** 	void calculate_omega();
  42:Core/Inc/devs/leg.h **** 	Leg_condition is_raised();
  43:Core/Inc/devs/leg.h **** 	bool is_raised_without_deadzone();
  44:Core/Inc/devs/leg.h **** 
  45:Core/Inc/devs/leg.h **** 	int get_steps(){return steps;}
  46:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
  47:Core/Inc/devs/leg.h **** 	float get_angle(void){return encoder__.get_angle();}
  48:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
 130              		.loc 2 48 0
 131 008e 3846     		mov	r0, r7
 132 0090 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 133              	.LVL10:
 134              	.LBE24:
 135              	.LBE23:
  42:Core/Src/robot/robot.cpp **** 		printf("leg2_angle = %d\tleg1_angle = %d\tsteering_angle = %d\t", (int)(leg[0].get_actual_angle()
 136              		.loc 1 42 0
 137 0094 9FEDB38A 		vldr.32	s16, .L17+28
 138 0098 60EE087A 		vmul.f32	s15, s0, s16
 139 009c 17EE900A 		vmov	r0, s15
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 5


 140 00a0 FFF7FEFF 		bl	__aeabi_f2d
 141              	.LVL11:
 142 00a4 A8A3     		adr	r3, .L17
 143 00a6 D3E90023 		ldrd	r2, [r3]
 144 00aa FFF7FEFF 		bl	__aeabi_ddiv
 145              	.LVL12:
 146 00ae 0646     		mov	r6, r0
 147 00b0 0F46     		mov	r7, r1
 148              	.LVL13:
 149              	.LBB25:
 150              	.LBB26:
 151              		.loc 2 48 0
 152 00b2 2846     		mov	r0, r5
 153 00b4 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 154              	.LVL14:
 155              	.LBE26:
 156              	.LBE25:
  43:Core/Src/robot/robot.cpp **** 		, (int)(leg[1].get_actual_angle()*180/PI), (int)(steering.get_angle()*1800/PI));
 157              		.loc 1 43 0
 158 00b8 60EE087A 		vmul.f32	s15, s0, s16
 159 00bc 17EE900A 		vmov	r0, s15
 160 00c0 FFF7FEFF 		bl	__aeabi_f2d
 161              	.LVL15:
 162 00c4 A0A3     		adr	r3, .L17
 163 00c6 D3E90023 		ldrd	r2, [r3]
 164 00ca FFF7FEFF 		bl	__aeabi_ddiv
 165              	.LVL16:
 166 00ce 8046     		mov	r8, r0
 167 00d0 8946     		mov	r9, r1
 168              	.LVL17:
 169              	.LBB27:
 170              	.LBB28:
 171              		.file 3 "Core/Inc/devs/steering.h"
   1:Core/Inc/devs/steering.h **** /**
   2:Core/Inc/devs/steering.h ****  * steering.h
   3:Core/Inc/devs/steering.h ****  *
   4:Core/Inc/devs/steering.h ****  * \brief Provide control over steering of the horse
   5:Core/Inc/devs/steering.h ****  *
   6:Core/Inc/devs/steering.h ****  * This file is meant as an wrapper to the elements in the encoder. 
   7:Core/Inc/devs/steering.h ****  * It uses the functions of other headers (ie motor.h, encoder.h, 
   8:Core/Inc/devs/steering.h ****  * limit_switch.h and pid.h tocontrol all the functions available 
   9:Core/Inc/devs/steering.h ****  * in the steering.
  10:Core/Inc/devs/steering.h ****  *
  11:Core/Inc/devs/steering.h ****  * \author 	$Author 	: Prashant_Bhatta
  12:Core/Inc/devs/steering.h ****  * \date 	$Date		: 2005/04/14 14:16:20 $
  13:Core/Inc/devs/steering.h ****  * \contact	$Contact	: 073bex425.prashant@pcampus.edu.np
  14:Core/Inc/devs/steering.h ****  *
  15:Core/Inc/devs/steering.h ****  */
  16:Core/Inc/devs/steering.h **** #ifndef _STEERING_H_
  17:Core/Inc/devs/steering.h **** #define _STEERING_H_
  18:Core/Inc/devs/steering.h **** 
  19:Core/Inc/devs/steering.h **** #include "motor.h"
  20:Core/Inc/devs/steering.h **** #include "encoder.h"
  21:Core/Inc/devs/steering.h **** #include "pid.h"
  22:Core/Inc/devs/steering.h **** #include "limit_switch.h"
  23:Core/Inc/devs/steering.h **** 
  24:Core/Inc/devs/steering.h **** class steering
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 6


  25:Core/Inc/devs/steering.h **** {
  26:Core/Inc/devs/steering.h **** public:
  27:Core/Inc/devs/steering.h **** 	/// These lines of codes are just for protection of random defination of the objects.
  28:Core/Inc/devs/steering.h **** 	steering(){}
  29:Core/Inc/devs/steering.h **** 	steering(steering &&) = default;
  30:Core/Inc/devs/steering.h **** 	steering(const steering &) = default;
  31:Core/Inc/devs/steering.h **** 	steering &operator=(steering &&) = default;
  32:Core/Inc/devs/steering.h **** 	steering &operator=(const steering &) = default;
  33:Core/Inc/devs/steering.h **** 	~steering(){}
  34:Core/Inc/devs/steering.h **** 
  35:Core/Inc/devs/steering.h **** 	/**
  36:Core/Inc/devs/steering.h **** 	 * \brief This function setups the configurations for the steering
  37:Core/Inc/devs/steering.h **** 	 * \param motor: pointer to motor_config which contains all the 
  38:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor
  39:Core/Inc/devs/steering.h **** 	 * \param encoder: pointer to encoder_config which contains all the 
  40:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor  
  41:Core/Inc/devs/steering.h **** 	 * \return void
  42:Core/Inc/devs/steering.h **** 	 */
  43:Core/Inc/devs/steering.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  44:Core/Inc/devs/steering.h **** 		motor__.set_config(motor);
  45:Core/Inc/devs/steering.h **** 		encoder__.set_config(encoder);
  46:Core/Inc/devs/steering.h **** 	}
  47:Core/Inc/devs/steering.h **** 
  48:Core/Inc/devs/steering.h **** 	/**
  49:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for PID algorithm
  50:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for PID
  51:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  52:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  53:Core/Inc/devs/steering.h **** 	 * \return void
  54:Core/Inc/devs/steering.h **** 	 */
  55:Core/Inc/devs/steering.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  56:Core/Inc/devs/steering.h **** 		dpid_.set_P(kp);
  57:Core/Inc/devs/steering.h **** 		dpid_.set_I(ki);
  58:Core/Inc/devs/steering.h **** 		dpid_.set_D(kd);
  59:Core/Inc/devs/steering.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  60:Core/Inc/devs/steering.h **** 	}
  61:Core/Inc/devs/steering.h **** 
  62:Core/Inc/devs/steering.h **** 	/**
  63:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for Angle_PID algorithm
  64:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for Anggle_PID
  65:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  66:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  67:Core/Inc/devs/steering.h **** 	 * \return void
  68:Core/Inc/devs/steering.h **** 	 */
  69:Core/Inc/devs/steering.h **** 	void set_angle_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  70:Core/Inc/devs/steering.h **** 		apid_.set_P(kp);
  71:Core/Inc/devs/steering.h **** 		apid_.set_I(ki);
  72:Core/Inc/devs/steering.h **** 		apid_.set_D(kd);
  73:Core/Inc/devs/steering.h **** 		apid_.set_Limits(upper_limit, lower_limit);
  74:Core/Inc/devs/steering.h **** 	}
  75:Core/Inc/devs/steering.h **** 
  76:Core/Inc/devs/steering.h **** 
  77:Core/Inc/devs/steering.h **** 	/** 
  78:Core/Inc/devs/steering.h **** 	 * \brief sets omega for the steering
  79:Core/Inc/devs/steering.h **** 	 * 
  80:Core/Inc/devs/steering.h **** 	 */
  81:Core/Inc/devs/steering.h **** 	void set_omega(float omega);
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 7


  82:Core/Inc/devs/steering.h **** 
  83:Core/Inc/devs/steering.h **** 	/** 
  84:Core/Inc/devs/steering.h **** 	 * \brief sets angle for the steering
  85:Core/Inc/devs/steering.h **** 	 * 
  86:Core/Inc/devs/steering.h **** 	 */
  87:Core/Inc/devs/steering.h **** 	void set_angle(float angle);
  88:Core/Inc/devs/steering.h **** 
  89:Core/Inc/devs/steering.h **** 	/**
  90:Core/Inc/devs/steering.h **** 	 * \brief resets the angle provided by the encoder
  91:Core/Inc/devs/steering.h **** 	 * \param angle_in_radian at which it is to be reset
  92:Core/Inc/devs/steering.h **** 	 * \return void
  93:Core/Inc/devs/steering.h **** 	 */
  94:Core/Inc/devs/steering.h **** 	void reset_angle(float angle_in_radians) {encoder__.reset_angle(angle_in_radians);}
  95:Core/Inc/devs/steering.h **** 
  96:Core/Inc/devs/steering.h **** 	/**
  97:Core/Inc/devs/steering.h **** 	 * \brief calculates omega of the steering motor
  98:Core/Inc/devs/steering.h **** 	 * \remark Dont forget to call this function every 10 ms
  99:Core/Inc/devs/steering.h **** 	 * \param void
 100:Core/Inc/devs/steering.h **** 	 * \return void
 101:Core/Inc/devs/steering.h **** 	 */
 102:Core/Inc/devs/steering.h **** 	void calculate_omega(){	encoder__.calculate_omega();}
 103:Core/Inc/devs/steering.h **** 
 104:Core/Inc/devs/steering.h **** 	/**
 105:Core/Inc/devs/steering.h **** 	 * \brief returns the current omega calculated by the encoder
 106:Core/Inc/devs/steering.h **** 	 */
 107:Core/Inc/devs/steering.h **** 	float get_omega(void){return encoder__.get_omega();}
 108:Core/Inc/devs/steering.h **** 
 109:Core/Inc/devs/steering.h **** 	/**
 110:Core/Inc/devs/steering.h **** 	 * \brief returns the current angle calculated by the encoder
 111:Core/Inc/devs/steering.h **** 	 */
 112:Core/Inc/devs/steering.h **** 	float get_angle(void){return encoder__.get_angle();}
 172              		.loc 3 112 0
 173 00d2 0AF10C00 		add	r0, r10, #12
 174 00d6 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 175              	.LVL18:
 176              	.LBE28:
 177              	.LBE27:
 178              		.loc 1 43 0
 179 00da DFEDA37A 		vldr.32	s15, .L17+32
 180 00de 60EE277A 		vmul.f32	s15, s0, s15
 181 00e2 17EE900A 		vmov	r0, s15
 182 00e6 FFF7FEFF 		bl	__aeabi_f2d
 183              	.LVL19:
 184 00ea 97A3     		adr	r3, .L17
 185 00ec D3E90023 		ldrd	r2, [r3]
 186 00f0 FFF7FEFF 		bl	__aeabi_ddiv
 187              	.LVL20:
  42:Core/Src/robot/robot.cpp **** 		, (int)(leg[1].get_actual_angle()*180/PI), (int)(steering.get_angle()*1800/PI));
 188              		.loc 1 42 0
 189 00f4 FFF7FEFF 		bl	__aeabi_d2iz
 190              	.LVL21:
 191 00f8 8246     		mov	r10, r0
 192 00fa 4046     		mov	r0, r8
 193 00fc 4946     		mov	r1, r9
 194 00fe FFF7FEFF 		bl	__aeabi_d2iz
 195              	.LVL22:
 196 0102 0546     		mov	r5, r0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 8


 197 0104 3046     		mov	r0, r6
 198 0106 3946     		mov	r1, r7
 199 0108 FFF7FEFF 		bl	__aeabi_d2iz
 200              	.LVL23:
 201 010c 5346     		mov	r3, r10
 202 010e 2A46     		mov	r2, r5
 203 0110 0146     		mov	r1, r0
 204 0112 9648     		ldr	r0, .L17+36
 205 0114 FFF7FEFF 		bl	printf
 206              	.LVL24:
  44:Core/Src/robot/robot.cpp **** 		if (ROBOT_START_FLAG)
 207              		.loc 1 44 0
 208 0118 954B     		ldr	r3, .L17+40
 209 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 210 011c 002B     		cmp	r3, #0
 211 011e 00F0B881 		beq	.L1
  45:Core/Src/robot/robot.cpp **** 		{
  46:Core/Src/robot/robot.cpp **** 			*state_ = MARCH;
 212              		.loc 1 46 0
 213 0122 0123     		movs	r3, #1
 214 0124 2370     		strb	r3, [r4]
  47:Core/Src/robot/robot.cpp **** 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 215              		.loc 1 47 0
 216 0126 934C     		ldr	r4, .L17+44
 217              	.LVL25:
 218 0128 0022     		movs	r2, #0
 219 012a 4FF48051 		mov	r1, #4096
 220 012e 2046     		mov	r0, r4
 221 0130 FFF7FEFF 		bl	HAL_GPIO_WritePin
 222              	.LVL26:
  48:Core/Src/robot/robot.cpp **** 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 223              		.loc 1 48 0
 224 0134 0022     		movs	r2, #0
 225 0136 4FF40051 		mov	r1, #8192
 226 013a 2046     		mov	r0, r4
 227 013c FFF7FEFF 		bl	HAL_GPIO_WritePin
 228              	.LVL27:
  49:Core/Src/robot/robot.cpp **** 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 229              		.loc 1 49 0
 230 0140 0022     		movs	r2, #0
 231 0142 4FF48041 		mov	r1, #16384
 232 0146 2046     		mov	r0, r4
 233 0148 FFF7FEFF 		bl	HAL_GPIO_WritePin
 234              	.LVL28:
  50:Core/Src/robot/robot.cpp **** 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 235              		.loc 1 50 0
 236 014c 0022     		movs	r2, #0
 237 014e 4FF40041 		mov	r1, #32768
 238 0152 2046     		mov	r0, r4
 239 0154 FFF7FEFF 		bl	HAL_GPIO_WritePin
 240              	.LVL29:
 241 0158 9BE1     		b	.L1
 242              	.LVL30:
 243              	.L5:
  51:Core/Src/robot/robot.cpp **** 		}
  52:Core/Src/robot/robot.cpp **** 	}
  53:Core/Src/robot/robot.cpp **** 	break;
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 9


  54:Core/Src/robot/robot.cpp **** 
  55:Core/Src/robot/robot.cpp **** 	case MARCH:
  56:Core/Src/robot/robot.cpp **** 	{
  57:Core/Src/robot/robot.cpp **** 		/*
  58:Core/Src/robot/robot.cpp **** 			  user button thichesi state_A starts when state A flag is set
  59:Core/Src/robot/robot.cpp **** 			  10 steps agadi gayesi state_A flag clear garnaparcha
  60:Core/Src/robot/robot.cpp **** 			  state_B flag set garnaparcha
  61:Core/Src/robot/robot.cpp **** 			*/
  62:Core/Src/robot/robot.cpp **** 		printf("March");
 244              		.loc 1 62 0
 245 015a 8748     		ldr	r0, .L17+48
 246              	.LVL31:
 247 015c FFF7FEFF 		bl	printf
 248              	.LVL32:
  63:Core/Src/robot/robot.cpp **** 		if (go(steps[0], angles[0]) == true)
 249              		.loc 1 63 0
 250 0160 864B     		ldr	r3, .L17+52
 251 0162 93ED000A 		vldr.32	s0, [r3]
 252 0166 864B     		ldr	r3, .L17+56
 253 0168 1868     		ldr	r0, [r3]
 254 016a FFF7FEFF 		bl	_Z2goif
 255              	.LVL33:
 256 016e 0028     		cmp	r0, #0
 257 0170 00F08F81 		beq	.L1
  64:Core/Src/robot/robot.cpp **** 		{
  65:Core/Src/robot/robot.cpp **** 			*state_ =TURN_45;
 258              		.loc 1 65 0
 259 0174 0223     		movs	r3, #2
 260 0176 2370     		strb	r3, [r4]
  66:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 261              		.loc 1 66 0
 262 0178 7E4C     		ldr	r4, .L17+44
 263              	.LVL34:
 264 017a 4FF48051 		mov	r1, #4096
 265 017e 2046     		mov	r0, r4
 266 0180 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 267              	.LVL35:
  67:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 268              		.loc 1 67 0
 269 0184 4FF40051 		mov	r1, #8192
 270 0188 2046     		mov	r0, r4
 271 018a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 272              	.LVL36:
  68:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 273              		.loc 1 68 0
 274 018e 4FF48041 		mov	r1, #16384
 275 0192 2046     		mov	r0, r4
 276 0194 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 277              	.LVL37:
  69:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 278              		.loc 1 69 0
 279 0198 4FF40041 		mov	r1, #32768
 280 019c 2046     		mov	r0, r4
 281 019e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 282              	.LVL38:
 283 01a2 76E1     		b	.L1
 284              	.LVL39:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 10


 285              	.L6:
  70:Core/Src/robot/robot.cpp **** 		}
  71:Core/Src/robot/robot.cpp **** 	}
  72:Core/Src/robot/robot.cpp **** 	break;
  73:Core/Src/robot/robot.cpp **** 
  74:Core/Src/robot/robot.cpp **** 	case TURN_45:
  75:Core/Src/robot/robot.cpp **** 	{
  76:Core/Src/robot/robot.cpp **** 		/*state _B flag set vayesi angle 45 degree change garnaparcha
  77:Core/Src/robot/robot.cpp **** 			  2 steps jati gayesi sand dune aucha
  78:Core/Src/robot/robot.cpp **** 			  sand dune kateko thapauna proximity sensor use garnaparcha ki
  79:Core/Src/robot/robot.cpp **** 			  ta IMU bata roll value hernaparcha 
  80:Core/Src/robot/robot.cpp **** 			  sand dune kateko thapaesi state_B flag clear garnaparcha
  81:Core/Src/robot/robot.cpp **** 			  state_C flag set garnaparcha			   
  82:Core/Src/robot/robot.cpp **** 			*/
  83:Core/Src/robot/robot.cpp **** 		printf("Turn 45");
 286              		.loc 1 83 0
 287 01a4 7748     		ldr	r0, .L17+60
 288              	.LVL40:
 289 01a6 FFF7FEFF 		bl	printf
 290              	.LVL41:
  84:Core/Src/robot/robot.cpp **** 		
  85:Core/Src/robot/robot.cpp **** 		/*/
  86:Core/Src/robot/robot.cpp **** 		if (go(steps[1], angles[1]) == true)
  87:Core/Src/robot/robot.cpp **** 		{
  88:Core/Src/robot/robot.cpp **** 			*state_ = SAND_DUNE;
  89:Core/Src/robot/robot.cpp **** 		}
  90:Core/Src/robot/robot.cpp **** 		/*/
  91:Core/Src/robot/robot.cpp **** 		go(99, angles[1]);
 291              		.loc 1 91 0
 292 01aa 744B     		ldr	r3, .L17+52
 293 01ac 93ED010A 		vldr.32	s0, [r3, #4]
 294 01b0 6320     		movs	r0, #99
 295 01b2 FFF7FEFF 		bl	_Z2goif
 296              	.LVL42:
  92:Core/Src/robot/robot.cpp **** 		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET){
 297              		.loc 1 92 0
 298 01b6 4FF48071 		mov	r1, #256
 299 01ba 6E48     		ldr	r0, .L17+44
 300 01bc FFF7FEFF 		bl	HAL_GPIO_ReadPin
 301              	.LVL43:
 302 01c0 0028     		cmp	r0, #0
 303 01c2 40F06681 		bne	.L1
  93:Core/Src/robot/robot.cpp **** 			*state_ = SAND_DUNE;
 304              		.loc 1 93 0
 305 01c6 0323     		movs	r3, #3
 306 01c8 2370     		strb	r3, [r4]
  94:Core/Src/robot/robot.cpp **** 			leg[0].steps = steps[1];
 307              		.loc 1 94 0
 308 01ca 6D4B     		ldr	r3, .L17+56
 309 01cc 5A68     		ldr	r2, [r3, #4]
 310 01ce 624B     		ldr	r3, .L17+16
 311 01d0 1A61     		str	r2, [r3, #16]
  95:Core/Src/robot/robot.cpp **** 			leg[1].steps = steps[1];
 312              		.loc 1 95 0
 313 01d2 9A66     		str	r2, [r3, #104]
  96:Core/Src/robot/robot.cpp **** 			BACK_PROXIMITY_FLAG = false;
 314              		.loc 1 96 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 11


 315 01d4 0023     		movs	r3, #0
 316 01d6 6C4A     		ldr	r2, .L17+64
 317 01d8 1370     		strb	r3, [r2]
  97:Core/Src/robot/robot.cpp **** 			FRONT_PROXIMITY_FLAG = false;
 318              		.loc 1 97 0
 319 01da 6C4A     		ldr	r2, .L17+68
 320 01dc 1370     		strb	r3, [r2]
  98:Core/Src/robot/robot.cpp **** 			
  99:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 321              		.loc 1 99 0
 322 01de 654C     		ldr	r4, .L17+44
 323              	.LVL44:
 324 01e0 4FF48051 		mov	r1, #4096
 325 01e4 2046     		mov	r0, r4
 326 01e6 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 327              	.LVL45:
 100:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 328              		.loc 1 100 0
 329 01ea 4FF40051 		mov	r1, #8192
 330 01ee 2046     		mov	r0, r4
 331 01f0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 332              	.LVL46:
 101:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 333              		.loc 1 101 0
 334 01f4 4FF48041 		mov	r1, #16384
 335 01f8 2046     		mov	r0, r4
 336 01fa FFF7FEFF 		bl	HAL_GPIO_TogglePin
 337              	.LVL47:
 102:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 338              		.loc 1 102 0
 339 01fe 4FF40041 		mov	r1, #32768
 340 0202 2046     		mov	r0, r4
 341 0204 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 342              	.LVL48:
 343 0208 43E1     		b	.L1
 344              	.LVL49:
 345              	.L7:
 103:Core/Src/robot/robot.cpp **** 		}
 104:Core/Src/robot/robot.cpp **** 		//*/
 105:Core/Src/robot/robot.cpp **** 	}
 106:Core/Src/robot/robot.cpp **** 	break;
 107:Core/Src/robot/robot.cpp **** 	case SAND_DUNE:
 108:Core/Src/robot/robot.cpp **** 	{
 109:Core/Src/robot/robot.cpp **** 		/*state _C flag set vayesi 55 degree jati ghumna parcha 1 to 2 steps
 110:Core/Src/robot/robot.cpp **** 			after this seate_C flag needs to be cleared and state_D flag needs to be set
 111:Core/Src/robot/robot.cpp **** 			sand dune pachi ko ek dui steps wala region
 112:Core/Src/robot/robot.cpp **** 			*/
 113:Core/Src/robot/robot.cpp **** 		printf("Sand dune");
 346              		.loc 1 113 0
 347 020a 6148     		ldr	r0, .L17+72
 348              	.LVL50:
 349 020c FFF7FEFF 		bl	printf
 350              	.LVL51:
 114:Core/Src/robot/robot.cpp **** 		/*/
 115:Core/Src/robot/robot.cpp **** 		if (go(steps[2], angles[2]) == true)
 116:Core/Src/robot/robot.cpp **** 		{
 117:Core/Src/robot/robot.cpp **** 			*state_ = STATE_D;
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 12


 118:Core/Src/robot/robot.cpp **** 		}
 119:Core/Src/robot/robot.cpp **** 		/*/
 120:Core/Src/robot/robot.cpp **** 		go(100, angles[2]);
 351              		.loc 1 120 0
 352 0210 5A4B     		ldr	r3, .L17+52
 353 0212 93ED020A 		vldr.32	s0, [r3, #8]
 354 0216 6420     		movs	r0, #100
 355 0218 FFF7FEFF 		bl	_Z2goif
 356              	.LVL52:
 121:Core/Src/robot/robot.cpp **** 		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET){			
 357              		.loc 1 121 0
 358 021c 4FF48061 		mov	r1, #1024
 359 0220 5448     		ldr	r0, .L17+44
 360 0222 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 361              	.LVL53:
 362 0226 0028     		cmp	r0, #0
 363 0228 40F03381 		bne	.L1
 122:Core/Src/robot/robot.cpp **** 			*state_ = STATE_D;
 364              		.loc 1 122 0
 365 022c 0423     		movs	r3, #4
 366 022e 2370     		strb	r3, [r4]
 123:Core/Src/robot/robot.cpp **** 			leg[0].steps = steps[2];
 367              		.loc 1 123 0
 368 0230 534B     		ldr	r3, .L17+56
 369 0232 9A68     		ldr	r2, [r3, #8]
 370 0234 484B     		ldr	r3, .L17+16
 371 0236 1A61     		str	r2, [r3, #16]
 124:Core/Src/robot/robot.cpp **** 			leg[1].steps = steps[2];
 372              		.loc 1 124 0
 373 0238 9A66     		str	r2, [r3, #104]
 125:Core/Src/robot/robot.cpp **** 			
 126:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 374              		.loc 1 126 0
 375 023a 4E4C     		ldr	r4, .L17+44
 376              	.LVL54:
 377 023c 4FF48051 		mov	r1, #4096
 378 0240 2046     		mov	r0, r4
 379 0242 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 380              	.LVL55:
 127:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 381              		.loc 1 127 0
 382 0246 4FF40051 		mov	r1, #8192
 383 024a 2046     		mov	r0, r4
 384 024c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 385              	.LVL56:
 128:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 386              		.loc 1 128 0
 387 0250 4FF48041 		mov	r1, #16384
 388 0254 2046     		mov	r0, r4
 389 0256 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 390              	.LVL57:
 129:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 391              		.loc 1 129 0
 392 025a 4FF40041 		mov	r1, #32768
 393 025e 2046     		mov	r0, r4
 394 0260 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 395              	.LVL58:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 13


 396 0264 15E1     		b	.L1
 397              	.LVL59:
 398              	.L8:
 130:Core/Src/robot/robot.cpp **** 		}
 131:Core/Src/robot/robot.cpp **** 		//*/
 132:Core/Src/robot/robot.cpp **** 	}
 133:Core/Src/robot/robot.cpp **** 	break;
 134:Core/Src/robot/robot.cpp **** 	case STATE_D:
 135:Core/Src/robot/robot.cpp **** 	{
 136:Core/Src/robot/robot.cpp **** 		/*
 137:Core/Src/robot/robot.cpp **** 			state_D start vayesi ek dui stpes sidha janaparcha around 90 degrees from the original position 
 138:Core/Src/robot/robot.cpp **** 			teti steps pugesi 0 angle ma agadi janaparcha 
 139:Core/Src/robot/robot.cpp **** 			tespachi state d flag clear huncha ani state E flag set huncha*/
 140:Core/Src/robot/robot.cpp **** 			printf("State D");
 399              		.loc 1 140 0
 400 0266 4B48     		ldr	r0, .L17+76
 401              	.LVL60:
 402 0268 FFF7FEFF 		bl	printf
 403              	.LVL61:
 141:Core/Src/robot/robot.cpp **** 		if (go(steps[3], angles[3]) == true)
 404              		.loc 1 141 0
 405 026c 434B     		ldr	r3, .L17+52
 406 026e 93ED030A 		vldr.32	s0, [r3, #12]
 407 0272 434B     		ldr	r3, .L17+56
 408 0274 D868     		ldr	r0, [r3, #12]
 409 0276 FFF7FEFF 		bl	_Z2goif
 410              	.LVL62:
 411 027a 0028     		cmp	r0, #0
 412 027c 00F00981 		beq	.L1
 142:Core/Src/robot/robot.cpp **** 		{
 143:Core/Src/robot/robot.cpp **** 			*state_ = TURN_90;
 413              		.loc 1 143 0
 414 0280 0523     		movs	r3, #5
 415 0282 2370     		strb	r3, [r4]
 144:Core/Src/robot/robot.cpp **** 			
 145:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 416              		.loc 1 145 0
 417 0284 3B4C     		ldr	r4, .L17+44
 418              	.LVL63:
 419 0286 4FF48051 		mov	r1, #4096
 420 028a 2046     		mov	r0, r4
 421 028c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 422              	.LVL64:
 146:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 423              		.loc 1 146 0
 424 0290 4FF40051 		mov	r1, #8192
 425 0294 2046     		mov	r0, r4
 426 0296 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 427              	.LVL65:
 147:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 428              		.loc 1 147 0
 429 029a 4FF48041 		mov	r1, #16384
 430 029e 2046     		mov	r0, r4
 431 02a0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 432              	.LVL66:
 148:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 433              		.loc 1 148 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 14


 434 02a4 4FF40041 		mov	r1, #32768
 435 02a8 2046     		mov	r0, r4
 436 02aa FFF7FEFF 		bl	HAL_GPIO_TogglePin
 437              	.LVL67:
 438 02ae F0E0     		b	.L1
 439              	.LVL68:
 440              	.L9:
 149:Core/Src/robot/robot.cpp **** 		}
 150:Core/Src/robot/robot.cpp **** 	}
 151:Core/Src/robot/robot.cpp **** 	break;
 152:Core/Src/robot/robot.cpp **** 
 153:Core/Src/robot/robot.cpp **** 	case TURN_90:
 154:Core/Src/robot/robot.cpp **** 	{
 155:Core/Src/robot/robot.cpp **** 		/*tussock cross garnaparcha
 156:Core/Src/robot/robot.cpp **** 			no of steps = 
 157:Core/Src/robot/robot.cpp **** 			no of steps le state_E end vako thahuncha 
 158:Core/Src/robot/robot.cpp **** 			*/
 159:Core/Src/robot/robot.cpp **** 		printf("Turn 90");
 441              		.loc 1 159 0
 442 02b0 3948     		ldr	r0, .L17+80
 443              	.LVL69:
 444 02b2 FFF7FEFF 		bl	printf
 445              	.LVL70:
 160:Core/Src/robot/robot.cpp **** 		if (go(steps[4], angles[4]) == true)
 446              		.loc 1 160 0
 447 02b6 314B     		ldr	r3, .L17+52
 448 02b8 93ED040A 		vldr.32	s0, [r3, #16]
 449 02bc 304B     		ldr	r3, .L17+56
 450 02be 1869     		ldr	r0, [r3, #16]
 451 02c0 FFF7FEFF 		bl	_Z2goif
 452              	.LVL71:
 453 02c4 0028     		cmp	r0, #0
 454 02c6 00F0E480 		beq	.L1
 161:Core/Src/robot/robot.cpp **** 		{
 162:Core/Src/robot/robot.cpp **** 			*state_ = TUSSOCK;
 455              		.loc 1 162 0
 456 02ca 0623     		movs	r3, #6
 457 02cc 2370     		strb	r3, [r4]
 163:Core/Src/robot/robot.cpp **** 			
 164:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 458              		.loc 1 164 0
 459 02ce 294C     		ldr	r4, .L17+44
 460              	.LVL72:
 461 02d0 4FF48051 		mov	r1, #4096
 462 02d4 2046     		mov	r0, r4
 463 02d6 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 464              	.LVL73:
 165:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 465              		.loc 1 165 0
 466 02da 4FF40051 		mov	r1, #8192
 467 02de 2046     		mov	r0, r4
 468 02e0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 469              	.LVL74:
 166:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 470              		.loc 1 166 0
 471 02e4 4FF48041 		mov	r1, #16384
 472 02e8 2046     		mov	r0, r4
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 15


 473 02ea FFF7FEFF 		bl	HAL_GPIO_TogglePin
 474              	.LVL75:
 167:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 475              		.loc 1 167 0
 476 02ee 4FF40041 		mov	r1, #32768
 477 02f2 2046     		mov	r0, r4
 478 02f4 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 479              	.LVL76:
 480 02f8 CBE0     		b	.L1
 481              	.LVL77:
 482              	.L10:
 168:Core/Src/robot/robot.cpp **** 		}
 169:Core/Src/robot/robot.cpp **** 	}
 170:Core/Src/robot/robot.cpp **** 	break;
 171:Core/Src/robot/robot.cpp **** 
 172:Core/Src/robot/robot.cpp **** 	case TUSSOCK:
 173:Core/Src/robot/robot.cpp **** 	{
 174:Core/Src/robot/robot.cpp **** 		/*state_F flag set vayesi
 175:Core/Src/robot/robot.cpp **** 			robot stops 
 176:Core/Src/robot/robot.cpp **** 			user button thichesi state_F end huncha
 177:Core/Src/robot/robot.cpp **** 			*/
 178:Core/Src/robot/robot.cpp **** 		printf("tussock");
 483              		.loc 1 178 0
 484 02fa 2848     		ldr	r0, .L17+84
 485              	.LVL78:
 486 02fc FFF7FEFF 		bl	printf
 487              	.LVL79:
 179:Core/Src/robot/robot.cpp **** 		if (go(steps[5], angles[5]) == true)
 488              		.loc 1 179 0
 489 0300 1E4B     		ldr	r3, .L17+52
 490 0302 93ED050A 		vldr.32	s0, [r3, #20]
 491 0306 1E4B     		ldr	r3, .L17+56
 492 0308 5869     		ldr	r0, [r3, #20]
 493 030a FFF7FEFF 		bl	_Z2goif
 494              	.LVL80:
 495 030e 0028     		cmp	r0, #0
 496 0310 00F0BF80 		beq	.L1
 180:Core/Src/robot/robot.cpp **** 		{
 181:Core/Src/robot/robot.cpp **** 			*state_ = BASE_CAMP;
 497              		.loc 1 181 0
 498 0314 0723     		movs	r3, #7
 499 0316 2370     		strb	r3, [r4]
 182:Core/Src/robot/robot.cpp **** 			
 183:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 500              		.loc 1 183 0
 501 0318 164C     		ldr	r4, .L17+44
 502              	.LVL81:
 503 031a 4FF48051 		mov	r1, #4096
 504 031e 2046     		mov	r0, r4
 505 0320 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 506              	.LVL82:
 184:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 507              		.loc 1 184 0
 508 0324 4FF40051 		mov	r1, #8192
 509 0328 2046     		mov	r0, r4
 510 032a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 511              	.LVL83:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 16


 185:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 512              		.loc 1 185 0
 513 032e 4FF48041 		mov	r1, #16384
 514 0332 2046     		mov	r0, r4
 515 0334 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 516              	.LVL84:
 186:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 517              		.loc 1 186 0
 518 0338 4FF40041 		mov	r1, #32768
 519 033c 2046     		mov	r0, r4
 520 033e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 521              	.LVL85:
 522 0342 A6E0     		b	.L1
 523              	.L18:
 524 0344 AFF30080 		.align	3
 525              	.L17:
 526 0348 182D4454 		.word	1413754136
 527 034c FB210940 		.word	1074340347
 528 0350 00000000 		.word	.LC0
 529 0354 00000000 		.word	0
 530 0358 00000000 		.word	leg
 531 035c DB0FC93F 		.word	1070141403
 532 0360 00000000 		.word	initial_angle
 533 0364 00003443 		.word	1127481344
 534 0368 0000E144 		.word	1155596288
 535 036c 14000000 		.word	.LC1
 536 0370 00000000 		.word	.LANCHOR0
 537 0374 000C0240 		.word	1073875968
 538 0378 4C000000 		.word	.LC2
 539 037c 00000000 		.word	.LANCHOR2
 540 0380 00000000 		.word	.LANCHOR1
 541 0384 54000000 		.word	.LC3
 542 0388 00000000 		.word	.LANCHOR3
 543 038c 00000000 		.word	.LANCHOR4
 544 0390 5C000000 		.word	.LC4
 545 0394 68000000 		.word	.LC5
 546 0398 70000000 		.word	.LC6
 547 039c 78000000 		.word	.LC7
 548 03a0 00000000 		.word	steering
 549              	.LVL86:
 550              	.L11:
 187:Core/Src/robot/robot.cpp **** 		}
 188:Core/Src/robot/robot.cpp **** 	}
 189:Core/Src/robot/robot.cpp **** 	break;
 190:Core/Src/robot/robot.cpp **** 
 191:Core/Src/robot/robot.cpp **** 	case BASE_CAMP:
 192:Core/Src/robot/robot.cpp **** 	{
 193:Core/Src/robot/robot.cpp **** 		/*state_G flag user button thichesi start huncha
 194:Core/Src/robot/robot.cpp **** 			uukhai zone ma n no of steps gayesi state_G end huncha
 195:Core/Src/robot/robot.cpp **** 			*/
 196:Core/Src/robot/robot.cpp **** 		printf("Base camp");
 551              		.loc 1 196 0
 552 03a4 3D48     		ldr	r0, .L19
 553              	.LVL87:
 554 03a6 FFF7FEFF 		bl	printf
 555              	.LVL88:
 197:Core/Src/robot/robot.cpp **** 		if(initialize_leg_position() == true){
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 17


 556              		.loc 1 197 0
 557 03aa FFF7FEFF 		bl	_Z23initialize_leg_positionv
 558              	.LVL89:
 559 03ae 38BB     		cbnz	r0, .L16
 560              	.L12:
 198:Core/Src/robot/robot.cpp **** 			*state_ = MOUNTAIN;
 199:Core/Src/robot/robot.cpp **** 			ROBOT_START_FLAG = false;
 200:Core/Src/robot/robot.cpp **** 			
 201:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 202:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 203:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 204:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 205:Core/Src/robot/robot.cpp **** 		}
 206:Core/Src/robot/robot.cpp **** 	}
 207:Core/Src/robot/robot.cpp **** 	case MOUNTAIN:
 208:Core/Src/robot/robot.cpp **** 	{
 209:Core/Src/robot/robot.cpp **** 		/*state_G flag user button thichesi start huncha
 210:Core/Src/robot/robot.cpp **** 			uukhai zone ma n no of steps gayesi state_G end huncha
 211:Core/Src/robot/robot.cpp **** 			*/
 212:Core/Src/robot/robot.cpp **** 		printf("MOUNTAIN");
 561              		.loc 1 212 0
 562 03b0 3B48     		ldr	r0, .L19+4
 563 03b2 FFF7FEFF 		bl	printf
 564              	.LVL90:
 213:Core/Src/robot/robot.cpp **** 		if (ROBOT_START_FLAG)
 565              		.loc 1 213 0
 566 03b6 3B4B     		ldr	r3, .L19+8
 567 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 568 03ba 002B     		cmp	r3, #0
 569 03bc 3BD0     		beq	.L14
 214:Core/Src/robot/robot.cpp **** 		{
 215:Core/Src/robot/robot.cpp **** 			if (go(steps[6], angles[6]) == true)
 570              		.loc 1 215 0
 571 03be 3A4B     		ldr	r3, .L19+12
 572 03c0 93ED060A 		vldr.32	s0, [r3, #24]
 573 03c4 394B     		ldr	r3, .L19+16
 574 03c6 9869     		ldr	r0, [r3, #24]
 575 03c8 FFF7FEFF 		bl	_Z2goif
 576              	.LVL91:
 577 03cc 0028     		cmp	r0, #0
 578 03ce 60D0     		beq	.L1
 216:Core/Src/robot/robot.cpp **** 			{
 217:Core/Src/robot/robot.cpp **** 				*state_ = UUKHAI;
 579              		.loc 1 217 0
 580 03d0 0923     		movs	r3, #9
 581 03d2 2370     		strb	r3, [r4]
 218:Core/Src/robot/robot.cpp **** 				
 219:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 582              		.loc 1 219 0
 583 03d4 364C     		ldr	r4, .L19+20
 584              	.LVL92:
 585 03d6 4FF48051 		mov	r1, #4096
 586 03da 2046     		mov	r0, r4
 587 03dc FFF7FEFF 		bl	HAL_GPIO_TogglePin
 588              	.LVL93:
 220:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 589              		.loc 1 220 0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 18


 590 03e0 4FF40051 		mov	r1, #8192
 591 03e4 2046     		mov	r0, r4
 592 03e6 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 593              	.LVL94:
 221:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 594              		.loc 1 221 0
 595 03ea 4FF48041 		mov	r1, #16384
 596 03ee 2046     		mov	r0, r4
 597 03f0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 598              	.LVL95:
 222:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 599              		.loc 1 222 0
 600 03f4 4FF40041 		mov	r1, #32768
 601 03f8 2046     		mov	r0, r4
 602 03fa FFF7FEFF 		bl	HAL_GPIO_TogglePin
 603              	.LVL96:
 604 03fe 48E0     		b	.L1
 605              	.LVL97:
 606              	.L16:
 198:Core/Src/robot/robot.cpp **** 			ROBOT_START_FLAG = false;
 607              		.loc 1 198 0
 608 0400 0823     		movs	r3, #8
 609 0402 2370     		strb	r3, [r4]
 199:Core/Src/robot/robot.cpp **** 			
 610              		.loc 1 199 0
 611 0404 274B     		ldr	r3, .L19+8
 612 0406 0022     		movs	r2, #0
 613 0408 1A70     		strb	r2, [r3]
 201:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 614              		.loc 1 201 0
 615 040a 294D     		ldr	r5, .L19+20
 616 040c 4FF48051 		mov	r1, #4096
 617 0410 2846     		mov	r0, r5
 618 0412 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 619              	.LVL98:
 202:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 620              		.loc 1 202 0
 621 0416 4FF40051 		mov	r1, #8192
 622 041a 2846     		mov	r0, r5
 623 041c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 624              	.LVL99:
 203:Core/Src/robot/robot.cpp **** 			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 625              		.loc 1 203 0
 626 0420 4FF48041 		mov	r1, #16384
 627 0424 2846     		mov	r0, r5
 628 0426 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 629              	.LVL100:
 204:Core/Src/robot/robot.cpp **** 		}
 630              		.loc 1 204 0
 631 042a 4FF40041 		mov	r1, #32768
 632 042e 2846     		mov	r0, r5
 633 0430 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 634              	.LVL101:
 635 0434 BCE7     		b	.L12
 636              	.L14:
 223:Core/Src/robot/robot.cpp **** 			}
 224:Core/Src/robot/robot.cpp **** 		}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 19


 225:Core/Src/robot/robot.cpp **** 		else{
 226:Core/Src/robot/robot.cpp **** 			leg[0].set_omega(0);
 637              		.loc 1 226 0
 638 0436 9FED1F8A 		vldr.32	s16, .L19+24
 639 043a 1F4C     		ldr	r4, .L19+28
 640              	.LVL102:
 641 043c B0EE480A 		vmov.f32	s0, s16
 642 0440 2046     		mov	r0, r4
 643 0442 FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 644              	.LVL103:
 227:Core/Src/robot/robot.cpp **** 			leg[1].set_omega(0);
 645              		.loc 1 227 0
 646 0446 B0EE480A 		vmov.f32	s0, s16
 647 044a 04F15800 		add	r0, r4, #88
 648 044e FFF7FEFF 		bl	_ZN3leg9set_omegaEf
 649              	.LVL104:
 228:Core/Src/robot/robot.cpp **** 			steering.set_angle(0);
 650              		.loc 1 228 0
 651 0452 B0EE480A 		vmov.f32	s0, s16
 652 0456 1948     		ldr	r0, .L19+32
 653 0458 FFF7FEFF 		bl	_ZN8steering9set_angleEf
 654              	.LVL105:
 655 045c 19E0     		b	.L1
 656              	.LVL106:
 657              	.L13:
 229:Core/Src/robot/robot.cpp **** 		}
 230:Core/Src/robot/robot.cpp **** 	}
 231:Core/Src/robot/robot.cpp **** 
 232:Core/Src/robot/robot.cpp **** 	break;
 233:Core/Src/robot/robot.cpp **** 	case UUKHAI:
 234:Core/Src/robot/robot.cpp **** 	{
 235:Core/Src/robot/robot.cpp **** 		/*state_G flag user button thichesi start huncha
 236:Core/Src/robot/robot.cpp **** 			uukhai zone ma n no of steps gayesi state_G end huncha
 237:Core/Src/robot/robot.cpp **** 			*/
 238:Core/Src/robot/robot.cpp **** 		initialize_leg_position();
 658              		.loc 1 238 0
 659 045e FFF7FEFF 		bl	_Z23initialize_leg_positionv
 660              	.LVL107:
 239:Core/Src/robot/robot.cpp **** 		printf("\nUUKHAI\n");
 661              		.loc 1 239 0
 662 0462 1748     		ldr	r0, .L19+36
 663 0464 FFF7FEFF 		bl	puts
 664              	.LVL108:
 240:Core/Src/robot/robot.cpp **** 		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 665              		.loc 1 240 0
 666 0468 114C     		ldr	r4, .L19+20
 667              	.LVL109:
 668 046a 4FF48051 		mov	r1, #4096
 669 046e 2046     		mov	r0, r4
 670 0470 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 671              	.LVL110:
 241:Core/Src/robot/robot.cpp **** 		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 672              		.loc 1 241 0
 673 0474 4FF40051 		mov	r1, #8192
 674 0478 2046     		mov	r0, r4
 675 047a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 676              	.LVL111:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 20


 242:Core/Src/robot/robot.cpp **** 		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 677              		.loc 1 242 0
 678 047e 4FF48041 		mov	r1, #16384
 679 0482 2046     		mov	r0, r4
 680 0484 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 681              	.LVL112:
 243:Core/Src/robot/robot.cpp **** 		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 682              		.loc 1 243 0
 683 0488 4FF40041 		mov	r1, #32768
 684 048c 2046     		mov	r0, r4
 685 048e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 686              	.LVL113:
 687              	.L1:
 244:Core/Src/robot/robot.cpp **** 	}
 245:Core/Src/robot/robot.cpp **** 	break;
 246:Core/Src/robot/robot.cpp **** 	}
 247:Core/Src/robot/robot.cpp **** }
 688              		.loc 1 247 0
 689 0492 04B0     		add	sp, sp, #16
 690              	.LCFI3:
 691              		.cfi_def_cfa_offset 40
 692              		@ sp needed
 693 0494 BDEC028B 		vldm	sp!, {d8}
 694              	.LCFI4:
 695              		.cfi_restore 80
 696              		.cfi_restore 81
 697              		.cfi_def_cfa_offset 32
 698 0498 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 699              	.L20:
 700              		.align	2
 701              	.L19:
 702 049c 80000000 		.word	.LC8
 703 04a0 8C000000 		.word	.LC9
 704 04a4 00000000 		.word	.LANCHOR0
 705 04a8 00000000 		.word	.LANCHOR2
 706 04ac 00000000 		.word	.LANCHOR1
 707 04b0 000C0240 		.word	1073875968
 708 04b4 00000000 		.word	0
 709 04b8 00000000 		.word	leg
 710 04bc 00000000 		.word	steering
 711 04c0 98000000 		.word	.LC10
 712              		.cfi_endproc
 713              	.LFE492:
 715              		.section	.text._Z4playv,"ax",%progbits
 716              		.align	1
 717              		.global	_Z4playv
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 721              		.fpu fpv4-sp-d16
 723              	_Z4playv:
 724              	.LFB493:
 248:Core/Src/robot/robot.cpp **** 
 249:Core/Src/robot/robot.cpp **** bool play()
 250:Core/Src/robot/robot.cpp **** {
 725              		.loc 1 250 0
 726              		.cfi_startproc
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 21


 727              		@ args = 0, pretend = 0, frame = 16
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729 0000 30B5     		push	{r4, r5, lr}
 730              	.LCFI5:
 731              		.cfi_def_cfa_offset 12
 732              		.cfi_offset 4, -12
 733              		.cfi_offset 5, -8
 734              		.cfi_offset 14, -4
 735 0002 85B0     		sub	sp, sp, #20
 736              	.LCFI6:
 737              		.cfi_def_cfa_offset 32
 251:Core/Src/robot/robot.cpp **** 	uint32_t dt = HAL_GetTick();
 738              		.loc 1 251 0
 739 0004 FFF7FEFF 		bl	HAL_GetTick
 740              	.LVL114:
 741 0008 0446     		mov	r4, r0
 742              	.LVL115:
 252:Core/Src/robot/robot.cpp **** 	initial_angle = read_Orientation(10);
 743              		.loc 1 252 0
 744 000a 01AD     		add	r5, sp, #4
 745 000c 0A21     		movs	r1, #10
 746 000e 2846     		mov	r0, r5
 747              	.LVL116:
 748 0010 FFF7FEFF 		bl	_Z16read_Orientationm
 749              	.LVL117:
 750 0014 134B     		ldr	r3, .L27
 751 0016 95E80700 		ldm	r5, {r0, r1, r2}
 752 001a 83E80700 		stm	r3, {r0, r1, r2}
 253:Core/Src/robot/robot.cpp **** 	initialize_position();
 753              		.loc 1 253 0
 754 001e FFF7FEFF 		bl	_Z19initialize_positionv
 755              	.LVL118:
 254:Core/Src/robot/robot.cpp **** 
 255:Core/Src/robot/robot.cpp **** 	ROBOT_START_FLAG = false;
 756              		.loc 1 255 0
 757 0022 0023     		movs	r3, #0
 758 0024 104A     		ldr	r2, .L27+4
 759 0026 1370     		strb	r3, [r2]
 760              	.LVL119:
 761              	.L23:
 762              	.LBB29:
 256:Core/Src/robot/robot.cpp **** 	
 257:Core/Src/robot/robot.cpp **** 	for(int i=0; i<7; i++){
 763              		.loc 1 257 0 discriminator 3
 764 0028 062B     		cmp	r3, #6
 765 002a 0ADC     		bgt	.L22
 258:Core/Src/robot/robot.cpp **** 		angles[i] *= -1;
 766              		.loc 1 258 0 discriminator 2
 767 002c 0F4A     		ldr	r2, .L27+8
 768 002e 02EB8302 		add	r2, r2, r3, lsl #2
 769 0032 D2ED007A 		vldr.32	s15, [r2]
 770 0036 F1EE677A 		vneg.f32	s15, s15
 771 003a C2ED007A 		vstr.32	s15, [r2]
 257:Core/Src/robot/robot.cpp **** 		angles[i] *= -1;
 772              		.loc 1 257 0 discriminator 2
 773 003e 0133     		adds	r3, r3, #1
 774              	.LVL120:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 22


 775 0040 F2E7     		b	.L23
 776              	.L22:
 777              	.LBE29:
 259:Core/Src/robot/robot.cpp **** 	}
 260:Core/Src/robot/robot.cpp **** 	//float start_after = 2
 261:Core/Src/robot/robot.cpp **** 	// while(!ROBOT_START_FLAG){
 262:Core/Src/robot/robot.cpp **** 	// 	if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 263:Core/Src/robot/robot.cpp **** 	// 	{
 264:Core/Src/robot/robot.cpp **** 	// 		dt = HAL_GetTick();
 265:Core/Src/robot/robot.cpp **** 	// 		calculate_datas();
 266:Core/Src/robot/robot.cpp **** 	// 		leg[0].set_omega(0);
 267:Core/Src/robot/robot.cpp **** 	// 		leg[0].set_omega(0);
 268:Core/Src/robot/robot.cpp **** 	// 		steering.set_angle(0);
 269:Core/Src/robot/robot.cpp **** 	// 	}
 270:Core/Src/robot/robot.cpp **** 
 271:Core/Src/robot/robot.cpp **** 	// }
 272:Core/Src/robot/robot.cpp **** 	// robo_state = STATE_D;
 273:Core/Src/robot/robot.cpp **** 	// initial_angle.set_Values(0,0,angle[start_after]);
 274:Core/Src/robot/robot.cpp **** 	// leg[0].steps = steps[start_after];
 275:Core/Src/robot/robot.cpp **** 	// leg[1].steps = steps[start_after];
 276:Core/Src/robot/robot.cpp **** 	
 277:Core/Src/robot/robot.cpp **** 	robo_state = HOME;
 778              		.loc 1 277 0
 779 0042 0B4B     		ldr	r3, .L27+12
 780              	.LVL121:
 781 0044 0022     		movs	r2, #0
 782 0046 1A70     		strb	r2, [r3]
 783              	.L24:
 278:Core/Src/robot/robot.cpp **** 	
 279:Core/Src/robot/robot.cpp **** 	while(true){
 280:Core/Src/robot/robot.cpp **** 		if ((HAL_GetTick() - dt) >= (int)(SAMPLE_TIME))
 784              		.loc 1 280 0
 785 0048 FFF7FEFF 		bl	HAL_GetTick
 786              	.LVL122:
 787 004c 001B     		subs	r0, r0, r4
 788 004e 0928     		cmp	r0, #9
 789 0050 FAD9     		bls	.L24
 281:Core/Src/robot/robot.cpp **** 		{
 282:Core/Src/robot/robot.cpp **** 			dt = HAL_GetTick();
 790              		.loc 1 282 0
 791 0052 FFF7FEFF 		bl	HAL_GetTick
 792              	.LVL123:
 793 0056 0446     		mov	r4, r0
 794              	.LVL124:
 283:Core/Src/robot/robot.cpp **** 			calculate_datas();
 795              		.loc 1 283 0
 796 0058 FFF7FEFF 		bl	_Z15calculate_datasv
 797              	.LVL125:
 284:Core/Src/robot/robot.cpp **** 			// steering.set_angle(5);
 285:Core/Src/robot/robot.cpp **** 			// steering_angle = steering.get_angle()*180/PI;
 286:Core/Src/robot/robot.cpp **** 			// steering_omega = steering.get_omega()*5;
 287:Core/Src/robot/robot.cpp **** 			start_Robot(&robo_state);
 798              		.loc 1 287 0
 799 005c 0448     		ldr	r0, .L27+12
 800 005e FFF7FEFF 		bl	_Z11start_RobotP12Robot_States
 801              	.LVL126:
 802 0062 F1E7     		b	.L24
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 23


 803              	.L28:
 804              		.align	2
 805              	.L27:
 806 0064 00000000 		.word	initial_angle
 807 0068 00000000 		.word	.LANCHOR0
 808 006c 00000000 		.word	.LANCHOR2
 809 0070 00000000 		.word	.LANCHOR5
 810              		.cfi_endproc
 811              	.LFE493:
 813              		.global	steering_omega
 814              		.global	steering_angle
 815              		.global	angles
 816              		.global	steps
 817              		.global	BACK_PROXIMITY_FLAG
 818              		.global	FRONT_PROXIMITY_FLAG
 819              		.global	USE_IMU_FLAG
 820              		.global	ROBOT_START_FLAG
 821              		.global	robo_state
 822              		.section	.bss.BACK_PROXIMITY_FLAG,"aw",%nobits
 823              		.set	.LANCHOR3,. + 0
 826              	BACK_PROXIMITY_FLAG:
 827 0000 00       		.space	1
 828              		.section	.bss.FRONT_PROXIMITY_FLAG,"aw",%nobits
 829              		.set	.LANCHOR4,. + 0
 832              	FRONT_PROXIMITY_FLAG:
 833 0000 00       		.space	1
 834              		.section	.bss.ROBOT_START_FLAG,"aw",%nobits
 835              		.set	.LANCHOR0,. + 0
 838              	ROBOT_START_FLAG:
 839 0000 00       		.space	1
 840              		.section	.bss.robo_state,"aw",%nobits
 841              		.set	.LANCHOR5,. + 0
 844              	robo_state:
 845 0000 00       		.space	1
 846              		.section	.bss.steering_angle,"aw",%nobits
 847              		.align	2
 850              	steering_angle:
 851 0000 00000000 		.space	4
 852              		.section	.bss.steering_omega,"aw",%nobits
 853              		.align	2
 856              	steering_omega:
 857 0000 00000000 		.space	4
 858              		.section	.data.USE_IMU_FLAG,"aw",%progbits
 861              	USE_IMU_FLAG:
 862 0000 01       		.byte	1
 863              		.section	.data.angles,"aw",%progbits
 864              		.align	2
 865              		.set	.LANCHOR2,. + 0
 868              	angles:
 869 0000 00000000 		.word	0
 870 0004 00003442 		.word	1110704128
 871 0008 00003442 		.word	1110704128
 872 000c 0000A042 		.word	1117782016
 873 0010 00000000 		.word	0
 874 0014 00000000 		.word	0
 875 0018 00000000 		.word	0
 876              		.section	.data.steps,"aw",%progbits
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 24


 877              		.align	2
 878              		.set	.LANCHOR1,. + 0
 881              	steps:
 882 0000 09000000 		.word	9
 883 0004 0E000000 		.word	14
 884 0008 12000000 		.word	18
 885 000c 14000000 		.word	20
 886 0010 1E000000 		.word	30
 887 0014 20000000 		.word	32
 888 0018 2D000000 		.word	45
 889              		.section	.rodata._Z11start_RobotP12Robot_States.str1.4,"aMS",%progbits,1
 890              		.align	2
 891              	.LC0:
 892 0000 0A095761 		.ascii	"\012\011Waiting_to_start\011\000"
 892      6974696E 
 892      675F746F 
 892      5F737461 
 892      72740900 
 893              	.LC1:
 894 0014 6C656732 		.ascii	"leg2_angle = %d\011leg1_angle = %d\011steering_angl"
 894      5F616E67 
 894      6C65203D 
 894      20256409 
 894      6C656731 
 895 0041 65203D20 		.ascii	"e = %d\011\000"
 895      25640900 
 896 0049 000000   		.space	3
 897              	.LC2:
 898 004c 4D617263 		.ascii	"March\000"
 898      6800
 899 0052 0000     		.space	2
 900              	.LC3:
 901 0054 5475726E 		.ascii	"Turn 45\000"
 901      20343500 
 902              	.LC4:
 903 005c 53616E64 		.ascii	"Sand dune\000"
 903      2064756E 
 903      6500
 904 0066 0000     		.space	2
 905              	.LC5:
 906 0068 53746174 		.ascii	"State D\000"
 906      65204400 
 907              	.LC6:
 908 0070 5475726E 		.ascii	"Turn 90\000"
 908      20393000 
 909              	.LC7:
 910 0078 74757373 		.ascii	"tussock\000"
 910      6F636B00 
 911              	.LC8:
 912 0080 42617365 		.ascii	"Base camp\000"
 912      2063616D 
 912      7000
 913 008a 0000     		.space	2
 914              	.LC9:
 915 008c 4D4F554E 		.ascii	"MOUNTAIN\000"
 915      5441494E 
 915      00
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 25


 916 0095 000000   		.space	3
 917              	.LC10:
 918 0098 0A55554B 		.ascii	"\012UUKHAI\000"
 918      48414900 
 919              		.text
 920              	.Letext0:
 921              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 922              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 923              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 924              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 925              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 926              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 927              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 928              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 929              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 930              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 931              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 932              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 933              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 934              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 935              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 936              		.file 19 "Core/Inc/periphs/tim.h"
 937              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 938              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 939              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 940              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 941              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 942              		.file 25 "Core/Inc/devs/motor.h"
 943              		.file 26 "Core/Inc/devs/encoder.h"
 944              		.file 27 "Core/Inc/utils/pid_algorithms.h"
 945              		.file 28 "Core/Inc/devs/limit_switch.h"
 946              		.file 29 "Core/Inc/periphs/usart.h"
 947              		.file 30 "Core/Inc/periphs/adc.h"
 948              		.file 31 "Core/Inc/robot/robot.h"
 949              		.file 32 "Core/Inc/utils/vec3.h"
 950              		.file 33 "Core/Inc/robot/robot_functions.h"
 951              		.file 34 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 952              		.file 35 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 953              		.file 36 "<built-in>"
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 robot.cpp
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:21     .text._Z11start_RobotP12Robot_States:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:28     .text._Z11start_RobotP12Robot_States:00000000 _Z11start_RobotP12Robot_States
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:62     .text._Z11start_RobotP12Robot_States:00000018 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:72     .text._Z11start_RobotP12Robot_States:0000002c $t
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:526    .text._Z11start_RobotP12Robot_States:00000348 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:552    .text._Z11start_RobotP12Robot_States:000003a4 $t
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:702    .text._Z11start_RobotP12Robot_States:0000049c $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:716    .text._Z4playv:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:723    .text._Z4playv:00000000 _Z4playv
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:806    .text._Z4playv:00000064 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:856    .bss.steering_omega:00000000 steering_omega
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:850    .bss.steering_angle:00000000 steering_angle
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:868    .data.angles:00000000 angles
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:881    .data.steps:00000000 steps
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:826    .bss.BACK_PROXIMITY_FLAG:00000000 BACK_PROXIMITY_FLAG
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:832    .bss.FRONT_PROXIMITY_FLAG:00000000 FRONT_PROXIMITY_FLAG
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:861    .data.USE_IMU_FLAG:00000000 USE_IMU_FLAG
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:838    .bss.ROBOT_START_FLAG:00000000 ROBOT_START_FLAG
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:844    .bss.robo_state:00000000 robo_state
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:827    .bss.BACK_PROXIMITY_FLAG:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:833    .bss.FRONT_PROXIMITY_FLAG:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:839    .bss.ROBOT_START_FLAG:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:845    .bss.robo_state:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:847    .bss.steering_angle:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:853    .bss.steering_omega:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:864    .data.angles:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:877    .data.steps:00000000 $d
C:\Users\Prashant\AppData\Local\Temp\ccWnyiJe.s:890    .rodata._Z11start_RobotP12Robot_States.str1.4:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
printf
_ZN3leg9set_omegaEf
_ZN8steering9set_angleEf
_ZN7encoder18reset_actual_angleEf
_Z16read_Orientationm
_ZN7encoder16get_actual_angleEv
_ZN7encoder9get_angleEv
HAL_GPIO_WritePin
_Z2goif
HAL_GPIO_TogglePin
HAL_GPIO_ReadPin
leg
initial_angle
steering
_Z23initialize_leg_positionv
puts
HAL_GetTick
_Z19initialize_positionv
_Z15calculate_datasv
