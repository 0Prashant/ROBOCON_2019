ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"steering.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN8steering9set_omegaEf,"ax",%progbits
  18              		.align	1
  19              		.global	_ZN8steering9set_omegaEf
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_ZN8steering9set_omegaEf:
  26              	.LFB449:
  27              		.file 1 "Core/Src/devs/steering.cpp"
   1:Core/Src/devs/steering.cpp **** #include "steering.h"
   2:Core/Src/devs/steering.cpp **** 
   3:Core/Src/devs/steering.cpp **** void steering::set_omega(float omega){
  28              		.loc 1 3 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 2DED028B 		vpush.64	{d8}
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
  43              		.cfi_offset 80, -24
  44              		.cfi_offset 81, -20
  45 0006 0546     		mov	r5, r0
  46 0008 B0EE408A 		vmov.f32	s16, s0
   4:Core/Src/devs/steering.cpp **** 	//motor__.set_omega(omega);
   5:Core/Src/devs/steering.cpp **** 	float computed_omega = dpid_.compute(omega-encoder__.get_omega(), 10);
  47              		.loc 1 5 0
  48 000c 00F12404 		add	r4, r0, #36
  49 0010 0C30     		adds	r0, r0, #12
  50              	.LVL1:
  51 0012 FFF7FEFF 		bl	_ZN7encoder9get_omegaEv
  52              	.LVL2:
  53 0016 38EE400A 		vsub.f32	s0, s16, s0
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 2


  54              	.LVL3:
  55              	.LBB64:
  56              	.LBB65:
  57              	.LBB66:
  58              	.LBB67:
  59              		.file 2 "Core/Inc/utils/pid_algorithms.h"
   1:Core/Inc/utils/pid_algorithms.h **** #ifndef _PID_ALGORITHMS_H_
   2:Core/Inc/utils/pid_algorithms.h **** #define _PID_ALGORITHMS_H_
   3:Core/Inc/utils/pid_algorithms.h **** 
   4:Core/Inc/utils/pid_algorithms.h **** class PID_Algorithm
   5:Core/Inc/utils/pid_algorithms.h **** {
   6:Core/Inc/utils/pid_algorithms.h ****       public:
   7:Core/Inc/utils/pid_algorithms.h ****         PID_Algorithm() { set_PID(0, 0, 0); }
   8:Core/Inc/utils/pid_algorithms.h ****         PID_Algorithm(float p, float i, float d) { set_PID(p, i, d); }
   9:Core/Inc/utils/pid_algorithms.h ****         virtual float compute(float error, uint32_t dt_millis) = 0;
  10:Core/Inc/utils/pid_algorithms.h **** 
  11:Core/Inc/utils/pid_algorithms.h ****         void set_P(float p) { p_ = p; }
  12:Core/Inc/utils/pid_algorithms.h ****         void set_I(float i) { i_ = i; }
  13:Core/Inc/utils/pid_algorithms.h ****         void set_D(float d) { d_ = d; }
  14:Core/Inc/utils/pid_algorithms.h ****         void set_PID(float p, float i, float d)
  15:Core/Inc/utils/pid_algorithms.h ****         {
  16:Core/Inc/utils/pid_algorithms.h ****                 set_P(p);
  17:Core/Inc/utils/pid_algorithms.h ****                 set_I(i);
  18:Core/Inc/utils/pid_algorithms.h ****                 set_D(d);
  19:Core/Inc/utils/pid_algorithms.h ****         }
  20:Core/Inc/utils/pid_algorithms.h ****         float get_P() { return p_; }
  60              		.loc 2 20 0
  61 001a 94ED016A 		vldr.32	s12, [r4, #4]
  62              	.LVL4:
  63              	.LBE67:
  64              	.LBE66:
  65              	.LBB68:
  66              	.LBB69:
  21:Core/Inc/utils/pid_algorithms.h ****         float get_I() { return i_; }
  67              		.loc 2 21 0
  68 001e 94ED027A 		vldr.32	s14, [r4, #8]
  69              	.LVL5:
  70              	.LBE69:
  71              	.LBE68:
  72              	.LBB70:
  73              	.LBB71:
  22:Core/Inc/utils/pid_algorithms.h ****         float get_D() { return d_; }
  74              		.loc 2 22 0
  75 0022 D4ED037A 		vldr.32	s15, [r4, #12]
  76              	.LVL6:
  77              	.LBE71:
  78              	.LBE70:
  23:Core/Inc/utils/pid_algorithms.h **** 
  24:Core/Inc/utils/pid_algorithms.h ****         void set_Limits(float max_out, float min_out)
  25:Core/Inc/utils/pid_algorithms.h ****         {
  26:Core/Inc/utils/pid_algorithms.h ****                 max_ = max_out;
  27:Core/Inc/utils/pid_algorithms.h ****                 min_ = min_out;
  28:Core/Inc/utils/pid_algorithms.h ****         }
  29:Core/Inc/utils/pid_algorithms.h **** 
  30:Core/Inc/utils/pid_algorithms.h ****         float get_Upper() { return max_; }
  31:Core/Inc/utils/pid_algorithms.h ****         float get_Lower() { return min_; }
  32:Core/Inc/utils/pid_algorithms.h **** 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 3


  33:Core/Inc/utils/pid_algorithms.h ****         virtual ~PID_Algorithm() {}
  34:Core/Inc/utils/pid_algorithms.h **** 
  35:Core/Inc/utils/pid_algorithms.h ****       protected:
  36:Core/Inc/utils/pid_algorithms.h ****         float p_, i_, d_;
  37:Core/Inc/utils/pid_algorithms.h ****         float max_, min_;
  38:Core/Inc/utils/pid_algorithms.h **** };
  39:Core/Inc/utils/pid_algorithms.h **** 
  40:Core/Inc/utils/pid_algorithms.h **** class Discrete_PID : public PID_Algorithm
  41:Core/Inc/utils/pid_algorithms.h **** {
  42:Core/Inc/utils/pid_algorithms.h ****       public:
  43:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID(float p, float i, float d) : PID_Algorithm(p, i, d)
  44:Core/Inc/utils/pid_algorithms.h ****         {
  45:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
  46:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = 0;
  47:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = 0;
  48:Core/Inc/utils/pid_algorithms.h ****         }
  49:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID()
  50:Core/Inc/utils/pid_algorithms.h ****         {
  51:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
  52:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = 0;
  53:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = 0;
  54:Core/Inc/utils/pid_algorithms.h ****         }
  55:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID(Discrete_PID &&) = default;
  56:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID(const Discrete_PID &) = default;
  57:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID &operator=(Discrete_PID &&) = default;
  58:Core/Inc/utils/pid_algorithms.h ****         Discrete_PID &operator=(const Discrete_PID &) = default;
  59:Core/Inc/utils/pid_algorithms.h ****         ~Discrete_PID() {}
  60:Core/Inc/utils/pid_algorithms.h **** 
  61:Core/Inc/utils/pid_algorithms.h ****         /* *** PID Algorithm Description ***
  62:Core/Inc/utils/pid_algorithms.h ****          * 1) Discrete PID control Algorithm
  63:Core/Inc/utils/pid_algorithms.h ****          * 2) Integrator Method : Forward Euler
  64:Core/Inc/utils/pid_algorithms.h ****          * 3) //! Filtered Derivative not used
  65:Core/Inc/utils/pid_algorithms.h ****          * 4) Output Limited
  66:Core/Inc/utils/pid_algorithms.h ****          * 5) Form : Parallel
  67:Core/Inc/utils/pid_algorithms.h ****          * 6) Compensator Formula : Dz = P + I*Ts/(z-1) + D*(z-1)/(Ts*z)
  68:Core/Inc/utils/pid_algorithms.h ****          * 7) In Time Domain :
  69:Core/Inc/utils/pid_algorithms.h ****          *      y(t) - y(t-1) = a*x(t) + b*x(t-1) + c*x(t-2)
  70:Core/Inc/utils/pid_algorithms.h ****          *      where,
  71:Core/Inc/utils/pid_algorithms.h ****          *              a = P + D/Ts
  72:Core/Inc/utils/pid_algorithms.h ****          *              b = -P + I*Ts - 2*D/Ts
  73:Core/Inc/utils/pid_algorithms.h ****          *              c = D/Ts
  74:Core/Inc/utils/pid_algorithms.h ****          */
  75:Core/Inc/utils/pid_algorithms.h ****         float compute(float error, uint32_t dt_millis)
  76:Core/Inc/utils/pid_algorithms.h ****         {
  77:Core/Inc/utils/pid_algorithms.h ****                 float Ts = (float)dt_millis / 1000.0;
  78:Core/Inc/utils/pid_algorithms.h **** 
  79:Core/Inc/utils/pid_algorithms.h ****                 float P = get_P();
  80:Core/Inc/utils/pid_algorithms.h ****                 float I = get_I();
  81:Core/Inc/utils/pid_algorithms.h ****                 float D_by_Ts = get_D() / Ts;
  79              		.loc 2 81 0
  80 0026 DFED215A 		vldr.32	s11, .L11
  81 002a C7EEA56A 		vdiv.f32	s13, s15, s11
  82              	.LVL7:
  82:Core/Inc/utils/pid_algorithms.h **** 
  83:Core/Inc/utils/pid_algorithms.h ****                 float a = P + D_by_Ts;
  83              		.loc 2 83 0
  84 002e 76EE267A 		vadd.f32	s15, s12, s13
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 4


  85              	.LVL8:
  84:Core/Inc/utils/pid_algorithms.h ****                 float b = -P + I * Ts - 2 * D_by_Ts;
  86              		.loc 2 84 0
  87 0032 27EE257A 		vmul.f32	s14, s14, s11
  88 0036 37EE467A 		vsub.f32	s14, s14, s12
  89 003a 36EEA66A 		vadd.f32	s12, s13, s13
  90 003e 37EE467A 		vsub.f32	s14, s14, s12
  91              	.LVL9:
  85:Core/Inc/utils/pid_algorithms.h ****                 float c = D_by_Ts;
  86:Core/Inc/utils/pid_algorithms.h **** 
  87:Core/Inc/utils/pid_algorithms.h ****                 l_output_ += a * error + b * l_err_ + c * ll_err_;
  92              		.loc 2 87 0
  93 0042 60EE277A 		vmul.f32	s15, s0, s15
  94              	.LVL10:
  95 0046 94ED076A 		vldr.32	s12, [r4, #28]
  96 004a 27EE067A 		vmul.f32	s14, s14, s12
  97              	.LVL11:
  98 004e 77EE877A 		vadd.f32	s15, s15, s14
  99 0052 94ED087A 		vldr.32	s14, [r4, #32]
 100 0056 66EE876A 		vmul.f32	s13, s13, s14
 101              	.LVL12:
 102 005a 77EEA67A 		vadd.f32	s15, s15, s13
 103 005e 94ED067A 		vldr.32	s14, [r4, #24]
 104 0062 77EE877A 		vadd.f32	s15, s15, s14
 105 0066 C4ED067A 		vstr.32	s15, [r4, #24]
 106              	.LVL13:
 107              	.LBB72:
 108              	.LBB73:
  30:Core/Inc/utils/pid_algorithms.h ****         float get_Lower() { return min_; }
 109              		.loc 2 30 0
 110 006a 94ED047A 		vldr.32	s14, [r4, #16]
 111              	.LVL14:
 112              	.LBE73:
 113              	.LBE72:
  88:Core/Inc/utils/pid_algorithms.h **** 
  89:Core/Inc/utils/pid_algorithms.h ****                 if (l_output_ > get_Upper())
 114              		.loc 2 89 0
 115 006e F4EEC77A 		vcmpe.f32	s15, s14
 116 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 117 0076 09DC     		bgt	.L10
 118              	.LVL15:
 119              	.LBB74:
 120              	.LBB75:
  31:Core/Inc/utils/pid_algorithms.h **** 
 121              		.loc 2 31 0
 122 0078 94ED057A 		vldr.32	s14, [r4, #20]
 123              	.LVL16:
 124              	.LBE75:
 125              	.LBE74:
  90:Core/Inc/utils/pid_algorithms.h ****                 {
  91:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Upper();
  92:Core/Inc/utils/pid_algorithms.h ****                 }
  93:Core/Inc/utils/pid_algorithms.h ****                 else if (l_output_ < get_Lower())
 126              		.loc 2 93 0
 127 007c F4EEC77A 		vcmpe.f32	s15, s14
 128 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 129 0084 04D5     		bpl	.L4
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 5


  94:Core/Inc/utils/pid_algorithms.h ****                 {
  95:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Lower();
 130              		.loc 2 95 0
 131 0086 84ED067A 		vstr.32	s14, [r4, #24]
 132 008a 01E0     		b	.L4
 133              	.L10:
  91:Core/Inc/utils/pid_algorithms.h ****                 }
 134              		.loc 2 91 0
 135 008c 84ED067A 		vstr.32	s14, [r4, #24]
 136              	.L4:
  96:Core/Inc/utils/pid_algorithms.h ****                 }
  97:Core/Inc/utils/pid_algorithms.h **** 
  98:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = l_err_;
 137              		.loc 2 98 0
 138 0090 84ED086A 		vstr.32	s12, [r4, #32]
  99:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = error;
 139              		.loc 2 99 0
 140 0094 84ED070A 		vstr.32	s0, [r4, #28]
 141              	.LVL17:
 142              	.LBE65:
 143              	.LBE64:
   6:Core/Src/devs/steering.cpp **** 	motor__.set_omega(computed_omega);
 144              		.loc 1 6 0
 145 0098 94ED060A 		vldr.32	s0, [r4, #24]
 146 009c 05F10800 		add	r0, r5, #8
 147 00a0 FFF7FEFF 		bl	_ZN5motor9set_omegaEf
 148              	.LVL18:
   7:Core/Src/devs/steering.cpp **** 	//printf("\tsettingg %d \t", (int)(omega*100));
   8:Core/Src/devs/steering.cpp **** }
 149              		.loc 1 8 0
 150 00a4 BDEC028B 		vldm	sp!, {d8}
 151              	.LCFI2:
 152              		.cfi_restore 80
 153              		.cfi_restore 81
 154              		.cfi_def_cfa_offset 16
 155              	.LVL19:
 156 00a8 38BD     		pop	{r3, r4, r5, pc}
 157              	.LVL20:
 158              	.L12:
 159 00aa 00BF     		.align	2
 160              	.L11:
 161 00ac 0AD7233C 		.word	1008981770
 162              		.cfi_endproc
 163              	.LFE449:
 165              		.global	__aeabi_f2d
 166              		.global	__aeabi_dmul
 167              		.global	__aeabi_d2f
 168              		.global	__aeabi_ddiv
 169              		.global	__aeabi_dsub
 170              		.section	.text._ZN8steering9set_angleEf,"ax",%progbits
 171              		.align	1
 172              		.global	_ZN8steering9set_angleEf
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	_ZN8steering9set_angleEf:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 6


 179              	.LFB450:
   9:Core/Src/devs/steering.cpp **** 
  10:Core/Src/devs/steering.cpp **** void steering::set_angle(float angle){
 180              		.loc 1 10 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              	.LVL21:
 185 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 24
 188              		.cfi_offset 3, -24
 189              		.cfi_offset 4, -20
 190              		.cfi_offset 5, -16
 191              		.cfi_offset 6, -12
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 0446     		mov	r4, r0
  11:Core/Src/devs/steering.cpp **** 	angle *= 180/PI; 
 195              		.loc 1 11 0
 196 0004 10EE100A 		vmov	r0, s0
 197              	.LVL22:
 198 0008 FFF7FEFF 		bl	__aeabi_f2d
 199              	.LVL23:
 200 000c 3BA3     		adr	r3, .L30+12
 201 000e D3E90023 		ldrd	r2, [r3]
 202 0012 FFF7FEFF 		bl	__aeabi_dmul
 203              	.LVL24:
 204 0016 FFF7FEFF 		bl	__aeabi_d2f
 205              	.LVL25:
 206 001a 0546     		mov	r5, r0	@ float
 207              	.LVL26:
  12:Core/Src/devs/steering.cpp **** 	float computed_omega = apid_.compute(angle-(encoder__.get_angle()*180/PI), 10);
 208              		.loc 1 12 0
 209 001c 04F10C00 		add	r0, r4, #12
 210              	.LVL27:
 211 0020 FFF7FEFF 		bl	_ZN7encoder9get_angleEv
 212              	.LVL28:
 213 0024 DFED347A 		vldr.32	s15, .L30+8
 214 0028 60EE277A 		vmul.f32	s15, s0, s15
 215 002c 17EE900A 		vmov	r0, s15
 216 0030 FFF7FEFF 		bl	__aeabi_f2d
 217              	.LVL29:
 218 0034 2EA3     		adr	r3, .L30
 219 0036 D3E90023 		ldrd	r2, [r3]
 220 003a FFF7FEFF 		bl	__aeabi_ddiv
 221              	.LVL30:
 222 003e 0646     		mov	r6, r0
 223 0040 0F46     		mov	r7, r1
 224 0042 2846     		mov	r0, r5	@ float
 225 0044 FFF7FEFF 		bl	__aeabi_f2d
 226              	.LVL31:
 227 0048 3246     		mov	r2, r6
 228 004a 3B46     		mov	r3, r7
 229 004c FFF7FEFF 		bl	__aeabi_dsub
 230              	.LVL32:
 231 0050 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 7


 232              	.LVL33:
 233 0054 07EE100A 		vmov	s14, r0
 234              	.LVL34:
 235              	.LBB76:
 236              	.LBB77:
 237              	.LBB78:
 238              	.LBB79:
  20:Core/Inc/utils/pid_algorithms.h ****         float get_I() { return i_; }
 239              		.loc 2 20 0
 240 0058 D4ED135A 		vldr.32	s11, [r4, #76]
 241              	.LVL35:
 242              	.LBE79:
 243              	.LBE78:
 244              	.LBB80:
 245              	.LBB81:
  21:Core/Inc/utils/pid_algorithms.h ****         float get_D() { return d_; }
 246              		.loc 2 21 0
 247 005c D4ED146A 		vldr.32	s13, [r4, #80]
 248              	.LVL36:
 249              	.LBE81:
 250              	.LBE80:
 100:Core/Inc/utils/pid_algorithms.h **** 		
 101:Core/Inc/utils/pid_algorithms.h ****                 return l_output_;
 102:Core/Inc/utils/pid_algorithms.h ****         }
 103:Core/Inc/utils/pid_algorithms.h **** 
 104:Core/Inc/utils/pid_algorithms.h ****       private:
 105:Core/Inc/utils/pid_algorithms.h ****         float l_output_;
 106:Core/Inc/utils/pid_algorithms.h ****         float l_err_;
 107:Core/Inc/utils/pid_algorithms.h ****         float ll_err_;
 108:Core/Inc/utils/pid_algorithms.h **** };
 109:Core/Inc/utils/pid_algorithms.h **** 
 110:Core/Inc/utils/pid_algorithms.h **** class FilteredDiscrete_PID : public PID_Algorithm
 111:Core/Inc/utils/pid_algorithms.h **** {
 112:Core/Inc/utils/pid_algorithms.h ****       public:
 113:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID(float p, float i, float d, float N = 0) : PID_Algorithm(p, i, d)
 114:Core/Inc/utils/pid_algorithms.h ****         {
 115:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
 116:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = 0;
 117:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = 0;
 118:Core/Inc/utils/pid_algorithms.h ****                 set_N(N);
 119:Core/Inc/utils/pid_algorithms.h ****         }
 120:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID()
 121:Core/Inc/utils/pid_algorithms.h ****         {
 122:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
 123:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = 0;
 124:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = 0;
 125:Core/Inc/utils/pid_algorithms.h ****                 set_N(0);
 126:Core/Inc/utils/pid_algorithms.h ****         }
 127:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID(FilteredDiscrete_PID &&) = default;
 128:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID(const FilteredDiscrete_PID &) = default;
 129:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID &operator=(FilteredDiscrete_PID &&) = default;
 130:Core/Inc/utils/pid_algorithms.h ****         FilteredDiscrete_PID &operator=(const FilteredDiscrete_PID &) = default;
 131:Core/Inc/utils/pid_algorithms.h ****         ~FilteredDiscrete_PID() {}
 132:Core/Inc/utils/pid_algorithms.h **** 
 133:Core/Inc/utils/pid_algorithms.h ****         void set_N(float N) { N_ = N; }
 134:Core/Inc/utils/pid_algorithms.h **** 
 135:Core/Inc/utils/pid_algorithms.h ****         /* *** PID Algorithm Description ***
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 8


 136:Core/Inc/utils/pid_algorithms.h ****          * 1) Filtered Discrete PID control Algorithm
 137:Core/Inc/utils/pid_algorithms.h ****          * 2) Integrator Method : Forward Euler
 138:Core/Inc/utils/pid_algorithms.h ****          * 3) Filtered Derivative used
 139:Core/Inc/utils/pid_algorithms.h ****          * 4) Output Limited
 140:Core/Inc/utils/pid_algorithms.h ****          * 5) Form : Parallel
 141:Core/Inc/utils/pid_algorithms.h ****          * 6) Compensator Formula : Dz = P + I*Ts/(z-1) + D*N*(z-1)/{(z -1) + N*Ts}
 142:Core/Inc/utils/pid_algorithms.h ****          * 7) In Time Domain :
 143:Core/Inc/utils/pid_algorithms.h ****          *      y(t) = (1 + a)*y(t-1) - a*y(t-2) + alpha*x(t) + beta*x(t-1) + gamma*x(t-2)
 144:Core/Inc/utils/pid_algorithms.h ****          *      where,
 145:Core/Inc/utils/pid_algorithms.h ****          *              a = 1 - N_*Ts
 146:Core/Inc/utils/pid_algorithms.h ****          *              alpha = P + D*N
 147:Core/Inc/utils/pid_algorithms.h ****          *              beta = -(1 + a)*P + I*Ts - 2*D*N
 148:Core/Inc/utils/pid_algorithms.h ****          *              gamma = a*P - a*I*Ts + D*N
 149:Core/Inc/utils/pid_algorithms.h ****          */
 150:Core/Inc/utils/pid_algorithms.h ****         float compute(float error, uint32_t dt_millis)
 151:Core/Inc/utils/pid_algorithms.h ****         {
 152:Core/Inc/utils/pid_algorithms.h ****                 float Ts = (float)dt_millis / 1000.0;
 153:Core/Inc/utils/pid_algorithms.h **** 
 154:Core/Inc/utils/pid_algorithms.h ****                 float a, alpha, beta, gamma;
 155:Core/Inc/utils/pid_algorithms.h ****                 float output;
 156:Core/Inc/utils/pid_algorithms.h **** 
 157:Core/Inc/utils/pid_algorithms.h ****                 float P = get_P();
 158:Core/Inc/utils/pid_algorithms.h ****                 float I = get_I();
 159:Core/Inc/utils/pid_algorithms.h ****                 float D = get_D();
 160:Core/Inc/utils/pid_algorithms.h **** 
 161:Core/Inc/utils/pid_algorithms.h ****                 a = 1 - N_ * Ts;
 162:Core/Inc/utils/pid_algorithms.h ****                 alpha = P + D * N_;
 163:Core/Inc/utils/pid_algorithms.h ****                 beta = -(1 + a) * P + I * Ts - 2 * D * N_;
 164:Core/Inc/utils/pid_algorithms.h ****                 gamma = a * P - a * I * Ts + D * N_;
 165:Core/Inc/utils/pid_algorithms.h **** 
 166:Core/Inc/utils/pid_algorithms.h ****                 output = (1 + a) * l_output_ - a * ll_output_ + alpha * error + beta * l_err_ + gam
 167:Core/Inc/utils/pid_algorithms.h **** 
 168:Core/Inc/utils/pid_algorithms.h ****                 ll_output_ = l_output_;
 169:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = output;
 170:Core/Inc/utils/pid_algorithms.h ****                 ll_err_ = l_err_;
 171:Core/Inc/utils/pid_algorithms.h ****                 l_err_ = error;
 172:Core/Inc/utils/pid_algorithms.h **** 
 173:Core/Inc/utils/pid_algorithms.h ****                 if (l_output_ > get_Upper())
 174:Core/Inc/utils/pid_algorithms.h ****                 {
 175:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Upper();
 176:Core/Inc/utils/pid_algorithms.h ****                 }
 177:Core/Inc/utils/pid_algorithms.h ****                 else if (l_output_ < get_Lower())
 178:Core/Inc/utils/pid_algorithms.h ****                 {
 179:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Lower();
 180:Core/Inc/utils/pid_algorithms.h ****                 }
 181:Core/Inc/utils/pid_algorithms.h ****                 return l_output_;
 182:Core/Inc/utils/pid_algorithms.h ****         }
 183:Core/Inc/utils/pid_algorithms.h **** 
 184:Core/Inc/utils/pid_algorithms.h ****       private:
 185:Core/Inc/utils/pid_algorithms.h ****         float N_;
 186:Core/Inc/utils/pid_algorithms.h **** 
 187:Core/Inc/utils/pid_algorithms.h ****         float l_output_;
 188:Core/Inc/utils/pid_algorithms.h ****         float ll_output_;
 189:Core/Inc/utils/pid_algorithms.h ****         float l_err_;
 190:Core/Inc/utils/pid_algorithms.h ****         float ll_err_;
 191:Core/Inc/utils/pid_algorithms.h **** };
 192:Core/Inc/utils/pid_algorithms.h **** 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 9


 193:Core/Inc/utils/pid_algorithms.h **** class Angle_PID : public PID_Algorithm
 194:Core/Inc/utils/pid_algorithms.h **** {
 195:Core/Inc/utils/pid_algorithms.h ****       public:
 196:Core/Inc/utils/pid_algorithms.h ****         Angle_PID(float p, float i, float d) : PID_Algorithm(p, i, d)
 197:Core/Inc/utils/pid_algorithms.h ****         {
 198:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
 199:Core/Inc/utils/pid_algorithms.h ****                 err_sum_ = 0;
 200:Core/Inc/utils/pid_algorithms.h ****         }
 201:Core/Inc/utils/pid_algorithms.h **** 
 202:Core/Inc/utils/pid_algorithms.h ****         Angle_PID()
 203:Core/Inc/utils/pid_algorithms.h ****         {
 204:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = 0;
 205:Core/Inc/utils/pid_algorithms.h ****                 err_sum_ = 0;
 206:Core/Inc/utils/pid_algorithms.h ****         }
 207:Core/Inc/utils/pid_algorithms.h **** 
 208:Core/Inc/utils/pid_algorithms.h ****         Angle_PID(Angle_PID &&) = default;
 209:Core/Inc/utils/pid_algorithms.h ****         Angle_PID(const Angle_PID &) = default;
 210:Core/Inc/utils/pid_algorithms.h ****         Angle_PID &operator=(Angle_PID &&) = default;
 211:Core/Inc/utils/pid_algorithms.h ****         Angle_PID &operator=(const Angle_PID &) = default;
 212:Core/Inc/utils/pid_algorithms.h ****         ~Angle_PID() { }
 213:Core/Inc/utils/pid_algorithms.h **** 
 214:Core/Inc/utils/pid_algorithms.h ****         /* *** PID Algorithm Description ***
 215:Core/Inc/utils/pid_algorithms.h ****                 * 1) Angle PID control Algorithm
 216:Core/Inc/utils/pid_algorithms.h ****                 * 2) Use of Proportional Controller Only 
 217:Core/Inc/utils/pid_algorithms.h ****                 * 3) Output Limited
 218:Core/Inc/utils/pid_algorithms.h ****                 * 4) Compensator formula in Time Domain: 
 219:Core/Inc/utils/pid_algorithms.h ****                 *              y(t) = P * {(x(t) - x(t-1))/Ts}
 220:Core/Inc/utils/pid_algorithms.h ****                 */
 221:Core/Inc/utils/pid_algorithms.h **** 
 222:Core/Inc/utils/pid_algorithms.h ****         float compute(float error, uint32_t dt_millis)
 223:Core/Inc/utils/pid_algorithms.h ****         {
 224:Core/Inc/utils/pid_algorithms.h ****                 // float Ts = (float)dt_millis / 1000.0;
 225:Core/Inc/utils/pid_algorithms.h **** 
 226:Core/Inc/utils/pid_algorithms.h ****                 float P = get_P();
 227:Core/Inc/utils/pid_algorithms.h ****                 float I = get_I();
 228:Core/Inc/utils/pid_algorithms.h **** 
 229:Core/Inc/utils/pid_algorithms.h ****                 err_sum_ += error;
 251              		.loc 2 229 0
 252 0060 D4ED197A 		vldr.32	s15, [r4, #100]
 253 0064 77EE277A 		vadd.f32	s15, s14, s15
 254 0068 C4ED197A 		vstr.32	s15, [r4, #100]
 230:Core/Inc/utils/pid_algorithms.h ****                 float i_term = I * err_sum_;
 255              		.loc 2 230 0
 256 006c 66EEA76A 		vmul.f32	s13, s13, s15
 257              	.LVL37:
 258              	.LBB82:
 259              	.LBB83:
  30:Core/Inc/utils/pid_algorithms.h ****         float get_Lower() { return min_; }
 260              		.loc 2 30 0
 261 0070 94ED166A 		vldr.32	s12, [r4, #88]
 262              	.LVL38:
 263              	.LBE83:
 264              	.LBE82:
 231:Core/Inc/utils/pid_algorithms.h ****                 // Clamping Integral Term
 232:Core/Inc/utils/pid_algorithms.h ****                 if (i_term > get_Upper()) {
 265              		.loc 2 232 0
 266 0074 F4EEC66A 		vcmpe.f32	s13, s12
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 10


 267 0078 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 268 007c 18DD     		ble	.L26
 269              	.LVL39:
 233:Core/Inc/utils/pid_algorithms.h ****                         i_term = get_Upper();
 234:Core/Inc/utils/pid_algorithms.h ****                         err_sum_ = 0;
 270              		.loc 2 234 0
 271 007e 0023     		movs	r3, #0
 272 0080 6366     		str	r3, [r4, #100]	@ float
 233:Core/Inc/utils/pid_algorithms.h ****                         i_term = get_Upper();
 273              		.loc 2 233 0
 274 0082 F0EE466A 		vmov.f32	s13, s12
 275              	.L16:
 276              	.LVL40:
 235:Core/Inc/utils/pid_algorithms.h ****                 }
 236:Core/Inc/utils/pid_algorithms.h ****                 else if (i_term < get_Lower()) {
 237:Core/Inc/utils/pid_algorithms.h ****                         i_term = get_Lower();
 238:Core/Inc/utils/pid_algorithms.h ****                         err_sum_ = 0;
 239:Core/Inc/utils/pid_algorithms.h ****                 }
 240:Core/Inc/utils/pid_algorithms.h **** 
 241:Core/Inc/utils/pid_algorithms.h ****                 l_output_ = P * error + i_term;
 277              		.loc 2 241 0
 278 0086 67EE257A 		vmul.f32	s15, s14, s11
 279 008a 77EEA67A 		vadd.f32	s15, s15, s13
 280 008e C4ED187A 		vstr.32	s15, [r4, #96]
 242:Core/Inc/utils/pid_algorithms.h **** 
 243:Core/Inc/utils/pid_algorithms.h ****                 if (l_output_ > get_Upper())
 281              		.loc 2 243 0
 282 0092 B4EEE76A 		vcmpe.f32	s12, s15
 283 0096 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 284 009a 15D4     		bmi	.L29
 285              	.LVL41:
 286              	.LBB84:
 287              	.LBB85:
  31:Core/Inc/utils/pid_algorithms.h **** 
 288              		.loc 2 31 0
 289 009c 94ED177A 		vldr.32	s14, [r4, #92]
 290              	.LVL42:
 291              	.LBE85:
 292              	.LBE84:
 244:Core/Inc/utils/pid_algorithms.h ****                 {
 245:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Upper();
 246:Core/Inc/utils/pid_algorithms.h ****                 }
 247:Core/Inc/utils/pid_algorithms.h **** 
 248:Core/Inc/utils/pid_algorithms.h ****                 else if (l_output_ < get_Lower())
 293              		.loc 2 248 0
 294 00a0 F4EEC77A 		vcmpe.f32	s15, s14
 295 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 296 00a8 10D5     		bpl	.L20
 249:Core/Inc/utils/pid_algorithms.h ****                 {
 250:Core/Inc/utils/pid_algorithms.h ****                         l_output_ = get_Lower();
 297              		.loc 2 250 0
 298 00aa 84ED187A 		vstr.32	s14, [r4, #96]
 299 00ae 0DE0     		b	.L20
 300              	.L26:
 301              	.LVL43:
 302              	.LBB86:
 303              	.LBB87:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 11


  31:Core/Inc/utils/pid_algorithms.h **** 
 304              		.loc 2 31 0
 305 00b0 D4ED177A 		vldr.32	s15, [r4, #92]
 306              	.LVL44:
 307              	.LBE87:
 308              	.LBE86:
 236:Core/Inc/utils/pid_algorithms.h ****                         i_term = get_Lower();
 309              		.loc 2 236 0
 310 00b4 F4EEE76A 		vcmpe.f32	s13, s15
 311 00b8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 312 00bc E3D5     		bpl	.L16
 313              	.LVL45:
 238:Core/Inc/utils/pid_algorithms.h ****                 }
 314              		.loc 2 238 0
 315 00be 0023     		movs	r3, #0
 316 00c0 6366     		str	r3, [r4, #100]	@ float
 237:Core/Inc/utils/pid_algorithms.h ****                         err_sum_ = 0;
 317              		.loc 2 237 0
 318 00c2 F0EE676A 		vmov.f32	s13, s15
 319 00c6 DEE7     		b	.L16
 320              	.LVL46:
 321              	.L29:
 245:Core/Inc/utils/pid_algorithms.h ****                 }
 322              		.loc 2 245 0
 323 00c8 84ED186A 		vstr.32	s12, [r4, #96]
 324              	.L20:
 251:Core/Inc/utils/pid_algorithms.h ****                 }
 252:Core/Inc/utils/pid_algorithms.h **** 
 253:Core/Inc/utils/pid_algorithms.h ****                 return l_output_;
 325              		.loc 2 253 0
 326 00cc D4ED187A 		vldr.32	s15, [r4, #96]
 327              	.LVL47:
 328              	.LBE77:
 329              	.LBE76:
 330              	.LBB88:
 331              	.LBB89:
 332              		.file 3 "Core/Inc/devs/motor.h"
   1:Core/Inc/devs/motor.h **** #ifndef _MOTOR_H_
   2:Core/Inc/devs/motor.h **** #define _MOTOR_H_
   3:Core/Inc/devs/motor.h **** 
   4:Core/Inc/devs/motor.h **** #include "stm32f4xx_hal.h"
   5:Core/Inc/devs/motor.h **** #include "tim.h"
   6:Core/Inc/devs/motor.h **** #include <math.h>
   7:Core/Inc/devs/motor.h **** 
   8:Core/Inc/devs/motor.h **** enum Direction{
   9:Core/Inc/devs/motor.h **** 	CLOCKWISE,
  10:Core/Inc/devs/motor.h **** 	ANTICLOCKWISE,
  11:Core/Inc/devs/motor.h **** 	STOP
  12:Core/Inc/devs/motor.h **** };
  13:Core/Inc/devs/motor.h **** 
  14:Core/Inc/devs/motor.h **** struct motor_config{
  15:Core/Inc/devs/motor.h **** 	float max_omega;
  16:Core/Inc/devs/motor.h **** 	float tolerance;
  17:Core/Inc/devs/motor.h **** 
  18:Core/Inc/devs/motor.h **** 	GPIO_TypeDef *in1_port;	
  19:Core/Inc/devs/motor.h ****         uint16_t in1_pin;
  20:Core/Inc/devs/motor.h ****         GPIO_TypeDef *in2_port;
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 12


  21:Core/Inc/devs/motor.h ****         uint16_t in2_pin;
  22:Core/Inc/devs/motor.h ****         TIM_HandleTypeDef *htim;        // PWM Generating Timer
  23:Core/Inc/devs/motor.h ****         uint32_t channel;               // PWM Channel
  24:Core/Inc/devs/motor.h **** };
  25:Core/Inc/devs/motor.h **** 
  26:Core/Inc/devs/motor.h **** class motor
  27:Core/Inc/devs/motor.h **** {
  28:Core/Inc/devs/motor.h **** public:
  29:Core/Inc/devs/motor.h **** 	motor(){motor_ = 0;}
  30:Core/Inc/devs/motor.h ****         motor(motor_config *motor) { motor_ = motor; }
  31:Core/Inc/devs/motor.h **** 	motor(motor &&) = default;
  32:Core/Inc/devs/motor.h **** 	motor(const motor &) = default;
  33:Core/Inc/devs/motor.h **** 	motor &operator=(motor &&) = default;
  34:Core/Inc/devs/motor.h **** 	motor &operator=(const motor &) = default;
  35:Core/Inc/devs/motor.h **** 	~motor(){}
  36:Core/Inc/devs/motor.h ****         void set_config(motor_config *motor) { motor_ = motor;}
  37:Core/Inc/devs/motor.h **** 	float get_max_omega(){return motor_->max_omega;}
 333              		.loc 3 37 0
 334 00d0 A368     		ldr	r3, [r4, #8]
 335 00d2 D3ED006A 		vldr.32	s13, [r3]
 336              	.LVL48:
 337              	.LBE89:
 338              	.LBE88:
 339              	.LBB90:
 340              	.LBB91:
  30:Core/Inc/utils/pid_algorithms.h ****         float get_Lower() { return min_; }
 341              		.loc 2 30 0
 342 00d6 94ED0D7A 		vldr.32	s14, [r4, #52]
 343              	.LVL49:
 344              	.LBE91:
 345              	.LBE90:
  13:Core/Src/devs/steering.cpp **** 	computed_omega *= (motor__.get_max_omega()/dpid_.get_Upper());
 346              		.loc 1 13 0
 347 00da 86EE870A 		vdiv.f32	s0, s13, s14
 348              	.LVL50:
  14:Core/Src/devs/steering.cpp **** 	motor__.set_omega(computed_omega);
 349              		.loc 1 14 0
 350 00de 20EE270A 		vmul.f32	s0, s0, s15
 351              	.LVL51:
 352 00e2 04F10800 		add	r0, r4, #8
 353 00e6 FFF7FEFF 		bl	_ZN5motor9set_omegaEf
 354              	.LVL52:
  15:Core/Src/devs/steering.cpp **** }...
 355              		.loc 1 15 0
 356 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 357              	.LVL53:
 358              	.L31:
 359 00ec AFF30080 		.align	3
 360              	.L30:
 361 00f0 182D4454 		.word	1413754136
 362 00f4 FB210940 		.word	1074340347
 363 00f8 00003443 		.word	1127481344
 364 00fc F8C1631A 		.word	442745336
 365 0100 DCA54C40 		.word	1078765020
 366              		.cfi_endproc
 367              	.LFE450:
 369              		.text
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 13


 370              	.Letext0:
 371              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 372              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 373              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 374              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 375              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 376              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 377              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 378              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 379              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 380              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 381              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 382              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 383              		.file 16 "Core/Inc/periphs/tim.h"
 384              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 385              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 386              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 387              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 388              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 389              		.file 22 "Core/Inc/devs/encoder.h"
 390              		.file 23 "Core/Inc/devs/limit_switch.h"
 391              		.file 24 "Core/Inc/devs/steering.h"
 392              		.file 25 "<built-in>"
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 steering.cpp
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:18     .text._ZN8steering9set_omegaEf:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:25     .text._ZN8steering9set_omegaEf:00000000 _ZN8steering9set_omegaEf
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:161    .text._ZN8steering9set_omegaEf:000000ac $d
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:171    .text._ZN8steering9set_angleEf:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:178    .text._ZN8steering9set_angleEf:00000000 _ZN8steering9set_angleEf
C:\Users\Prashant\AppData\Local\Temp\cccwBEEo.s:361    .text._ZN8steering9set_angleEf:000000f0 $d

UNDEFINED SYMBOLS
_ZN7encoder9get_omegaEv
_ZN5motor9set_omegaEf
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
__aeabi_ddiv
__aeabi_dsub
_ZN7encoder9get_angleEv
