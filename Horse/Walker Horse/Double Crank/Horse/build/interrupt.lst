ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"interrupt.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_GPIO_EXTI_Callback
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_GPIO_EXTI_Callback:
  26              	.LFB492:
  27              		.file 1 "Core/Src/devs/interrupt.cpp"
   1:Core/Src/devs/interrupt.cpp **** 
   2:Core/Src/devs/interrupt.cpp **** #include "robo_init.h"
   3:Core/Src/devs/interrupt.cpp **** 
   4:Core/Src/devs/interrupt.cpp **** extern leg leg[2];
   5:Core/Src/devs/interrupt.cpp **** extern steering steering;
   6:Core/Src/devs/interrupt.cpp **** extern bool sand_dune_crossed_flag;
   7:Core/Src/devs/interrupt.cpp **** extern bool ROBOT_START_FLAG;
   8:Core/Src/devs/interrupt.cpp **** extern bool STEERING_FLAG;
   9:Core/Src/devs/interrupt.cpp **** 
  10:Core/Src/devs/interrupt.cpp **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  11:Core/Src/devs/interrupt.cpp **** {
  28              		.loc 1 11 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  12:Core/Src/devs/interrupt.cpp ****         switch (GPIO_Pin) {
  38              		.loc 1 12 0
  39 0002 B0F5007F 		cmp	r0, #512
  40 0006 26D0     		beq	.L3
  41 0008 11D9     		bls	.L10
  42 000a B0F5006F 		cmp	r0, #2048
  43 000e 30D0     		beq	.L7
  44 0010 B0F5004F 		cmp	r0, #32768
  45 0014 1BD1     		bne	.L11
  13:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_0 : {
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 2


  14:Core/Src/devs/interrupt.cpp **** 			ROBOT_START_FLAG = true;
  15:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\t !!start_pressed!!\n\n");
  16:Core/Src/devs/interrupt.cpp **** 		}break;
  17:Core/Src/devs/interrupt.cpp **** 
  18:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_9 : {
  19:Core/Src/devs/interrupt.cpp ****                         leg[0].steps++;
  20:Core/Src/devs/interrupt.cpp ****                         leg[0].reset_angle(300*PI/180);
  21:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt0\t %d\n", leg[0].steps);
  22:Core/Src/devs/interrupt.cpp ****                 } break;
  23:Core/Src/devs/interrupt.cpp **** 
  24:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_11: {
  25:Core/Src/devs/interrupt.cpp ****                         leg[1].steps++;
  26:Core/Src/devs/interrupt.cpp ****                         leg[1].reset_angle(20*PI/180);
  27:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt1\t %d\n", leg[1].steps);
  28:Core/Src/devs/interrupt.cpp ****                 } break;
  29:Core/Src/devs/interrupt.cpp **** 
  30:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_15: {
  31:Core/Src/devs/interrupt.cpp **** 			STEERING_FLAG = true;
  46              		.loc 1 31 0
  47 0016 1E4B     		ldr	r3, .L13
  48 0018 0122     		movs	r2, #1
  49 001a 1A70     		strb	r2, [r3]
  50              	.LVL1:
  51              	.LBB4:
  52              	.LBB5:
  53              		.file 2 "Core/Inc/devs/steering.h"
   1:Core/Inc/devs/steering.h **** /**
   2:Core/Inc/devs/steering.h ****  * steering.h
   3:Core/Inc/devs/steering.h ****  *
   4:Core/Inc/devs/steering.h ****  * \brief Provide control over steering of the horse
   5:Core/Inc/devs/steering.h ****  *
   6:Core/Inc/devs/steering.h ****  * This file is meant as an wrapper to the elements in the encoder. 
   7:Core/Inc/devs/steering.h ****  * It uses the functions of other headers (ie motor.h, encoder.h, 
   8:Core/Inc/devs/steering.h ****  * limit_switch.h and pid.h tocontrol all the functions available 
   9:Core/Inc/devs/steering.h ****  * in the steering.
  10:Core/Inc/devs/steering.h ****  *
  11:Core/Inc/devs/steering.h ****  * \author 	$Author 	: Prashant_Bhatta
  12:Core/Inc/devs/steering.h ****  * \date 	$Date		: 2005/04/14 14:16:20 $
  13:Core/Inc/devs/steering.h ****  * \contact	$Contact	: 073bex425.prashant@pcampus.edu.np
  14:Core/Inc/devs/steering.h ****  *
  15:Core/Inc/devs/steering.h ****  */
  16:Core/Inc/devs/steering.h **** #ifndef _STEERING_H_
  17:Core/Inc/devs/steering.h **** #define _STEERING_H_
  18:Core/Inc/devs/steering.h **** 
  19:Core/Inc/devs/steering.h **** #include "motor.h"
  20:Core/Inc/devs/steering.h **** #include "encoder.h"
  21:Core/Inc/devs/steering.h **** #include "pid.h"
  22:Core/Inc/devs/steering.h **** #include "limit_switch.h"
  23:Core/Inc/devs/steering.h **** 
  24:Core/Inc/devs/steering.h **** class steering
  25:Core/Inc/devs/steering.h **** {
  26:Core/Inc/devs/steering.h **** public:
  27:Core/Inc/devs/steering.h **** 	/// These lines of codes are just for protection of random defination of the objects.
  28:Core/Inc/devs/steering.h **** 	steering(){}
  29:Core/Inc/devs/steering.h **** 	steering(steering &&) = default;
  30:Core/Inc/devs/steering.h **** 	steering(const steering &) = default;
  31:Core/Inc/devs/steering.h **** 	steering &operator=(steering &&) = default;
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 3


  32:Core/Inc/devs/steering.h **** 	steering &operator=(const steering &) = default;
  33:Core/Inc/devs/steering.h **** 	~steering(){}
  34:Core/Inc/devs/steering.h **** 
  35:Core/Inc/devs/steering.h **** 	/**
  36:Core/Inc/devs/steering.h **** 	 * \brief This function setups the configurations for the steering
  37:Core/Inc/devs/steering.h **** 	 * \param motor: pointer to motor_config which contains all the 
  38:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor
  39:Core/Inc/devs/steering.h **** 	 * \param encoder: pointer to encoder_config which contains all the 
  40:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor  
  41:Core/Inc/devs/steering.h **** 	 * \return void
  42:Core/Inc/devs/steering.h **** 	 */
  43:Core/Inc/devs/steering.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  44:Core/Inc/devs/steering.h **** 		motor__.set_config(motor);
  45:Core/Inc/devs/steering.h **** 		encoder__.set_config(encoder);
  46:Core/Inc/devs/steering.h **** 	}
  47:Core/Inc/devs/steering.h **** 
  48:Core/Inc/devs/steering.h **** 	/**
  49:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for PID algorithm
  50:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for PID
  51:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  52:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  53:Core/Inc/devs/steering.h **** 	 * \return void
  54:Core/Inc/devs/steering.h **** 	 */
  55:Core/Inc/devs/steering.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  56:Core/Inc/devs/steering.h **** 		dpid_.set_P(kp);
  57:Core/Inc/devs/steering.h **** 		dpid_.set_I(ki);
  58:Core/Inc/devs/steering.h **** 		dpid_.set_D(kd);
  59:Core/Inc/devs/steering.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  60:Core/Inc/devs/steering.h **** 	}
  61:Core/Inc/devs/steering.h **** 
  62:Core/Inc/devs/steering.h **** 	/**
  63:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for Angle_PID algorithm
  64:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for Anggle_PID
  65:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  66:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  67:Core/Inc/devs/steering.h **** 	 * \return void
  68:Core/Inc/devs/steering.h **** 	 */
  69:Core/Inc/devs/steering.h **** 	void set_angle_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  70:Core/Inc/devs/steering.h **** 		apid_.set_P(kp);
  71:Core/Inc/devs/steering.h **** 		apid_.set_I(ki);
  72:Core/Inc/devs/steering.h **** 		apid_.set_D(kd);
  73:Core/Inc/devs/steering.h **** 		apid_.set_Limits(upper_limit, lower_limit);
  74:Core/Inc/devs/steering.h **** 	}
  75:Core/Inc/devs/steering.h **** 
  76:Core/Inc/devs/steering.h **** 
  77:Core/Inc/devs/steering.h **** 	/** 
  78:Core/Inc/devs/steering.h **** 	 * \brief sets omega for the steering
  79:Core/Inc/devs/steering.h **** 	 * 
  80:Core/Inc/devs/steering.h **** 	 */
  81:Core/Inc/devs/steering.h **** 	void set_omega(float omega);
  82:Core/Inc/devs/steering.h **** 
  83:Core/Inc/devs/steering.h **** 	/** 
  84:Core/Inc/devs/steering.h **** 	 * \brief sets angle for the steering
  85:Core/Inc/devs/steering.h **** 	 * 
  86:Core/Inc/devs/steering.h **** 	 */
  87:Core/Inc/devs/steering.h **** 	void set_angle(float angle);
  88:Core/Inc/devs/steering.h **** 
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 4


  89:Core/Inc/devs/steering.h **** 	/**
  90:Core/Inc/devs/steering.h **** 	 * \brief resets the angle provided by the encoder
  91:Core/Inc/devs/steering.h **** 	 * \param angle_in_radian at which it is to be reset
  92:Core/Inc/devs/steering.h **** 	 * \return void
  93:Core/Inc/devs/steering.h **** 	 */
  94:Core/Inc/devs/steering.h **** 	void reset_angle(float angle_in_radians) {encoder__.reset_angle(angle_in_radians);}
  54              		.loc 2 94 0
  55 001c 9FED1D0A 		vldr.32	s0, .L13+4
  56 0020 1D48     		ldr	r0, .L13+8
  57              	.LVL2:
  58 0022 FFF7FEFF 		bl	_ZN7encoder11reset_angleEf
  59              	.LVL3:
  60              	.LBE5:
  61              	.LBE4:
  32:Core/Src/devs/interrupt.cpp **** 			steering.reset_angle(0);
  33:Core/Src/devs/interrupt.cpp **** 			 printf("\n\n\t\t\tsteering interrupt \t\n");
  62              		.loc 1 33 0
  63 0026 1D48     		ldr	r0, .L13+12
  64 0028 FFF7FEFF 		bl	puts
  65              	.LVL4:
  34:Core/Src/devs/interrupt.cpp ****                 } break;
  66              		.loc 1 34 0
  67 002c 07E0     		b	.L1
  68              	.LVL5:
  69              	.L10:
  12:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_0 : {
  70              		.loc 1 12 0
  71 002e 0128     		cmp	r0, #1
  72 0030 06D1     		bne	.L12
  14:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\t !!start_pressed!!\n\n");
  73              		.loc 1 14 0
  74 0032 1B4B     		ldr	r3, .L13+16
  75 0034 0122     		movs	r2, #1
  76 0036 1A70     		strb	r2, [r3]
  15:Core/Src/devs/interrupt.cpp **** 		}break;
  77              		.loc 1 15 0
  78 0038 1A48     		ldr	r0, .L13+20
  79              	.LVL6:
  80 003a FFF7FEFF 		bl	puts
  81              	.LVL7:
  82              	.L1:
  35:Core/Src/devs/interrupt.cpp **** 
  36:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_8: {
  37:Core/Src/devs/interrupt.cpp **** 			sand_dune_crossed_flag = true;
  38:Core/Src/devs/interrupt.cpp **** 			// printf("\nSand_Dune_Crossed \n");
  39:Core/Src/devs/interrupt.cpp **** 		}
  40:Core/Src/devs/interrupt.cpp **** 
  41:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_10: {
  42:Core/Src/devs/interrupt.cpp **** 			sand_dune_crossed_flag = true;
  43:Core/Src/devs/interrupt.cpp **** 			// printf("\nSand_Dune_Crossed \n");
  44:Core/Src/devs/interrupt.cpp **** 		}
  45:Core/Src/devs/interrupt.cpp ****         }
  46:Core/Src/devs/interrupt.cpp **** }...
  83              		.loc 1 46 0
  84 003e 10BD     		pop	{r4, pc}
  85              	.LVL8:
  86              	.L12:
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 5


  12:Core/Src/devs/interrupt.cpp ****         switch (GPIO_Pin) {
  87              		.loc 1 12 0
  88 0040 B0F5807F 		cmp	r0, #256
  89 0044 FBD1     		bne	.L1
  90              	.L6:
  42:Core/Src/devs/interrupt.cpp **** 			sand_dune_crossed_flag = true;
  91              		.loc 1 42 0
  92 0046 184B     		ldr	r3, .L13+24
  93 0048 0122     		movs	r2, #1
  94 004a 1A70     		strb	r2, [r3]
  95              		.loc 1 46 0
  96 004c F7E7     		b	.L1
  97              	.L11:
  12:Core/Src/devs/interrupt.cpp ****         switch (GPIO_Pin) {
  98              		.loc 1 12 0
  99 004e B0F5806F 		cmp	r0, #1024
 100 0052 F4D1     		bne	.L1
 101 0054 F7E7     		b	.L6
 102              	.L3:
  19:Core/Src/devs/interrupt.cpp ****                         leg[0].steps++;
 103              		.loc 1 19 0
 104 0056 154C     		ldr	r4, .L13+28
 105 0058 2369     		ldr	r3, [r4, #16]
 106 005a 0133     		adds	r3, r3, #1
 107 005c 2361     		str	r3, [r4, #16]
  20:Core/Src/devs/interrupt.cpp ****                         leg[0].reset_angle(300*PI/180);
 108              		.loc 1 20 0
 109 005e 9FED140A 		vldr.32	s0, .L13+32
 110 0062 2046     		mov	r0, r4
 111              	.LVL9:
 112 0064 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 113              	.LVL10:
  21:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt0\t %d\n", leg[0].steps);
 114              		.loc 1 21 0
 115 0068 2169     		ldr	r1, [r4, #16]
 116 006a 1248     		ldr	r0, .L13+36
 117 006c FFF7FEFF 		bl	printf
 118              	.LVL11:
  22:Core/Src/devs/interrupt.cpp ****                 } break;
 119              		.loc 1 22 0
 120 0070 E5E7     		b	.L1
 121              	.LVL12:
 122              	.L7:
  25:Core/Src/devs/interrupt.cpp ****                         leg[1].steps++;
 123              		.loc 1 25 0
 124 0072 0E4C     		ldr	r4, .L13+28
 125 0074 E36E     		ldr	r3, [r4, #108]
 126 0076 0133     		adds	r3, r3, #1
 127 0078 E366     		str	r3, [r4, #108]
  26:Core/Src/devs/interrupt.cpp ****                         leg[1].reset_angle(20*PI/180);
 128              		.loc 1 26 0
 129 007a 9FED0F0A 		vldr.32	s0, .L13+40
 130 007e 04F15C00 		add	r0, r4, #92
 131              	.LVL13:
 132 0082 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 133              	.LVL14:
  27:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt1\t %d\n", leg[1].steps);
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 6


 134              		.loc 1 27 0
 135 0086 E16E     		ldr	r1, [r4, #108]
 136 0088 0C48     		ldr	r0, .L13+44
 137 008a FFF7FEFF 		bl	printf
 138              	.LVL15:
  28:Core/Src/devs/interrupt.cpp ****                 } break;
 139              		.loc 1 28 0
 140 008e D6E7     		b	.L1
 141              	.L14:
 142              		.align	2
 143              	.L13:
 144 0090 00000000 		.word	STEERING_FLAG
 145 0094 00000000 		.word	0
 146 0098 0C000000 		.word	steering+12
 147 009c 54000000 		.word	.LC3
 148 00a0 00000000 		.word	ROBOT_START_FLAG
 149 00a4 00000000 		.word	.LC0
 150 00a8 00000000 		.word	sand_dune_crossed_flag
 151 00ac 00000000 		.word	leg
 152 00b0 368DA740 		.word	1084722486
 153 00b4 1C000000 		.word	.LC1
 154 00b8 C2B8B23E 		.word	1051900098
 155 00bc 38000000 		.word	.LC2
 156              		.cfi_endproc
 157              	.LFE492:
 159              		.section	.rodata.HAL_GPIO_EXTI_Callback.str1.4,"aMS",%progbits,1
 160              		.align	2
 161              	.LC0:
 162 0000 0A0A0909 		.ascii	"\012\012\011\011\011 !!start_pressed!!\012\000"
 162      09202121 
 162      73746172 
 162      745F7072 
 162      65737365 
 163 0019 000000   		.space	3
 164              	.LC1:
 165 001c 0A0A0909 		.ascii	"\012\012\011\011\011Robot interrupt0\011 %d\012\000"
 165      09526F62 
 165      6F742069 
 165      6E746572 
 165      72757074 
 166 0037 00       		.space	1
 167              	.LC2:
 168 0038 0A0A0909 		.ascii	"\012\012\011\011\011Robot interrupt1\011 %d\012\000"
 168      09526F62 
 168      6F742069 
 168      6E746572 
 168      72757074 
 169 0053 00       		.space	1
 170              	.LC3:
 171 0054 0A0A0909 		.ascii	"\012\012\011\011\011steering interrupt \011\000"
 171      09737465 
 171      6572696E 
 171      6720696E 
 171      74657272 
 172              		.text
 173              	.Letext0:
 174              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 7


 175              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 176              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 177              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 178              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 179              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 180              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 181              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 182              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 183              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 184              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 185              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 186              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 187              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 188              		.file 17 "Core/Inc/periphs/tim.h"
 189              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 190              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 191              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 192              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 193              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 194              		.file 23 "Core/Inc/devs/motor.h"
 195              		.file 24 "Core/Inc/devs/encoder.h"
 196              		.file 25 "Core/Inc/utils/pid_algorithms.h"
 197              		.file 26 "Core/Inc/devs/limit_switch.h"
 198              		.file 27 "Core/Inc/devs/leg.h"
 199              		.file 28 "Core/Inc/periphs/usart.h"
 200              		.file 29 "Core/Inc/periphs/adc.h"
 201              		.file 30 "<built-in>"
 202              		.file 31 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 interrupt.cpp
C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s:18     .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s:25     .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s:144    .text.HAL_GPIO_EXTI_Callback:00000090 $d
C:\Users\Prashant\AppData\Local\Temp\ccFZnKIO.s:160    .rodata.HAL_GPIO_EXTI_Callback.str1.4:00000000 $d

UNDEFINED SYMBOLS
_ZN7encoder11reset_angleEf
puts
_ZN3leg11reset_angleEf
printf
STEERING_FLAG
steering
ROBOT_START_FLAG
sand_dune_crossed_flag
leg
