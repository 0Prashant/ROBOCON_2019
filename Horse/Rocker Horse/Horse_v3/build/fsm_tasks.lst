ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsm_tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.phaseOneChores,"ax",%progbits
  18              		.align	1
  19              		.global	phaseOneChores
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	phaseOneChores:
  26              	.LFB127:
  27              		.file 1 "Core/Src/fsm_tasks.c"
   1:Core/Src/fsm_tasks.c **** /*28-1-2019*/
   2:Core/Src/fsm_tasks.c **** 
   3:Core/Src/fsm_tasks.c **** #include "fsm_tasks.h"
   4:Core/Src/fsm_tasks.c **** 
   5:Core/Src/fsm_tasks.c **** void homePositionChores(struct fsmStr *fsm)
   6:Core/Src/fsm_tasks.c **** {
   7:Core/Src/fsm_tasks.c ****         setHomePosition();
   8:Core/Src/fsm_tasks.c ****         check_N_Stop();
   9:Core/Src/fsm_tasks.c **** }
  10:Core/Src/fsm_tasks.c **** 
  11:Core/Src/fsm_tasks.c **** static uint8_t gIs_First = 1;
  12:Core/Src/fsm_tasks.c **** void phaseOneChores(struct fsmStr *fsm)
  13:Core/Src/fsm_tasks.c **** {
  28              		.loc 1 13 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.LBB2:
  14:Core/Src/fsm_tasks.c ****         uint8_t motor_index = 0;
  15:Core/Src/fsm_tasks.c ****         float set_point = 0;
  16:Core/Src/fsm_tasks.c **** 
  17:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 2


  42              		.loc 1 17 0
  43 0002 0024     		movs	r4, #0
  44 0004 14E0     		b	.L2
  45              	.LVL2:
  46              	.L3:
  18:Core/Src/fsm_tasks.c ****         {
  19:Core/Src/fsm_tasks.c ****                 if (i != motor_index)
  20:Core/Src/fsm_tasks.c ****                 {
  21:Core/Src/fsm_tasks.c ****                         ffSetAngle(&ff_arr[i], 60);
  22:Core/Src/fsm_tasks.c ****                         getAngle(&motor_arr[i]);
  23:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
  24:Core/Src/fsm_tasks.c **** 
  25:Core/Src/fsm_tasks.c ****                         set_point = ffGenerate(&ff_arr[i], motor_arr[i].angle);
  26:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
  27:Core/Src/fsm_tasks.c ****                                                                 set_point,
  28:Core/Src/fsm_tasks.c ****                                                                 motor_arr[i].omega,
  29:Core/Src/fsm_tasks.c ****                                                                 dt_ms);
  30:Core/Src/fsm_tasks.c ****                 }
  31:Core/Src/fsm_tasks.c ****                 else if (i == motor_index)
  32:Core/Src/fsm_tasks.c ****                 {
  33:Core/Src/fsm_tasks.c ****                         if (gIs_First) {
  47              		.loc 1 33 0
  48 0006 234B     		ldr	r3, .L9
  49 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  50 000a 002B     		cmp	r3, #0
  51 000c 3AD0     		beq	.L5
  34:Core/Src/fsm_tasks.c ****                                 motor_arr[i].update_omega = 0;
  52              		.loc 1 34 0
  53 000e 224A     		ldr	r2, .L9+4
  54 0010 3423     		movs	r3, #52
  55 0012 03FB0423 		mla	r3, r3, r4, r2
  56 0016 0022     		movs	r2, #0
  57 0018 1A61     		str	r2, [r3, #16]	@ float
  35:Core/Src/fsm_tasks.c ****                                 int_arr[i].intState = STATE_A;
  58              		.loc 1 35 0
  59 001a 04EB4403 		add	r3, r4, r4, lsl #1
  60 001e 9A00     		lsls	r2, r3, #2
  61 0020 1E4B     		ldr	r3, .L9+8
  62 0022 1344     		add	r3, r3, r2
  63 0024 0022     		movs	r2, #0
  64 0026 9A72     		strb	r2, [r3, #10]
  36:Core/Src/fsm_tasks.c ****                                 gIs_First = 0;
  65              		.loc 1 36 0
  66 0028 1A4B     		ldr	r3, .L9
  67 002a 1A70     		strb	r2, [r3]
  68              	.L4:
  17:Core/Src/fsm_tasks.c ****         {
  69              		.loc 1 17 0 discriminator 2
  70 002c 0134     		adds	r4, r4, #1
  71              	.LVL3:
  72 002e E4B2     		uxtb	r4, r4
  73              	.LVL4:
  74              	.L2:
  17:Core/Src/fsm_tasks.c ****         {
  75              		.loc 1 17 0 is_stmt 0 discriminator 1
  76 0030 032C     		cmp	r4, #3
  77 0032 2ED8     		bhi	.L8
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 3


  19:Core/Src/fsm_tasks.c ****                 {
  78              		.loc 1 19 0 is_stmt 1
  79 0034 002C     		cmp	r4, #0
  80 0036 E6D0     		beq	.L3
  21:Core/Src/fsm_tasks.c ****                         getAngle(&motor_arr[i]);
  81              		.loc 1 21 0
  82 0038 C4EB0413 		rsb	r3, r4, r4, lsl #4
  83 003c 9E00     		lsls	r6, r3, #2
  84 003e 184B     		ldr	r3, .L9+12
  85 0040 1E44     		add	r6, r6, r3
  86 0042 9FED180A 		vldr.32	s0, .L9+16
  87 0046 3046     		mov	r0, r6
  88 0048 FFF7FEFF 		bl	ffSetAngle
  89              	.LVL5:
  22:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
  90              		.loc 1 22 0
  91 004c 3425     		movs	r5, #52
  92 004e 124B     		ldr	r3, .L9+4
  93 0050 05FB0435 		mla	r5, r5, r4, r3
  94 0054 2846     		mov	r0, r5
  95 0056 FFF7FEFF 		bl	getAngle
  96              	.LVL6:
  23:Core/Src/fsm_tasks.c **** 
  97              		.loc 1 23 0
  98 005a 2846     		mov	r0, r5
  99 005c FFF7FEFF 		bl	getOmega
 100              	.LVL7:
  25:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
 101              		.loc 1 25 0
 102 0060 95ED010A 		vldr.32	s0, [r5, #4]
 103 0064 3046     		mov	r0, r6
 104 0066 FFF7FEFF 		bl	ffGenerate
 105              	.LVL8:
  26:Core/Src/fsm_tasks.c ****                                                                 set_point,
 106              		.loc 1 26 0
 107 006a C4EBC402 		rsb	r2, r4, r4, lsl #3
 108 006e D300     		lsls	r3, r2, #3
 109 0070 0A21     		movs	r1, #10
 110 0072 D5ED000A 		vldr.32	s1, [r5]
 111 0076 0C48     		ldr	r0, .L9+20
 112 0078 1844     		add	r0, r0, r3
 113 007a FFF7FEFF 		bl	PID_Compute
 114              	.LVL9:
 115 007e 85ED040A 		vstr.32	s0, [r5, #16]
 116 0082 D3E7     		b	.L4
 117              	.L5:
  37:Core/Src/fsm_tasks.c ****                         }
  38:Core/Src/fsm_tasks.c ****                         else {
  39:Core/Src/fsm_tasks.c ****                                 motor_arr[i].update_omega = HOME_POSITION_OMEGA;
 118              		.loc 1 39 0
 119 0084 044A     		ldr	r2, .L9+4
 120 0086 3423     		movs	r3, #52
 121 0088 03FB0423 		mla	r3, r3, r4, r2
 122 008c 074A     		ldr	r2, .L9+24
 123 008e 1A61     		str	r2, [r3, #16]	@ float
 124 0090 CCE7     		b	.L4
 125              	.L8:
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 4


 126              	.LBE2:
  40:Core/Src/fsm_tasks.c ****                         }
  41:Core/Src/fsm_tasks.c ****                 }
  42:Core/Src/fsm_tasks.c ****         }
  43:Core/Src/fsm_tasks.c **** }
 127              		.loc 1 43 0
 128 0092 70BD     		pop	{r4, r5, r6, pc}
 129              	.LVL10:
 130              	.L10:
 131              		.align	2
 132              	.L9:
 133 0094 00000000 		.word	.LANCHOR0
 134 0098 00000000 		.word	motor_arr
 135 009c 00000000 		.word	int_arr
 136 00a0 00000000 		.word	ff_arr
 137 00a4 00007042 		.word	1114636288
 138 00a8 00000000 		.word	pid_arr
 139 00ac 0000C0C0 		.word	-1061158912
 140              		.cfi_endproc
 141              	.LFE127:
 143              		.section	.text.phaseTwoChores,"ax",%progbits
 144              		.align	1
 145              		.global	phaseTwoChores
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	phaseTwoChores:
 152              	.LFB128:
  44:Core/Src/fsm_tasks.c **** 
  45:Core/Src/fsm_tasks.c **** void phaseTwoChores(struct fsmStr *fsm)
  46:Core/Src/fsm_tasks.c **** {
 153              		.loc 1 46 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              	.LVL11:
 158 0000 70B5     		push	{r4, r5, r6, lr}
 159              	.LCFI1:
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 4, -16
 162              		.cfi_offset 5, -12
 163              		.cfi_offset 6, -8
 164              		.cfi_offset 14, -4
 165              	.LVL12:
  47:Core/Src/fsm_tasks.c ****         uint8_t motor_index = 1;
  48:Core/Src/fsm_tasks.c ****         float set_point = 0;
  49:Core/Src/fsm_tasks.c **** 
  50:Core/Src/fsm_tasks.c ****         setDutyCycle(&balance_motor,BALANCE_MOTOR_DC);
 166              		.loc 1 50 0
 167 0002 4FF6FF71 		movw	r1, #65535
 168 0006 1C48     		ldr	r0, .L18
 169              	.LVL13:
 170 0008 FFF7FEFF 		bl	setDutyCycle
 171              	.LVL14:
 172              	.LBB3:
  51:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 5


 173              		.loc 1 51 0
 174 000c 0024     		movs	r4, #0
 175 000e 07E0     		b	.L12
 176              	.LVL15:
 177              	.L13:
  52:Core/Src/fsm_tasks.c ****         {
  53:Core/Src/fsm_tasks.c ****                 if (i != motor_index)
  54:Core/Src/fsm_tasks.c ****                 {
  55:Core/Src/fsm_tasks.c ****                         ffSetAngle(&ff_arr[i], 60);
  56:Core/Src/fsm_tasks.c **** 
  57:Core/Src/fsm_tasks.c ****                         getAngle(&motor_arr[i]);
  58:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
  59:Core/Src/fsm_tasks.c **** 
  60:Core/Src/fsm_tasks.c ****                         set_point = ffGenerate(&ff_arr[i], motor_arr[i].angle);
  61:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
  62:Core/Src/fsm_tasks.c ****                                                                 set_point,
  63:Core/Src/fsm_tasks.c ****                                                                 motor_arr[i].omega,
  64:Core/Src/fsm_tasks.c ****                                                                 dt_ms);
  65:Core/Src/fsm_tasks.c ****                 }
  66:Core/Src/fsm_tasks.c ****                 else {
  67:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = HOME_POSITION_OMEGA;
 178              		.loc 1 67 0
 179 0010 1A4A     		ldr	r2, .L18+4
 180 0012 3423     		movs	r3, #52
 181 0014 03FB0423 		mla	r3, r3, r4, r2
 182 0018 194A     		ldr	r2, .L18+8
 183 001a 1A61     		str	r2, [r3, #16]	@ float
 184              	.L14:
  51:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 185              		.loc 1 51 0 discriminator 2
 186 001c 0134     		adds	r4, r4, #1
 187              	.LVL16:
 188 001e E4B2     		uxtb	r4, r4
 189              	.LVL17:
 190              	.L12:
  51:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 191              		.loc 1 51 0 is_stmt 0 discriminator 1
 192 0020 032C     		cmp	r4, #3
 193 0022 27D8     		bhi	.L17
  53:Core/Src/fsm_tasks.c ****                 {
 194              		.loc 1 53 0 is_stmt 1
 195 0024 012C     		cmp	r4, #1
 196 0026 F3D0     		beq	.L13
  55:Core/Src/fsm_tasks.c **** 
 197              		.loc 1 55 0
 198 0028 C4EB0413 		rsb	r3, r4, r4, lsl #4
 199 002c 9E00     		lsls	r6, r3, #2
 200 002e 154B     		ldr	r3, .L18+12
 201 0030 1E44     		add	r6, r6, r3
 202 0032 9FED150A 		vldr.32	s0, .L18+16
 203 0036 3046     		mov	r0, r6
 204 0038 FFF7FEFF 		bl	ffSetAngle
 205              	.LVL18:
  57:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
 206              		.loc 1 57 0
 207 003c 3425     		movs	r5, #52
 208 003e 0F4B     		ldr	r3, .L18+4
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 6


 209 0040 05FB0435 		mla	r5, r5, r4, r3
 210 0044 2846     		mov	r0, r5
 211 0046 FFF7FEFF 		bl	getAngle
 212              	.LVL19:
  58:Core/Src/fsm_tasks.c **** 
 213              		.loc 1 58 0
 214 004a 2846     		mov	r0, r5
 215 004c FFF7FEFF 		bl	getOmega
 216              	.LVL20:
  60:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
 217              		.loc 1 60 0
 218 0050 95ED010A 		vldr.32	s0, [r5, #4]
 219 0054 3046     		mov	r0, r6
 220 0056 FFF7FEFF 		bl	ffGenerate
 221              	.LVL21:
  61:Core/Src/fsm_tasks.c ****                                                                 set_point,
 222              		.loc 1 61 0
 223 005a C4EBC402 		rsb	r2, r4, r4, lsl #3
 224 005e D300     		lsls	r3, r2, #3
 225 0060 0A21     		movs	r1, #10
 226 0062 D5ED000A 		vldr.32	s1, [r5]
 227 0066 0948     		ldr	r0, .L18+20
 228 0068 1844     		add	r0, r0, r3
 229 006a FFF7FEFF 		bl	PID_Compute
 230              	.LVL22:
 231 006e 85ED040A 		vstr.32	s0, [r5, #16]
 232 0072 D3E7     		b	.L14
 233              	.L17:
 234              	.LBE3:
  68:Core/Src/fsm_tasks.c ****                 }
  69:Core/Src/fsm_tasks.c ****         }
  70:Core/Src/fsm_tasks.c **** }
 235              		.loc 1 70 0
 236 0074 70BD     		pop	{r4, r5, r6, pc}
 237              	.LVL23:
 238              	.L19:
 239 0076 00BF     		.align	2
 240              	.L18:
 241 0078 00000000 		.word	balance_motor
 242 007c 00000000 		.word	motor_arr
 243 0080 0000C0C0 		.word	-1061158912
 244 0084 00000000 		.word	ff_arr
 245 0088 00007042 		.word	1114636288
 246 008c 00000000 		.word	pid_arr
 247              		.cfi_endproc
 248              	.LFE128:
 250              		.section	.text.phaseThreeChores,"ax",%progbits
 251              		.align	1
 252              		.global	phaseThreeChores
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu fpv4-sp-d16
 258              	phaseThreeChores:
 259              	.LFB129:
  71:Core/Src/fsm_tasks.c **** 
  72:Core/Src/fsm_tasks.c **** void phaseThreeChores(struct fsmStr *fsm)
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 7


  73:Core/Src/fsm_tasks.c **** {
 260              		.loc 1 73 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL24:
 265 0000 70B5     		push	{r4, r5, r6, lr}
 266              	.LCFI2:
 267              		.cfi_def_cfa_offset 16
 268              		.cfi_offset 4, -16
 269              		.cfi_offset 5, -12
 270              		.cfi_offset 6, -8
 271              		.cfi_offset 14, -4
 272              	.LVL25:
 273              	.LBB4:
  74:Core/Src/fsm_tasks.c ****         uint8_t motor_index = 2;
  75:Core/Src/fsm_tasks.c ****         float set_point;
  76:Core/Src/fsm_tasks.c **** 
  77:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 274              		.loc 1 77 0
 275 0002 0024     		movs	r4, #0
 276 0004 07E0     		b	.L21
 277              	.LVL26:
 278              	.L22:
  78:Core/Src/fsm_tasks.c ****         {
  79:Core/Src/fsm_tasks.c ****                 if (i != motor_index)
  80:Core/Src/fsm_tasks.c ****                 {
  81:Core/Src/fsm_tasks.c ****                         ffSetAngle(&ff_arr[i], 60);
  82:Core/Src/fsm_tasks.c **** 
  83:Core/Src/fsm_tasks.c ****                         getAngle(&motor_arr[i]);
  84:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
  85:Core/Src/fsm_tasks.c **** 
  86:Core/Src/fsm_tasks.c ****                         set_point = ffGenerate(&ff_arr[i], motor_arr[i].angle);
  87:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
  88:Core/Src/fsm_tasks.c ****                                                                 set_point,
  89:Core/Src/fsm_tasks.c ****                                                                 motor_arr[i].omega,
  90:Core/Src/fsm_tasks.c ****                                                                 dt_ms);
  91:Core/Src/fsm_tasks.c ****                 }
  92:Core/Src/fsm_tasks.c ****                 else {
  93:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = HOME_POSITION_OMEGA;
 279              		.loc 1 93 0
 280 0006 194A     		ldr	r2, .L27
 281 0008 3423     		movs	r3, #52
 282 000a 03FB0423 		mla	r3, r3, r4, r2
 283 000e 184A     		ldr	r2, .L27+4
 284 0010 1A61     		str	r2, [r3, #16]	@ float
 285              	.L23:
  77:Core/Src/fsm_tasks.c ****         {
 286              		.loc 1 77 0 discriminator 2
 287 0012 0134     		adds	r4, r4, #1
 288              	.LVL27:
 289 0014 E4B2     		uxtb	r4, r4
 290              	.LVL28:
 291              	.L21:
  77:Core/Src/fsm_tasks.c ****         {
 292              		.loc 1 77 0 is_stmt 0 discriminator 1
 293 0016 032C     		cmp	r4, #3
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 8


 294 0018 27D8     		bhi	.L26
  79:Core/Src/fsm_tasks.c ****                 {
 295              		.loc 1 79 0 is_stmt 1
 296 001a 022C     		cmp	r4, #2
 297 001c F3D0     		beq	.L22
  81:Core/Src/fsm_tasks.c **** 
 298              		.loc 1 81 0
 299 001e C4EB0413 		rsb	r3, r4, r4, lsl #4
 300 0022 9E00     		lsls	r6, r3, #2
 301 0024 134B     		ldr	r3, .L27+8
 302 0026 1E44     		add	r6, r6, r3
 303 0028 9FED130A 		vldr.32	s0, .L27+12
 304 002c 3046     		mov	r0, r6
 305 002e FFF7FEFF 		bl	ffSetAngle
 306              	.LVL29:
  83:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
 307              		.loc 1 83 0
 308 0032 3425     		movs	r5, #52
 309 0034 0D4B     		ldr	r3, .L27
 310 0036 05FB0435 		mla	r5, r5, r4, r3
 311 003a 2846     		mov	r0, r5
 312 003c FFF7FEFF 		bl	getAngle
 313              	.LVL30:
  84:Core/Src/fsm_tasks.c **** 
 314              		.loc 1 84 0
 315 0040 2846     		mov	r0, r5
 316 0042 FFF7FEFF 		bl	getOmega
 317              	.LVL31:
  86:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
 318              		.loc 1 86 0
 319 0046 95ED010A 		vldr.32	s0, [r5, #4]
 320 004a 3046     		mov	r0, r6
 321 004c FFF7FEFF 		bl	ffGenerate
 322              	.LVL32:
  87:Core/Src/fsm_tasks.c ****                                                                 set_point,
 323              		.loc 1 87 0
 324 0050 C4EBC402 		rsb	r2, r4, r4, lsl #3
 325 0054 D300     		lsls	r3, r2, #3
 326 0056 0A21     		movs	r1, #10
 327 0058 D5ED000A 		vldr.32	s1, [r5]
 328 005c 0748     		ldr	r0, .L27+16
 329 005e 1844     		add	r0, r0, r3
 330 0060 FFF7FEFF 		bl	PID_Compute
 331              	.LVL33:
 332 0064 85ED040A 		vstr.32	s0, [r5, #16]
 333 0068 D3E7     		b	.L23
 334              	.L26:
 335              	.LBE4:
  94:Core/Src/fsm_tasks.c ****                 }
  95:Core/Src/fsm_tasks.c ****         }
  96:Core/Src/fsm_tasks.c **** }
 336              		.loc 1 96 0
 337 006a 70BD     		pop	{r4, r5, r6, pc}
 338              	.LVL34:
 339              	.L28:
 340              		.align	2
 341              	.L27:
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 9


 342 006c 00000000 		.word	motor_arr
 343 0070 0000C0C0 		.word	-1061158912
 344 0074 00000000 		.word	ff_arr
 345 0078 00007042 		.word	1114636288
 346 007c 00000000 		.word	pid_arr
 347              		.cfi_endproc
 348              	.LFE129:
 350              		.section	.text.phaseFourChores,"ax",%progbits
 351              		.align	1
 352              		.global	phaseFourChores
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv4-sp-d16
 358              	phaseFourChores:
 359              	.LFB130:
  97:Core/Src/fsm_tasks.c **** 
  98:Core/Src/fsm_tasks.c **** void phaseFourChores(struct fsmStr *fsm)
  99:Core/Src/fsm_tasks.c **** {
 360              		.loc 1 99 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              	.LVL35:
 365 0000 70B5     		push	{r4, r5, r6, lr}
 366              	.LCFI3:
 367              		.cfi_def_cfa_offset 16
 368              		.cfi_offset 4, -16
 369              		.cfi_offset 5, -12
 370              		.cfi_offset 6, -8
 371              		.cfi_offset 14, -4
 372              	.LVL36:
 373              	.LBB5:
 100:Core/Src/fsm_tasks.c ****         uint8_t motor_index = 3;
 101:Core/Src/fsm_tasks.c ****         float set_point;
 102:Core/Src/fsm_tasks.c **** 
 103:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 374              		.loc 1 103 0
 375 0002 0024     		movs	r4, #0
 376 0004 07E0     		b	.L30
 377              	.LVL37:
 378              	.L31:
 104:Core/Src/fsm_tasks.c ****         {
 105:Core/Src/fsm_tasks.c ****                 if (i != motor_index)
 106:Core/Src/fsm_tasks.c ****                 {
 107:Core/Src/fsm_tasks.c **** 
 108:Core/Src/fsm_tasks.c ****                         ffSetAngle(&ff_arr[i], 60);
 109:Core/Src/fsm_tasks.c **** 
 110:Core/Src/fsm_tasks.c ****                         getAngle(&motor_arr[i]);
 111:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
 112:Core/Src/fsm_tasks.c **** 
 113:Core/Src/fsm_tasks.c ****                         set_point = ffGenerate(&ff_arr[i], motor_arr[i].angle);
 114:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
 115:Core/Src/fsm_tasks.c ****                                                                 set_point,
 116:Core/Src/fsm_tasks.c ****                                                                 motor_arr[i].omega,
 117:Core/Src/fsm_tasks.c ****                                                                 dt_ms);
 118:Core/Src/fsm_tasks.c ****                 }
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 10


 119:Core/Src/fsm_tasks.c ****                 else {
 120:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = HOME_POSITION_OMEGA;
 379              		.loc 1 120 0
 380 0006 194A     		ldr	r2, .L36
 381 0008 3423     		movs	r3, #52
 382 000a 03FB0423 		mla	r3, r3, r4, r2
 383 000e 184A     		ldr	r2, .L36+4
 384 0010 1A61     		str	r2, [r3, #16]	@ float
 385              	.L32:
 103:Core/Src/fsm_tasks.c ****         {
 386              		.loc 1 103 0 discriminator 2
 387 0012 0134     		adds	r4, r4, #1
 388              	.LVL38:
 389 0014 E4B2     		uxtb	r4, r4
 390              	.LVL39:
 391              	.L30:
 103:Core/Src/fsm_tasks.c ****         {
 392              		.loc 1 103 0 is_stmt 0 discriminator 1
 393 0016 032C     		cmp	r4, #3
 394 0018 27D8     		bhi	.L35
 105:Core/Src/fsm_tasks.c ****                 {
 395              		.loc 1 105 0 is_stmt 1
 396 001a 032C     		cmp	r4, #3
 397 001c F3D0     		beq	.L31
 108:Core/Src/fsm_tasks.c **** 
 398              		.loc 1 108 0
 399 001e C4EB0413 		rsb	r3, r4, r4, lsl #4
 400 0022 9E00     		lsls	r6, r3, #2
 401 0024 134B     		ldr	r3, .L36+8
 402 0026 1E44     		add	r6, r6, r3
 403 0028 9FED130A 		vldr.32	s0, .L36+12
 404 002c 3046     		mov	r0, r6
 405 002e FFF7FEFF 		bl	ffSetAngle
 406              	.LVL40:
 110:Core/Src/fsm_tasks.c ****                         getOmega(&motor_arr[i]);
 407              		.loc 1 110 0
 408 0032 3425     		movs	r5, #52
 409 0034 0D4B     		ldr	r3, .L36
 410 0036 05FB0435 		mla	r5, r5, r4, r3
 411 003a 2846     		mov	r0, r5
 412 003c FFF7FEFF 		bl	getAngle
 413              	.LVL41:
 111:Core/Src/fsm_tasks.c **** 
 414              		.loc 1 111 0
 415 0040 2846     		mov	r0, r5
 416 0042 FFF7FEFF 		bl	getOmega
 417              	.LVL42:
 113:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = PID_Compute(&pid_arr[i],
 418              		.loc 1 113 0
 419 0046 95ED010A 		vldr.32	s0, [r5, #4]
 420 004a 3046     		mov	r0, r6
 421 004c FFF7FEFF 		bl	ffGenerate
 422              	.LVL43:
 114:Core/Src/fsm_tasks.c ****                                                                 set_point,
 423              		.loc 1 114 0
 424 0050 C4EBC402 		rsb	r2, r4, r4, lsl #3
 425 0054 D300     		lsls	r3, r2, #3
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 11


 426 0056 0A21     		movs	r1, #10
 427 0058 D5ED000A 		vldr.32	s1, [r5]
 428 005c 0748     		ldr	r0, .L36+16
 429 005e 1844     		add	r0, r0, r3
 430 0060 FFF7FEFF 		bl	PID_Compute
 431              	.LVL44:
 432 0064 85ED040A 		vstr.32	s0, [r5, #16]
 433 0068 D3E7     		b	.L32
 434              	.L35:
 435              	.LBE5:
 121:Core/Src/fsm_tasks.c ****                 }
 122:Core/Src/fsm_tasks.c ****         }
 123:Core/Src/fsm_tasks.c **** }
 436              		.loc 1 123 0
 437 006a 70BD     		pop	{r4, r5, r6, pc}
 438              	.LVL45:
 439              	.L37:
 440              		.align	2
 441              	.L36:
 442 006c 00000000 		.word	motor_arr
 443 0070 0000C0C0 		.word	-1061158912
 444 0074 00000000 		.word	ff_arr
 445 0078 00007042 		.word	1114636288
 446 007c 00000000 		.word	pid_arr
 447              		.cfi_endproc
 448              	.LFE130:
 450              		.section	.text.setHomePosition,"ax",%progbits
 451              		.align	1
 452              		.global	setHomePosition
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu fpv4-sp-d16
 458              	setHomePosition:
 459              	.LFB131:
 124:Core/Src/fsm_tasks.c **** 
 125:Core/Src/fsm_tasks.c **** void setHomePosition(void)
 126:Core/Src/fsm_tasks.c **** {       
 460              		.loc 1 126 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 10B5     		push	{r4, lr}
 465              	.LCFI4:
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 4, -8
 468              		.cfi_offset 14, -4
 127:Core/Src/fsm_tasks.c ****         
 128:Core/Src/fsm_tasks.c ****         setDutyCycle(&balance_motor, BALANCE_MOTOR_DC);
 469              		.loc 1 128 0
 470 0002 0B4C     		ldr	r4, .L42
 471 0004 4FF6FF71 		movw	r1, #65535
 472 0008 2046     		mov	r0, r4
 473 000a FFF7FEFF 		bl	setDutyCycle
 474              	.LVL46:
 129:Core/Src/fsm_tasks.c ****         setDirection(&balance_motor, DIR_ANTICLOCKWISE);
 475              		.loc 1 129 0
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 12


 476 000e 0121     		movs	r1, #1
 477 0010 2046     		mov	r0, r4
 478 0012 FFF7FEFF 		bl	setDirection
 479              	.LVL47:
 480              	.LBB6:
 130:Core/Src/fsm_tasks.c **** 
 131:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 481              		.loc 1 131 0
 482 0016 0023     		movs	r3, #0
 483 0018 07E0     		b	.L39
 484              	.LVL48:
 485              	.L40:
 132:Core/Src/fsm_tasks.c ****         {
 133:Core/Src/fsm_tasks.c ****                 motor_arr[i].update_omega = HOME_POSITION_OMEGA;
 486              		.loc 1 133 0 discriminator 3
 487 001a 0649     		ldr	r1, .L42+4
 488 001c 3422     		movs	r2, #52
 489 001e 02FB0312 		mla	r2, r2, r3, r1
 490 0022 0549     		ldr	r1, .L42+8
 491 0024 1161     		str	r1, [r2, #16]	@ float
 131:Core/Src/fsm_tasks.c ****         {
 492              		.loc 1 131 0 discriminator 3
 493 0026 0133     		adds	r3, r3, #1
 494              	.LVL49:
 495 0028 DBB2     		uxtb	r3, r3
 496              	.LVL50:
 497              	.L39:
 131:Core/Src/fsm_tasks.c ****         {
 498              		.loc 1 131 0 is_stmt 0 discriminator 1
 499 002a 032B     		cmp	r3, #3
 500 002c F5D9     		bls	.L40
 501              	.LBE6:
 134:Core/Src/fsm_tasks.c ****         }
 135:Core/Src/fsm_tasks.c **** }
 502              		.loc 1 135 0 is_stmt 1
 503 002e 10BD     		pop	{r4, pc}
 504              	.L43:
 505              		.align	2
 506              	.L42:
 507 0030 00000000 		.word	balance_motor
 508 0034 00000000 		.word	motor_arr
 509 0038 0000C0C0 		.word	-1061158912
 510              		.cfi_endproc
 511              	.LFE131:
 513              		.section	.text.check_N_Stop,"ax",%progbits
 514              		.align	1
 515              		.global	check_N_Stop
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 519              		.fpu fpv4-sp-d16
 521              	check_N_Stop:
 522              	.LFB132:
 136:Core/Src/fsm_tasks.c **** 
 137:Core/Src/fsm_tasks.c **** void check_N_Stop(void)
 138:Core/Src/fsm_tasks.c **** {
 523              		.loc 1 138 0
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 13


 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527 0000 08B5     		push	{r3, lr}
 528              	.LCFI5:
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 3, -8
 531              		.cfi_offset 14, -4
 532              	.LVL51:
 533              	.LBB7:
 139:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 534              		.loc 1 139 0
 535 0002 0023     		movs	r3, #0
 536 0004 01E0     		b	.L45
 537              	.LVL52:
 538              	.L46:
 539              		.loc 1 139 0 is_stmt 0 discriminator 2
 540 0006 0133     		adds	r3, r3, #1
 541              	.LVL53:
 542 0008 DBB2     		uxtb	r3, r3
 543              	.LVL54:
 544              	.L45:
 545              		.loc 1 139 0 discriminator 1
 546 000a 032B     		cmp	r3, #3
 547 000c 13D8     		bhi	.L50
 140:Core/Src/fsm_tasks.c ****         {
 141:Core/Src/fsm_tasks.c ****                 if (int_arr[i].fhome_pos)
 548              		.loc 1 141 0 is_stmt 1
 549 000e 03EB4302 		add	r2, r3, r3, lsl #1
 550 0012 9100     		lsls	r1, r2, #2
 551 0014 0D4A     		ldr	r2, .L52
 552 0016 0A44     		add	r2, r2, r1
 553 0018 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 554 001a 002A     		cmp	r2, #0
 555 001c F3D0     		beq	.L46
 142:Core/Src/fsm_tasks.c ****                 {
 143:Core/Src/fsm_tasks.c ****                         motor_arr[i].update_omega = 0;
 556              		.loc 1 143 0
 557 001e 0C49     		ldr	r1, .L52+4
 558 0020 3422     		movs	r2, #52
 559 0022 02FB0312 		mla	r2, r2, r3, r1
 560 0026 0021     		movs	r1, #0
 561 0028 1161     		str	r1, [r2, #16]	@ float
 144:Core/Src/fsm_tasks.c ****                         // resetAngle(&motor_arr[i]);
 145:Core/Src/fsm_tasks.c ****                         motor_arr[i].encoder->htim->Instance->CNT = 0;
 562              		.loc 1 145 0
 563 002a 126B     		ldr	r2, [r2, #48]
 564 002c 9268     		ldr	r2, [r2, #8]
 565 002e 1268     		ldr	r2, [r2]
 566 0030 0021     		movs	r1, #0
 567 0032 5162     		str	r1, [r2, #36]
 568 0034 E7E7     		b	.L46
 569              	.L50:
 570              	.LBE7:
 146:Core/Src/fsm_tasks.c ****                         
 147:Core/Src/fsm_tasks.c ****                 }
 148:Core/Src/fsm_tasks.c ****         }
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 14


 149:Core/Src/fsm_tasks.c ****          if (blnc_int_arr[2].fhome_pos == 1)
 571              		.loc 1 149 0
 572 0036 074B     		ldr	r3, .L52+8
 573              	.LVL55:
 574 0038 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 575 003a 012B     		cmp	r3, #1
 576 003c 00D0     		beq	.L51
 577              	.L44:
 150:Core/Src/fsm_tasks.c ****          {
 151:Core/Src/fsm_tasks.c ****                  setDutyCycle(&balance_motor, 0);
 152:Core/Src/fsm_tasks.c ****          }
 153:Core/Src/fsm_tasks.c **** }
 578              		.loc 1 153 0
 579 003e 08BD     		pop	{r3, pc}
 580              	.L51:
 151:Core/Src/fsm_tasks.c ****          }
 581              		.loc 1 151 0
 582 0040 0021     		movs	r1, #0
 583 0042 0548     		ldr	r0, .L52+12
 584 0044 FFF7FEFF 		bl	setDutyCycle
 585              	.LVL56:
 586              		.loc 1 153 0
 587 0048 F9E7     		b	.L44
 588              	.L53:
 589 004a 00BF     		.align	2
 590              	.L52:
 591 004c 00000000 		.word	int_arr
 592 0050 00000000 		.word	motor_arr
 593 0054 00000000 		.word	blnc_int_arr
 594 0058 00000000 		.word	balance_motor
 595              		.cfi_endproc
 596              	.LFE132:
 598              		.section	.text.homePositionChores,"ax",%progbits
 599              		.align	1
 600              		.global	homePositionChores
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu fpv4-sp-d16
 606              	homePositionChores:
 607              	.LFB126:
   6:Core/Src/fsm_tasks.c ****         setHomePosition();
 608              		.loc 1 6 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              	.LVL57:
 613 0000 08B5     		push	{r3, lr}
 614              	.LCFI6:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 3, -8
 617              		.cfi_offset 14, -4
   7:Core/Src/fsm_tasks.c ****         check_N_Stop();
 618              		.loc 1 7 0
 619 0002 FFF7FEFF 		bl	setHomePosition
 620              	.LVL58:
   8:Core/Src/fsm_tasks.c **** }
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 15


 621              		.loc 1 8 0
 622 0006 FFF7FEFF 		bl	check_N_Stop
 623              	.LVL59:
   9:Core/Src/fsm_tasks.c **** 
 624              		.loc 1 9 0
 625 000a 08BD     		pop	{r3, pc}
 626              		.cfi_endproc
 627              	.LFE126:
 629              		.section	.text.updateOmegas,"ax",%progbits
 630              		.align	1
 631              		.global	updateOmegas
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu fpv4-sp-d16
 637              	updateOmegas:
 638              	.LFB133:
 154:Core/Src/fsm_tasks.c **** 
 155:Core/Src/fsm_tasks.c **** void updateOmegas(void)
 156:Core/Src/fsm_tasks.c **** {
 639              		.loc 1 156 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643 0000 10B5     		push	{r4, lr}
 644              	.LCFI7:
 645              		.cfi_def_cfa_offset 8
 646              		.cfi_offset 4, -8
 647              		.cfi_offset 14, -4
 648              	.LVL60:
 649              	.LBB8:
 157:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 650              		.loc 1 157 0
 651 0002 0024     		movs	r4, #0
 652 0004 09E0     		b	.L57
 653              	.LVL61:
 654              	.L58:
 158:Core/Src/fsm_tasks.c ****         {
 159:Core/Src/fsm_tasks.c ****                 setOmega(&motor_arr[i], motor_arr[i].update_omega);
 655              		.loc 1 159 0 discriminator 3
 656 0006 064B     		ldr	r3, .L60
 657 0008 3420     		movs	r0, #52
 658 000a 00FB0430 		mla	r0, r0, r4, r3
 659 000e 90ED040A 		vldr.32	s0, [r0, #16]
 660 0012 FFF7FEFF 		bl	setOmega
 661              	.LVL62:
 157:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 662              		.loc 1 157 0 discriminator 3
 663 0016 0134     		adds	r4, r4, #1
 664              	.LVL63:
 665 0018 E4B2     		uxtb	r4, r4
 666              	.LVL64:
 667              	.L57:
 157:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 668              		.loc 1 157 0 is_stmt 0 discriminator 1
 669 001a 032C     		cmp	r4, #3
 670 001c F3D9     		bls	.L58
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 16


 671              	.LBE8:
 160:Core/Src/fsm_tasks.c ****         }
 161:Core/Src/fsm_tasks.c **** }
 672              		.loc 1 161 0 is_stmt 1
 673 001e 10BD     		pop	{r4, pc}
 674              	.LVL65:
 675              	.L61:
 676              		.align	2
 677              	.L60:
 678 0020 00000000 		.word	motor_arr
 679              		.cfi_endproc
 680              	.LFE133:
 682              		.section	.text.resetAngles,"ax",%progbits
 683              		.align	1
 684              		.global	resetAngles
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu fpv4-sp-d16
 690              	resetAngles:
 691              	.LFB134:
 162:Core/Src/fsm_tasks.c **** 
 163:Core/Src/fsm_tasks.c **** void resetAngles(void)
 164:Core/Src/fsm_tasks.c **** {
 692              		.loc 1 164 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696 0000 10B5     		push	{r4, lr}
 697              	.LCFI8:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 4, -8
 700              		.cfi_offset 14, -4
 701              	.LVL66:
 702              	.LBB9:
 165:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 703              		.loc 1 165 0
 704 0002 0024     		movs	r4, #0
 705 0004 07E0     		b	.L63
 706              	.LVL67:
 707              	.L64:
 166:Core/Src/fsm_tasks.c ****         {
 167:Core/Src/fsm_tasks.c ****                 resetAngle(&motor_arr[i]);
 708              		.loc 1 167 0 discriminator 3
 709 0006 3420     		movs	r0, #52
 710 0008 044B     		ldr	r3, .L66
 711 000a 00FB0430 		mla	r0, r0, r4, r3
 712 000e FFF7FEFF 		bl	resetAngle
 713              	.LVL68:
 165:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 714              		.loc 1 165 0 discriminator 3
 715 0012 0134     		adds	r4, r4, #1
 716              	.LVL69:
 717 0014 E4B2     		uxtb	r4, r4
 718              	.LVL70:
 719              	.L63:
 165:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 17


 720              		.loc 1 165 0 is_stmt 0 discriminator 1
 721 0016 032C     		cmp	r4, #3
 722 0018 F5D9     		bls	.L64
 723              	.LBE9:
 168:Core/Src/fsm_tasks.c ****         }
 169:Core/Src/fsm_tasks.c **** }
 724              		.loc 1 169 0 is_stmt 1
 725 001a 10BD     		pop	{r4, pc}
 726              	.LVL71:
 727              	.L67:
 728              		.align	2
 729              	.L66:
 730 001c 00000000 		.word	motor_arr
 731              		.cfi_endproc
 732              	.LFE134:
 734              		.section	.text.resetPID,"ax",%progbits
 735              		.align	1
 736              		.global	resetPID
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu fpv4-sp-d16
 742              	resetPID:
 743              	.LFB135:
 170:Core/Src/fsm_tasks.c **** 
 171:Core/Src/fsm_tasks.c **** void resetPID(void)
 172:Core/Src/fsm_tasks.c **** {
 744              		.loc 1 172 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748 0000 10B5     		push	{r4, lr}
 749              	.LCFI9:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 4, -8
 752              		.cfi_offset 14, -4
 753              	.LVL72:
 754              	.LBB10:
 173:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 755              		.loc 1 173 0
 756 0002 0024     		movs	r4, #0
 757 0004 08E0     		b	.L69
 758              	.LVL73:
 759              	.L70:
 174:Core/Src/fsm_tasks.c ****         {
 175:Core/Src/fsm_tasks.c ****                 PID_resetParams(&pid_arr[i]);
 760              		.loc 1 175 0 discriminator 3
 761 0006 C4EBC402 		rsb	r2, r4, r4, lsl #3
 762 000a D300     		lsls	r3, r2, #3
 763 000c 0448     		ldr	r0, .L72
 764 000e 1844     		add	r0, r0, r3
 765 0010 FFF7FEFF 		bl	PID_resetParams
 766              	.LVL74:
 173:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 767              		.loc 1 173 0 discriminator 3
 768 0014 0134     		adds	r4, r4, #1
 769              	.LVL75:
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 18


 770 0016 E4B2     		uxtb	r4, r4
 771              	.LVL76:
 772              	.L69:
 173:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 773              		.loc 1 173 0 is_stmt 0 discriminator 1
 774 0018 032C     		cmp	r4, #3
 775 001a F4D9     		bls	.L70
 776              	.LBE10:
 176:Core/Src/fsm_tasks.c ****         }
 177:Core/Src/fsm_tasks.c **** }
 777              		.loc 1 177 0 is_stmt 1
 778 001c 10BD     		pop	{r4, pc}
 779              	.LVL77:
 780              	.L73:
 781 001e 00BF     		.align	2
 782              	.L72:
 783 0020 00000000 		.word	pid_arr
 784              		.cfi_endproc
 785              	.LFE135:
 787              		.section	.text.omegaReset,"ax",%progbits
 788              		.align	1
 789              		.global	omegaReset
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 793              		.fpu fpv4-sp-d16
 795              	omegaReset:
 796              	.LFB137:
 178:Core/Src/fsm_tasks.c **** 
 179:Core/Src/fsm_tasks.c **** void stateReset(struct fsmStr *fsm, const enum FSM_States *state)
 180:Core/Src/fsm_tasks.c **** {
 181:Core/Src/fsm_tasks.c ****         resetPID();
 182:Core/Src/fsm_tasks.c ****         resetAngles();
 183:Core/Src/fsm_tasks.c ****         omegaReset();
 184:Core/Src/fsm_tasks.c ****         resetIntState(fsm, state);
 185:Core/Src/fsm_tasks.c ****         feedForwardRestart();
 186:Core/Src/fsm_tasks.c **** }
 187:Core/Src/fsm_tasks.c **** 
 188:Core/Src/fsm_tasks.c **** void omegaReset(void)
 189:Core/Src/fsm_tasks.c **** {
 797              		.loc 1 189 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 802              	.LVL78:
 803              	.LBB11:
 190:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 804              		.loc 1 190 0
 805 0000 0023     		movs	r3, #0
 806 0002 07E0     		b	.L75
 807              	.LVL79:
 808              	.L76:
 191:Core/Src/fsm_tasks.c ****         {
 192:Core/Src/fsm_tasks.c ****                 motor_arr[i].update_omega = 0;
 809              		.loc 1 192 0 discriminator 3
 810 0004 0549     		ldr	r1, .L77
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 19


 811 0006 3422     		movs	r2, #52
 812 0008 02FB0312 		mla	r2, r2, r3, r1
 813 000c 0021     		movs	r1, #0
 814 000e 1161     		str	r1, [r2, #16]	@ float
 190:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 815              		.loc 1 190 0 discriminator 3
 816 0010 0133     		adds	r3, r3, #1
 817              	.LVL80:
 818 0012 DBB2     		uxtb	r3, r3
 819              	.LVL81:
 820              	.L75:
 190:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 821              		.loc 1 190 0 is_stmt 0 discriminator 1
 822 0014 032B     		cmp	r3, #3
 823 0016 F5D9     		bls	.L76
 824              	.LBE11:
 193:Core/Src/fsm_tasks.c ****         }
 194:Core/Src/fsm_tasks.c **** }
 825              		.loc 1 194 0 is_stmt 1
 826 0018 7047     		bx	lr
 827              	.L78:
 828 001a 00BF     		.align	2
 829              	.L77:
 830 001c 00000000 		.word	motor_arr
 831              		.cfi_endproc
 832              	.LFE137:
 834              		.section	.text.feedForwardRestart,"ax",%progbits
 835              		.align	1
 836              		.global	feedForwardRestart
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	feedForwardRestart:
 843              	.LFB138:
 195:Core/Src/fsm_tasks.c **** 
 196:Core/Src/fsm_tasks.c **** void feedForwardRestart(void)
 197:Core/Src/fsm_tasks.c **** {
 844              		.loc 1 197 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848 0000 10B5     		push	{r4, lr}
 849              	.LCFI10:
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 4, -8
 852              		.cfi_offset 14, -4
 853              	.LVL82:
 854              	.LBB12:
 198:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 855              		.loc 1 198 0
 856 0002 0024     		movs	r4, #0
 857 0004 08E0     		b	.L80
 858              	.LVL83:
 859              	.L81:
 199:Core/Src/fsm_tasks.c ****         {
 200:Core/Src/fsm_tasks.c ****                 ffRestart(&ff_arr[i]);
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 20


 860              		.loc 1 200 0 discriminator 3
 861 0006 C4EB0412 		rsb	r2, r4, r4, lsl #4
 862 000a 9300     		lsls	r3, r2, #2
 863 000c 0448     		ldr	r0, .L83
 864 000e 1844     		add	r0, r0, r3
 865 0010 FFF7FEFF 		bl	ffRestart
 866              	.LVL84:
 198:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 867              		.loc 1 198 0 discriminator 3
 868 0014 0134     		adds	r4, r4, #1
 869              	.LVL85:
 870 0016 E4B2     		uxtb	r4, r4
 871              	.LVL86:
 872              	.L80:
 198:Core/Src/fsm_tasks.c ****         for (uint8_t i = 0; i < 4; i++)
 873              		.loc 1 198 0 is_stmt 0 discriminator 1
 874 0018 032C     		cmp	r4, #3
 875 001a F4D9     		bls	.L81
 876              	.LBE12:
 201:Core/Src/fsm_tasks.c ****         }
 202:Core/Src/fsm_tasks.c **** }
 877              		.loc 1 202 0 is_stmt 1
 878 001c 10BD     		pop	{r4, pc}
 879              	.LVL87:
 880              	.L84:
 881 001e 00BF     		.align	2
 882              	.L83:
 883 0020 00000000 		.word	ff_arr
 884              		.cfi_endproc
 885              	.LFE138:
 887              		.section	.text.resetIntState,"ax",%progbits
 888              		.align	1
 889              		.global	resetIntState
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu fpv4-sp-d16
 895              	resetIntState:
 896              	.LFB139:
 203:Core/Src/fsm_tasks.c **** 
 204:Core/Src/fsm_tasks.c **** void resetIntState(struct fsmStr *fsm,const enum FSM_States *state)
 205:Core/Src/fsm_tasks.c **** {
 897              		.loc 1 205 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              		@ link register save eliminated.
 902              	.LVL88:
 206:Core/Src/fsm_tasks.c ****         switch(*state)
 903              		.loc 1 206 0
 904 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 905 0002 013B     		subs	r3, r3, #1
 906 0004 032B     		cmp	r3, #3
 907 0006 3FD8     		bhi	.L85
 908 0008 DFE803F0 		tbb	[pc, r3]
 909              	.L88:
 910 000c 02       		.byte	(.L87-.L88)/2
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 21


 911 000d 13       		.byte	(.L89-.L88)/2
 912 000e 24       		.byte	(.L90-.L88)/2
 913 000f 35       		.byte	(.L91-.L88)/2
 914              		.p2align 1
 915              	.L87:
 207:Core/Src/fsm_tasks.c ****         {
 208:Core/Src/fsm_tasks.c ****                 case HOME_POSITION:
 209:Core/Src/fsm_tasks.c ****                         break;
 210:Core/Src/fsm_tasks.c **** 
 211:Core/Src/fsm_tasks.c **** 
 212:Core/Src/fsm_tasks.c ****                 case PHASE_1:
 213:Core/Src/fsm_tasks.c ****                         int_arr[0].intState = STATE_B;
 916              		.loc 1 213 0
 917 0010 1E4A     		ldr	r2, .L92
 918 0012 0121     		movs	r1, #1
 919              	.LVL89:
 920 0014 9172     		strb	r1, [r2, #10]
 214:Core/Src/fsm_tasks.c ****                         int_arr[1].intState = STATE_A;
 921              		.loc 1 214 0
 922 0016 0023     		movs	r3, #0
 923 0018 9375     		strb	r3, [r2, #22]
 215:Core/Src/fsm_tasks.c ****                         int_arr[2].intState = STATE_A;
 924              		.loc 1 215 0
 925 001a 82F82230 		strb	r3, [r2, #34]
 216:Core/Src/fsm_tasks.c ****                         int_arr[3].intState = STATE_A;
 926              		.loc 1 216 0
 927 001e 82F82E30 		strb	r3, [r2, #46]
 217:Core/Src/fsm_tasks.c ****                         blnc_int_arr[0].intState = STATE_A;
 928              		.loc 1 217 0
 929 0022 1B4A     		ldr	r2, .L92+4
 930 0024 9372     		strb	r3, [r2, #10]
 218:Core/Src/fsm_tasks.c ****                         blnc_int_arr[1].intState = STATE_B;
 931              		.loc 1 218 0
 932 0026 9175     		strb	r1, [r2, #22]
 219:Core/Src/fsm_tasks.c ****                         blnc_int_arr[2].intState = STATE_A;
 933              		.loc 1 219 0
 934 0028 82F82230 		strb	r3, [r2, #34]
 220:Core/Src/fsm_tasks.c ****                         blnc_int_arr[3].intState = STATE_A;
 935              		.loc 1 220 0
 936 002c 82F82E30 		strb	r3, [r2, #46]
 221:Core/Src/fsm_tasks.c **** 
 222:Core/Src/fsm_tasks.c ****                         break;
 937              		.loc 1 222 0
 938 0030 7047     		bx	lr
 939              	.LVL90:
 940              	.L89:
 223:Core/Src/fsm_tasks.c **** 
 224:Core/Src/fsm_tasks.c ****                 case PHASE_2:
 225:Core/Src/fsm_tasks.c ****                         int_arr[0].intState = STATE_A;
 941              		.loc 1 225 0
 942 0032 164A     		ldr	r2, .L92
 943 0034 0023     		movs	r3, #0
 944 0036 9372     		strb	r3, [r2, #10]
 226:Core/Src/fsm_tasks.c ****                         int_arr[1].intState = STATE_B;
 945              		.loc 1 226 0
 946 0038 0121     		movs	r1, #1
 947              	.LVL91:
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 22


 948 003a 9175     		strb	r1, [r2, #22]
 227:Core/Src/fsm_tasks.c ****                         int_arr[2].intState = STATE_A;
 949              		.loc 1 227 0
 950 003c 82F82230 		strb	r3, [r2, #34]
 228:Core/Src/fsm_tasks.c ****                         int_arr[3].intState = STATE_A;
 951              		.loc 1 228 0
 952 0040 82F82E30 		strb	r3, [r2, #46]
 229:Core/Src/fsm_tasks.c ****                         blnc_int_arr[0].intState = STATE_A;
 953              		.loc 1 229 0
 954 0044 124A     		ldr	r2, .L92+4
 955 0046 9372     		strb	r3, [r2, #10]
 230:Core/Src/fsm_tasks.c ****                         blnc_int_arr[1].intState = STATE_A;
 956              		.loc 1 230 0
 957 0048 9375     		strb	r3, [r2, #22]
 231:Core/Src/fsm_tasks.c ****                         blnc_int_arr[2].intState = STATE_B;
 958              		.loc 1 231 0
 959 004a 82F82210 		strb	r1, [r2, #34]
 232:Core/Src/fsm_tasks.c ****                         blnc_int_arr[3].intState = STATE_A;
 960              		.loc 1 232 0
 961 004e 82F82E30 		strb	r3, [r2, #46]
 233:Core/Src/fsm_tasks.c **** 
 234:Core/Src/fsm_tasks.c ****                         break;
 962              		.loc 1 234 0
 963 0052 7047     		bx	lr
 964              	.LVL92:
 965              	.L90:
 235:Core/Src/fsm_tasks.c **** 
 236:Core/Src/fsm_tasks.c ****                 case PHASE_3:
 237:Core/Src/fsm_tasks.c ****                         int_arr[0].intState = STATE_A;
 966              		.loc 1 237 0
 967 0054 0D4A     		ldr	r2, .L92
 968 0056 0023     		movs	r3, #0
 969 0058 9372     		strb	r3, [r2, #10]
 238:Core/Src/fsm_tasks.c ****                         int_arr[1].intState = STATE_A;
 970              		.loc 1 238 0
 971 005a 9375     		strb	r3, [r2, #22]
 239:Core/Src/fsm_tasks.c ****                         int_arr[2].intState = STATE_B;
 972              		.loc 1 239 0
 973 005c 0121     		movs	r1, #1
 974              	.LVL93:
 975 005e 82F82210 		strb	r1, [r2, #34]
 240:Core/Src/fsm_tasks.c ****                         int_arr[3].intState = STATE_A;
 976              		.loc 1 240 0
 977 0062 82F82E30 		strb	r3, [r2, #46]
 241:Core/Src/fsm_tasks.c ****                         blnc_int_arr[0].intState = STATE_B;
 978              		.loc 1 241 0
 979 0066 0A4A     		ldr	r2, .L92+4
 980 0068 9172     		strb	r1, [r2, #10]
 242:Core/Src/fsm_tasks.c ****                         blnc_int_arr[1].intState = STATE_A;
 981              		.loc 1 242 0
 982 006a 9375     		strb	r3, [r2, #22]
 243:Core/Src/fsm_tasks.c ****                         blnc_int_arr[2].intState = STATE_A;
 983              		.loc 1 243 0
 984 006c 82F82230 		strb	r3, [r2, #34]
 244:Core/Src/fsm_tasks.c ****                         blnc_int_arr[3].intState = STATE_A;
 985              		.loc 1 244 0
 986 0070 82F82E30 		strb	r3, [r2, #46]
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 23


 245:Core/Src/fsm_tasks.c ****                         break;
 987              		.loc 1 245 0
 988 0074 7047     		bx	lr
 989              	.LVL94:
 990              	.L91:
 246:Core/Src/fsm_tasks.c **** 
 247:Core/Src/fsm_tasks.c ****                 case PHASE_4:
 248:Core/Src/fsm_tasks.c ****                         int_arr[0].intState = STATE_A;
 991              		.loc 1 248 0
 992 0076 054B     		ldr	r3, .L92
 993 0078 0022     		movs	r2, #0
 994 007a 9A72     		strb	r2, [r3, #10]
 249:Core/Src/fsm_tasks.c ****                         int_arr[1].intState = STATE_B;
 995              		.loc 1 249 0
 996 007c 0121     		movs	r1, #1
 997              	.LVL95:
 998 007e 9975     		strb	r1, [r3, #22]
 250:Core/Src/fsm_tasks.c ****                         int_arr[2].intState = STATE_A;
 999              		.loc 1 250 0
 1000 0080 83F82220 		strb	r2, [r3, #34]
 251:Core/Src/fsm_tasks.c ****                         int_arr[3].intState = STATE_A;
 1001              		.loc 1 251 0
 1002 0084 83F82E20 		strb	r2, [r3, #46]
 1003              	.L85:
 252:Core/Src/fsm_tasks.c ****                         break;
 253:Core/Src/fsm_tasks.c ****         }
 254:Core/Src/fsm_tasks.c **** }
 1004              		.loc 1 254 0
 1005 0088 7047     		bx	lr
 1006              	.L93:
 1007 008a 00BF     		.align	2
 1008              	.L92:
 1009 008c 00000000 		.word	int_arr
 1010 0090 00000000 		.word	blnc_int_arr
 1011              		.cfi_endproc
 1012              	.LFE139:
 1014              		.section	.text.stateReset,"ax",%progbits
 1015              		.align	1
 1016              		.global	stateReset
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	stateReset:
 1023              	.LFB136:
 180:Core/Src/fsm_tasks.c ****         resetPID();
 1024              		.loc 1 180 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              	.LVL96:
 1029 0000 38B5     		push	{r3, r4, r5, lr}
 1030              	.LCFI11:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 3, -16
 1033              		.cfi_offset 4, -12
 1034              		.cfi_offset 5, -8
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 24


 1035              		.cfi_offset 14, -4
 1036 0002 0446     		mov	r4, r0
 1037 0004 0D46     		mov	r5, r1
 181:Core/Src/fsm_tasks.c ****         resetAngles();
 1038              		.loc 1 181 0
 1039 0006 FFF7FEFF 		bl	resetPID
 1040              	.LVL97:
 182:Core/Src/fsm_tasks.c ****         omegaReset();
 1041              		.loc 1 182 0
 1042 000a FFF7FEFF 		bl	resetAngles
 1043              	.LVL98:
 183:Core/Src/fsm_tasks.c ****         resetIntState(fsm, state);
 1044              		.loc 1 183 0
 1045 000e FFF7FEFF 		bl	omegaReset
 1046              	.LVL99:
 184:Core/Src/fsm_tasks.c ****         feedForwardRestart();
 1047              		.loc 1 184 0
 1048 0012 2946     		mov	r1, r5
 1049 0014 2046     		mov	r0, r4
 1050 0016 FFF7FEFF 		bl	resetIntState
 1051              	.LVL100:
 185:Core/Src/fsm_tasks.c **** }
 1052              		.loc 1 185 0
 1053 001a FFF7FEFF 		bl	feedForwardRestart
 1054              	.LVL101:
 186:Core/Src/fsm_tasks.c **** 
 1055              		.loc 1 186 0
 1056 001e 38BD     		pop	{r3, r4, r5, pc}
 1057              		.cfi_endproc
 1058              	.LFE136:
 1060              		.section	.data.gIs_First,"aw",%progbits
 1061              		.set	.LANCHOR0,. + 0
 1064              	gIs_First:
 1065 0000 01       		.byte	1
 1066              		.text
 1067              	.Letext0:
 1068              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1069              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1070              		.file 4 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Include/core_cm4.h"
 1071              		.file 5 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Device/ST/STM32F4xx/Inclu
 1072              		.file 6 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/CMSIS/Device/ST/STM32F4xx/Inclu
 1073              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1074              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 1075              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 1076              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 1077              		.file 11 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 1078              		.file 12 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 1079              		.file 13 "C:/Users/Rishav/Documents/STM32Cube_FW_F4_V1.21.0/Drivers/STM32F4xx_HAL_Driver/Inc/stm32
 1080              		.file 14 "Core/Inc/feed_forward.h"
 1081              		.file 15 "Core/Inc\\periphs/tim.h"
 1082              		.file 16 "Core/Inc/pneumatic.h"
 1083              		.file 17 "Core/Inc/interrupt.h"
 1084              		.file 18 "Core/Inc/encoder.h"
 1085              		.file 19 "Core/Inc/motor.h"
 1086              		.file 20 "Core/Inc/pid.h"
 1087              		.file 21 "Core/Inc/fsm.h"
 1088              		.file 22 "Core/Inc/robo_init.h"
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 25


ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 fsm_tasks.c
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:18     .text.phaseOneChores:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:25     .text.phaseOneChores:00000000 phaseOneChores
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:133    .text.phaseOneChores:00000094 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:144    .text.phaseTwoChores:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:151    .text.phaseTwoChores:00000000 phaseTwoChores
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:241    .text.phaseTwoChores:00000078 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:251    .text.phaseThreeChores:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:258    .text.phaseThreeChores:00000000 phaseThreeChores
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:342    .text.phaseThreeChores:0000006c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:351    .text.phaseFourChores:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:358    .text.phaseFourChores:00000000 phaseFourChores
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:442    .text.phaseFourChores:0000006c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:451    .text.setHomePosition:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:458    .text.setHomePosition:00000000 setHomePosition
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:507    .text.setHomePosition:00000030 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:514    .text.check_N_Stop:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:521    .text.check_N_Stop:00000000 check_N_Stop
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:591    .text.check_N_Stop:0000004c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:599    .text.homePositionChores:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:606    .text.homePositionChores:00000000 homePositionChores
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:630    .text.updateOmegas:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:637    .text.updateOmegas:00000000 updateOmegas
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:678    .text.updateOmegas:00000020 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:683    .text.resetAngles:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:690    .text.resetAngles:00000000 resetAngles
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:730    .text.resetAngles:0000001c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:735    .text.resetPID:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:742    .text.resetPID:00000000 resetPID
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:783    .text.resetPID:00000020 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:788    .text.omegaReset:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:795    .text.omegaReset:00000000 omegaReset
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:830    .text.omegaReset:0000001c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:835    .text.feedForwardRestart:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:842    .text.feedForwardRestart:00000000 feedForwardRestart
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:883    .text.feedForwardRestart:00000020 $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:888    .text.resetIntState:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:895    .text.resetIntState:00000000 resetIntState
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:910    .text.resetIntState:0000000c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:914    .text.resetIntState:00000010 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:1009   .text.resetIntState:0000008c $d
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:1015   .text.stateReset:00000000 $t
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:1022   .text.stateReset:00000000 stateReset
C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s:1064   .data.gIs_First:00000000 gIs_First

UNDEFINED SYMBOLS
ffSetAngle
getAngle
getOmega
ffGenerate
PID_Compute
motor_arr
int_arr
ff_arr
pid_arr
setDutyCycle
ARM GAS  C:\Users\Rishav\AppData\Local\Temp\ccMtspX7.s 			page 27


balance_motor
setDirection
blnc_int_arr
setOmega
resetAngle
PID_resetParams
ffRestart
