.TH "steering" 3 "Sun May 12 2019" "ROBOCON_2019_HORSE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
steering \- Provide control over steering of the horse\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <steering\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsteering\fP ()"
.br
.RI "These lines of codes are just for protection of random defination of the objects\&. "
.ti -1c
.RI "\fBsteering\fP (\fBsteering\fP &&)=default"
.br
.ti -1c
.RI "\fBsteering\fP (const \fBsteering\fP &)=default"
.br
.ti -1c
.RI "\fBsteering\fP & \fBoperator=\fP (\fBsteering\fP &&)=default"
.br
.ti -1c
.RI "\fBsteering\fP & \fBoperator=\fP (const \fBsteering\fP &)=default"
.br
.ti -1c
.RI "\fB~steering\fP ()"
.br
.ti -1c
.RI "void \fBset_config\fP (\fBmotor_config\fP *\fBmotor\fP, \fBencoder_config\fP *\fBencoder\fP)"
.br
.RI "This function setups the configurations for the steering\&. "
.ti -1c
.RI "void \fBset_PID_constants\fP (float kp, float ki, float kd, float lower_limit, float upper_limit)"
.br
.RI "Sets constants for \fBPID\fP algorithm\&. "
.ti -1c
.RI "void \fBset_omega\fP (float omega)"
.br
.RI "sets omega for the steering "
.ti -1c
.RI "void \fBreset_angle\fP (float angle_in_radians)"
.br
.RI "resets the angle provided by the encoder "
.ti -1c
.RI "void \fBcalculate_omega\fP ()"
.br
.RI "calculates omega of the steering motor "
.ti -1c
.RI "float \fBget_omega\fP (void)"
.br
.RI "returns the current omega calculated by the encoder "
.ti -1c
.RI "float \fBget_angle\fP (void)"
.br
.RI "returns the current angle calculated by the encoder "
.ti -1c
.RI "int16_t \fBget_encoder_count\fP (void)"
.br
.RI "returns the current count calculated by the encoder "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBlimit_switch\fP \fBlimit_switch__\fP [1]"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBmotor\fP \fBmotor__\fP"
.br
.ti -1c
.RI "\fBencoder\fP \fBencoder__\fP"
.br
.ti -1c
.RI "\fBDiscrete_PID\fP \fBdpid_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Provide control over steering of the horse\&. 

\fBsteering\&.h\fP
.PP
This file is meant as an wrapper to the elements in the encoder\&. It uses the functions of other headers (ie \fBmotor\&.h\fP, \fBencoder\&.h\fP, \fBlimit_switch\&.h\fP and \fBpid\&.h\fP tocontrol all the functions available in the steering\&.
.PP
\fBAuthor:\fP
.RS 4
$Author : Prashant_Bhatta 
.RE
.PP
\fBDate:\fP
.RS 4
$Date : 2005/04/14 14:16:20 $ \\contact $Contact : 073bex425.prashant@pcampus.edu.np 
.RE
.PP

.PP
Definition at line 24 of file steering\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "steering::steering ()\fC [inline]\fP"

.PP
These lines of codes are just for protection of random defination of the objects\&. 
.PP
Definition at line 28 of file steering\&.h\&.
.SS "steering::steering (\fBsteering\fP &&)\fC [default]\fP"

.SS "steering::steering (const \fBsteering\fP &)\fC [default]\fP"

.SS "steering::~steering ()\fC [inline]\fP"

.PP
Definition at line 33 of file steering\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void steering::calculate_omega (void)\fC [inline]\fP"

.PP
calculates omega of the steering motor 
.PP
\fBRemarks:\fP
.RS 4
Dont forget to call this fynctior every 10 ms 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvoid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 78 of file steering\&.h\&.
.SS "float steering::get_angle (void)\fC [inline]\fP"

.PP
returns the current angle calculated by the encoder 
.PP
Definition at line 88 of file steering\&.h\&.
.SS "int16_t steering::get_encoder_count (void)\fC [inline]\fP"

.PP
returns the current count calculated by the encoder 
.PP
Definition at line 93 of file steering\&.h\&.
.SS "float steering::get_omega (void)\fC [inline]\fP"

.PP
returns the current omega calculated by the encoder 
.PP
Definition at line 83 of file steering\&.h\&.
.SS "\fBsteering\fP& steering::operator= (\fBsteering\fP &&)\fC [default]\fP"

.SS "\fBsteering\fP& steering::operator= (const \fBsteering\fP &)\fC [default]\fP"

.SS "void steering::reset_angle (float angle_in_radians)\fC [inline]\fP"

.PP
resets the angle provided by the encoder 
.PP
\fBParameters:\fP
.RS 4
\fIangle_in_radian\fP at which it is to be reset 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 70 of file steering\&.h\&.
.SS "void steering::set_config (\fBmotor_config\fP * motor, \fBencoder_config\fP * encoder)\fC [inline]\fP"

.PP
This function setups the configurations for the steering\&. 
.PP
\fBParameters:\fP
.RS 4
\fImotor\fP pointer to \fBmotor_config\fP which contains all the configurations for a motor 
.br
\fIencoder\fP pointer to \fBencoder_config\fP which contains all the configurations for a motor
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 43 of file steering\&.h\&.
.SS "void steering::set_omega (float omega)"

.PP
sets omega for the steering 
.PP
Definition at line 3 of file steering\&.cpp\&.
.SS "void steering::set_PID_constants (float kp, float ki, float kd, float lower_limit, float upper_limit)\fC [inline]\fP"

.PP
Sets constants for \fBPID\fP algorithm\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkp,ki,kd\fP constants for \fBPID\fP 
.br
\fIlower_limit,upper_limit\fP These are the maximum output a motor can give with gear reduction(in omegas) 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 55 of file steering\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBDiscrete_PID\fP steering::dpid_\fC [private]\fP"

.PP
Definition at line 100 of file steering\&.h\&.
.SS "\fBencoder\fP steering::encoder__\fC [private]\fP"

.PP
Definition at line 99 of file steering\&.h\&.
.SS "\fBlimit_switch\fP steering::limit_switch__[1]"

.PP
Definition at line 94 of file steering\&.h\&.
.SS "\fBmotor\fP steering::motor__\fC [private]\fP"

.PP
Definition at line 98 of file steering\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ROBOCON_2019_HORSE from the source code\&.
