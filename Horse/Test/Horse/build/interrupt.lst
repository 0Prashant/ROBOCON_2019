ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"interrupt.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_f2d
  18              		.global	__aeabi_ddiv
  19              		.global	__aeabi_d2iz
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_dmul
  22              		.global	__aeabi_dadd
  23              		.global	__aeabi_d2f
  24              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
  25              		.align	1
  26              		.global	HAL_GPIO_EXTI_Callback
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  30              		.fpu fpv4-sp-d16
  32              	HAL_GPIO_EXTI_Callback:
  33              	.LFB492:
  34              		.file 1 "Core/Src/devs/interrupt.cpp"
   1:Core/Src/devs/interrupt.cpp **** 
   2:Core/Src/devs/interrupt.cpp **** #include "robo_init.h"
   3:Core/Src/devs/interrupt.cpp **** 
   4:Core/Src/devs/interrupt.cpp **** extern leg leg[2];
   5:Core/Src/devs/interrupt.cpp **** extern steering steering;
   6:Core/Src/devs/interrupt.cpp **** 
   7:Core/Src/devs/interrupt.cpp **** extern bool ROBOT_START_FLAG;
   8:Core/Src/devs/interrupt.cpp **** extern bool STEERING_FLAG;
   9:Core/Src/devs/interrupt.cpp **** extern bool FRONT_PROXIMITY_FLAG;
  10:Core/Src/devs/interrupt.cpp **** extern bool BACK_PROXIMITY_FLAG;
  11:Core/Src/devs/interrupt.cpp **** 
  12:Core/Src/devs/interrupt.cpp **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  13:Core/Src/devs/interrupt.cpp **** {
  35              		.loc 1 13 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              	.LVL0:
  40 0000 70B5     		push	{r4, r5, r6, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 16
  43              		.cfi_offset 4, -16
  44              		.cfi_offset 5, -12
  45              		.cfi_offset 6, -8
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 2


  46              		.cfi_offset 14, -4
  47              	.LBB16:
  14:Core/Src/devs/interrupt.cpp ****         switch (GPIO_Pin) {
  48              		.loc 1 14 0
  49 0002 B0F5007F 		cmp	r0, #512
  50 0006 24D0     		beq	.L3
  51 0008 0AD9     		bls	.L11
  52 000a B0F5006F 		cmp	r0, #2048
  53 000e 5BD0     		beq	.L7
  54 0010 B0F5004F 		cmp	r0, #32768
  55 0014 00F09280 		beq	.L8
  56 0018 B0F5806F 		cmp	r0, #1024
  57 001c 11D1     		bne	.L1
  58 001e 0AE0     		b	.L9
  59              	.L11:
  60 0020 0128     		cmp	r0, #1
  61 0022 0FD0     		beq	.L5
  62 0024 B0F5807F 		cmp	r0, #256
  63 0028 0BD1     		bne	.L1
  64              	.LBB17:
  15:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_0 : {
  16:Core/Src/devs/interrupt.cpp **** 			ROBOT_START_FLAG = true;
  17:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\t !!start_pressed!!\n\n");
  18:Core/Src/devs/interrupt.cpp **** 		}break;
  19:Core/Src/devs/interrupt.cpp **** 
  20:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_9 : {
  21:Core/Src/devs/interrupt.cpp ****                         leg[0].steps++;
  22:Core/Src/devs/interrupt.cpp **** 			float leg0_reset_angle = 300*PI/180;
  23:Core/Src/devs/interrupt.cpp ****                         leg[0].reset_angle(leg0_reset_angle);
  24:Core/Src/devs/interrupt.cpp **** 			//leg[0].reset_actual_angle(((leg[0].get_steps()-1)*2*3.14159265)+leg0_reset_angle);
  25:Core/Src/devs/interrupt.cpp **** 			int temp = round(leg[0].get_actual_angle()/ (360*PI/180));
  26:Core/Src/devs/interrupt.cpp **** 			leg[0].reset_actual_angle((int)(temp-1)*2*PI + leg0_reset_angle);
  27:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt0\t %d \t %d\n", leg[0].steps, temp);
  28:Core/Src/devs/interrupt.cpp ****                 } break;
  29:Core/Src/devs/interrupt.cpp **** 
  30:Core/Src/devs/interrupt.cpp ****                 case GPIO_PIN_11: {
  31:Core/Src/devs/interrupt.cpp ****                         leg[1].steps++;
  32:Core/Src/devs/interrupt.cpp **** 			float leg1_reset_angle = 290*PI/180;
  33:Core/Src/devs/interrupt.cpp ****                         leg[1].reset_angle(leg1_reset_angle);
  34:Core/Src/devs/interrupt.cpp **** 			// leg[1].reset_actual_angle(((leg[1].get_steps()-1)*2*3.14159265)+leg1_reset_angle);
  35:Core/Src/devs/interrupt.cpp **** 			int temp = round(leg[1].get_actual_angle() / (360*PI/180));
  36:Core/Src/devs/interrupt.cpp **** 			leg[1].reset_actual_angle((int)(temp-1)*2*PI + leg1_reset_angle);
  37:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt1\t %d\n", leg[1].steps);
  38:Core/Src/devs/interrupt.cpp ****                 } break;
  39:Core/Src/devs/interrupt.cpp **** 
  40:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_15: {
  41:Core/Src/devs/interrupt.cpp **** 			STEERING_FLAG = true;
  42:Core/Src/devs/interrupt.cpp **** 			steering.reset_angle(0.7*PI/180);
  43:Core/Src/devs/interrupt.cpp **** 			 printf("\n\n\t\t\tsteering interrupt \t\n");
  44:Core/Src/devs/interrupt.cpp ****                 } break;
  45:Core/Src/devs/interrupt.cpp **** 
  46:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_8: {
  47:Core/Src/devs/interrupt.cpp **** 			FRONT_PROXIMITY_FLAG = true;
  65              		.loc 1 47 0
  66 002a 534B     		ldr	r3, .L12+32
  67 002c 0122     		movs	r2, #1
  68 002e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 3


  48:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tFRONT_PROXIMITY_FLAG interrupt \t\n");
  69              		.loc 1 48 0
  70 0030 5248     		ldr	r0, .L12+36
  71              	.LVL1:
  72 0032 FFF7FEFF 		bl	puts
  73              	.LVL2:
  74              	.L9:
  49:Core/Src/devs/interrupt.cpp **** 		}
  50:Core/Src/devs/interrupt.cpp **** 
  51:Core/Src/devs/interrupt.cpp **** 		case GPIO_PIN_10: {
  52:Core/Src/devs/interrupt.cpp **** 			BACK_PROXIMITY_FLAG = true;
  75              		.loc 1 52 0
  76 0036 524B     		ldr	r3, .L12+40
  77 0038 0122     		movs	r2, #1
  78 003a 1A70     		strb	r2, [r3]
  53:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tBACK_PROXIMITY_FLAG interrupt \t\n");
  79              		.loc 1 53 0
  80 003c 5148     		ldr	r0, .L12+44
  81 003e FFF7FEFF 		bl	puts
  82              	.LVL3:
  83              	.L1:
  84              	.LBE17:
  85              	.LBE16:
  54:Core/Src/devs/interrupt.cpp **** 		}
  55:Core/Src/devs/interrupt.cpp ****         }
  56:Core/Src/devs/interrupt.cpp **** }...
  86              		.loc 1 56 0
  87 0042 70BD     		pop	{r4, r5, r6, pc}
  88              	.LVL4:
  89              	.L5:
  90              	.LBB31:
  91              	.LBB30:
  16:Core/Src/devs/interrupt.cpp **** 			ROBOT_START_FLAG = true;
  92              		.loc 1 16 0
  93 0044 504B     		ldr	r3, .L12+48
  94 0046 0122     		movs	r2, #1
  95 0048 1A70     		strb	r2, [r3]
  17:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\t !!start_pressed!!\n\n");
  96              		.loc 1 17 0
  97 004a 5048     		ldr	r0, .L12+52
  98              	.LVL5:
  99 004c FFF7FEFF 		bl	puts
 100              	.LVL6:
  18:Core/Src/devs/interrupt.cpp **** 		}break;
 101              		.loc 1 18 0
 102 0050 F7E7     		b	.L1
 103              	.LVL7:
 104              	.L3:
 105              	.LBB18:
  21:Core/Src/devs/interrupt.cpp ****                         leg[0].steps++;
 106              		.loc 1 21 0
 107 0052 4F4C     		ldr	r4, .L12+56
 108 0054 2369     		ldr	r3, [r4, #16]
 109 0056 0133     		adds	r3, r3, #1
 110 0058 2361     		str	r3, [r4, #16]
 111              	.LVL8:
  23:Core/Src/devs/interrupt.cpp ****                         leg[0].reset_angle(leg0_reset_angle);
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 4


 112              		.loc 1 23 0
 113 005a 9FED4E0A 		vldr.32	s0, .L12+60
 114 005e 2046     		mov	r0, r4
 115              	.LVL9:
 116 0060 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 117              	.LVL10:
 118              	.LBB19:
 119              	.LBB20:
 120              		.file 2 "Core/Inc/devs/leg.h"
   1:Core/Inc/devs/leg.h **** #ifndef _LEG_H_
   2:Core/Inc/devs/leg.h **** #define _LEG_H_
   3:Core/Inc/devs/leg.h **** 
   4:Core/Inc/devs/leg.h **** #include "motor.h"
   5:Core/Inc/devs/leg.h **** #include "encoder.h"
   6:Core/Inc/devs/leg.h **** #include "pid.h"
   7:Core/Inc/devs/leg.h **** #include "limit_switch.h"
   8:Core/Inc/devs/leg.h **** #include "defines.h"
   9:Core/Inc/devs/leg.h **** #include "pid_algorithms.h"
  10:Core/Inc/devs/leg.h **** 
  11:Core/Inc/devs/leg.h **** enum Leg_condition{	RAISED, 
  12:Core/Inc/devs/leg.h **** 			FALLEN, 
  13:Core/Inc/devs/leg.h **** 			UNDEFINED};
  14:Core/Inc/devs/leg.h **** 
  15:Core/Inc/devs/leg.h **** class leg
  16:Core/Inc/devs/leg.h **** {
  17:Core/Inc/devs/leg.h **** public:
  18:Core/Inc/devs/leg.h **** 	leg() {}
  19:Core/Inc/devs/leg.h **** 	leg(leg &&) = default;
  20:Core/Inc/devs/leg.h **** 	leg(const leg &) = default;
  21:Core/Inc/devs/leg.h **** 	leg &operator=(leg &&) = default;
  22:Core/Inc/devs/leg.h **** 	leg &operator=(const leg &) = default;
  23:Core/Inc/devs/leg.h **** 	~leg(){}
  24:Core/Inc/devs/leg.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  25:Core/Inc/devs/leg.h **** 		motor__.set_config(motor);
  26:Core/Inc/devs/leg.h **** 		encoder__.set_config(encoder);
  27:Core/Inc/devs/leg.h **** 	}
  28:Core/Inc/devs/leg.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  29:Core/Inc/devs/leg.h **** 		dpid_.set_P(kp);
  30:Core/Inc/devs/leg.h **** 		dpid_.set_I(ki);
  31:Core/Inc/devs/leg.h **** 		dpid_.set_D(kd);
  32:Core/Inc/devs/leg.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  33:Core/Inc/devs/leg.h **** 	}
  34:Core/Inc/devs/leg.h **** 
  35:Core/Inc/devs/leg.h **** 	
  36:Core/Inc/devs/leg.h **** 	void set_omega(float omega);
  37:Core/Inc/devs/leg.h **** 	float ramp(float omega);
  38:Core/Inc/devs/leg.h **** 	void set_gravity_compensator_constant(float kbody, float kleg){kb_ = kbody; kl_ = kleg;}
  39:Core/Inc/devs/leg.h **** 	void reset_angle(float angle_in_radians);
  40:Core/Inc/devs/leg.h **** 	void reset_actual_angle(float angle_in_radians){encoder__.reset_actual_angle(angle_in_radians);}
  41:Core/Inc/devs/leg.h **** 	void calculate_omega();
  42:Core/Inc/devs/leg.h **** 	Leg_condition is_raised();
  43:Core/Inc/devs/leg.h **** 	bool is_raised_without_deadzone();
  44:Core/Inc/devs/leg.h **** 
  45:Core/Inc/devs/leg.h **** 	int get_steps(){return steps;}
  46:Core/Inc/devs/leg.h **** 	float get_omega(void){return encoder__.get_omega();}
  47:Core/Inc/devs/leg.h **** 	float get_angle(void){return encoder__.get_angle();}
  48:Core/Inc/devs/leg.h **** 	float get_actual_angle(void){return encoder__.get_actual_angle();}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 5


 121              		.loc 2 48 0
 122 0064 04F13C06 		add	r6, r4, #60
 123 0068 3046     		mov	r0, r6
 124 006a FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 125              	.LVL11:
 126              	.LBE20:
 127              	.LBE19:
  25:Core/Src/devs/interrupt.cpp **** 			int temp = round(leg[0].get_actual_angle()/ (360*PI/180));
 128              		.loc 1 25 0
 129 006e 10EE100A 		vmov	r0, s0
 130 0072 FFF7FEFF 		bl	__aeabi_f2d
 131              	.LVL12:
 132 0076 38A3     		adr	r3, .L12
 133 0078 D3E90023 		ldrd	r2, [r3]
 134 007c FFF7FEFF 		bl	__aeabi_ddiv
 135              	.LVL13:
 136 0080 41EC100B 		vmov	d0, r0, r1
 137 0084 FFF7FEFF 		bl	round
 138              	.LVL14:
 139 0088 51EC100B 		vmov	r0, r1, d0
 140 008c FFF7FEFF 		bl	__aeabi_d2iz
 141              	.LVL15:
 142 0090 0546     		mov	r5, r0
 143              	.LVL16:
  26:Core/Src/devs/interrupt.cpp **** 			leg[0].reset_actual_angle((int)(temp-1)*2*PI + leg0_reset_angle);
 144              		.loc 1 26 0
 145 0092 0138     		subs	r0, r0, #1
 146              	.LVL17:
 147 0094 4000     		lsls	r0, r0, #1
 148 0096 FFF7FEFF 		bl	__aeabi_i2d
 149              	.LVL18:
 150 009a 31A3     		adr	r3, .L12+8
 151 009c D3E90023 		ldrd	r2, [r3]
 152 00a0 FFF7FEFF 		bl	__aeabi_dmul
 153              	.LVL19:
 154 00a4 30A3     		adr	r3, .L12+16
 155 00a6 D3E90023 		ldrd	r2, [r3]
 156 00aa FFF7FEFF 		bl	__aeabi_dadd
 157              	.LVL20:
 158 00ae FFF7FEFF 		bl	__aeabi_d2f
 159              	.LVL21:
 160              	.LBB21:
 161              	.LBB22:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 162              		.loc 2 40 0
 163 00b2 00EE100A 		vmov	s0, r0
 164 00b6 3046     		mov	r0, r6
 165              	.LVL22:
 166 00b8 FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 167              	.LVL23:
 168              	.LBE22:
 169              	.LBE21:
  27:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt0\t %d \t %d\n", leg[0].steps, temp);
 170              		.loc 1 27 0
 171 00bc 2A46     		mov	r2, r5
 172 00be 2169     		ldr	r1, [r4, #16]
 173 00c0 3548     		ldr	r0, .L12+64
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 6


 174 00c2 FFF7FEFF 		bl	printf
 175              	.LVL24:
 176              	.LBE18:
  28:Core/Src/devs/interrupt.cpp ****                 } break;
 177              		.loc 1 28 0
 178 00c6 BCE7     		b	.L1
 179              	.LVL25:
 180              	.L7:
 181              	.LBB23:
  31:Core/Src/devs/interrupt.cpp ****                         leg[1].steps++;
 182              		.loc 1 31 0
 183 00c8 314C     		ldr	r4, .L12+56
 184 00ca E36E     		ldr	r3, [r4, #108]
 185 00cc 0133     		adds	r3, r3, #1
 186 00ce E366     		str	r3, [r4, #108]
 187              	.LVL26:
  33:Core/Src/devs/interrupt.cpp ****                         leg[1].reset_angle(leg1_reset_angle);
 188              		.loc 1 33 0
 189 00d0 9FED320A 		vldr.32	s0, .L12+68
 190 00d4 04F15C00 		add	r0, r4, #92
 191              	.LVL27:
 192 00d8 FFF7FEFF 		bl	_ZN3leg11reset_angleEf
 193              	.LVL28:
 194              	.LBB24:
 195              	.LBB25:
 196              		.loc 2 48 0
 197 00dc 04F19805 		add	r5, r4, #152
 198 00e0 2846     		mov	r0, r5
 199 00e2 FFF7FEFF 		bl	_ZN7encoder16get_actual_angleEv
 200              	.LVL29:
 201              	.LBE25:
 202              	.LBE24:
  35:Core/Src/devs/interrupt.cpp **** 			int temp = round(leg[1].get_actual_angle() / (360*PI/180));
 203              		.loc 1 35 0
 204 00e6 10EE100A 		vmov	r0, s0
 205 00ea FFF7FEFF 		bl	__aeabi_f2d
 206              	.LVL30:
 207 00ee 1AA3     		adr	r3, .L12
 208 00f0 D3E90023 		ldrd	r2, [r3]
 209 00f4 FFF7FEFF 		bl	__aeabi_ddiv
 210              	.LVL31:
 211 00f8 41EC100B 		vmov	d0, r0, r1
 212 00fc FFF7FEFF 		bl	round
 213              	.LVL32:
 214 0100 51EC100B 		vmov	r0, r1, d0
 215 0104 FFF7FEFF 		bl	__aeabi_d2iz
 216              	.LVL33:
  36:Core/Src/devs/interrupt.cpp **** 			leg[1].reset_actual_angle((int)(temp-1)*2*PI + leg1_reset_angle);
 217              		.loc 1 36 0
 218 0108 0138     		subs	r0, r0, #1
 219              	.LVL34:
 220 010a 4000     		lsls	r0, r0, #1
 221              	.LVL35:
 222 010c FFF7FEFF 		bl	__aeabi_i2d
 223              	.LVL36:
 224 0110 13A3     		adr	r3, .L12+8
 225 0112 D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 7


 226 0116 FFF7FEFF 		bl	__aeabi_dmul
 227              	.LVL37:
 228 011a 15A3     		adr	r3, .L12+24
 229 011c D3E90023 		ldrd	r2, [r3]
 230 0120 FFF7FEFF 		bl	__aeabi_dadd
 231              	.LVL38:
 232 0124 FFF7FEFF 		bl	__aeabi_d2f
 233              	.LVL39:
 234              	.LBB26:
 235              	.LBB27:
  40:Core/Inc/devs/leg.h **** 	void calculate_omega();
 236              		.loc 2 40 0
 237 0128 00EE100A 		vmov	s0, r0
 238 012c 2846     		mov	r0, r5
 239              	.LVL40:
 240 012e FFF7FEFF 		bl	_ZN7encoder18reset_actual_angleEf
 241              	.LVL41:
 242              	.LBE27:
 243              	.LBE26:
  37:Core/Src/devs/interrupt.cpp **** 			printf("\n\n\t\t\tRobot interrupt1\t %d\n", leg[1].steps);
 244              		.loc 1 37 0
 245 0132 E16E     		ldr	r1, [r4, #108]
 246 0134 1A48     		ldr	r0, .L12+72
 247 0136 FFF7FEFF 		bl	printf
 248              	.LVL42:
 249              	.LBE23:
  38:Core/Src/devs/interrupt.cpp ****                 } break;
 250              		.loc 1 38 0
 251 013a 82E7     		b	.L1
 252              	.LVL43:
 253              	.L8:
  41:Core/Src/devs/interrupt.cpp **** 			STEERING_FLAG = true;
 254              		.loc 1 41 0
 255 013c 194B     		ldr	r3, .L12+76
 256 013e 0122     		movs	r2, #1
 257 0140 1A70     		strb	r2, [r3]
 258              	.LVL44:
 259              	.LBB28:
 260              	.LBB29:
 261              		.file 3 "Core/Inc/devs/steering.h"
   1:Core/Inc/devs/steering.h **** /**
   2:Core/Inc/devs/steering.h ****  * steering.h
   3:Core/Inc/devs/steering.h ****  *
   4:Core/Inc/devs/steering.h ****  * \brief Provide control over steering of the horse
   5:Core/Inc/devs/steering.h ****  *
   6:Core/Inc/devs/steering.h ****  * This file is meant as an wrapper to the elements in the encoder. 
   7:Core/Inc/devs/steering.h ****  * It uses the functions of other headers (ie motor.h, encoder.h, 
   8:Core/Inc/devs/steering.h ****  * limit_switch.h and pid.h tocontrol all the functions available 
   9:Core/Inc/devs/steering.h ****  * in the steering.
  10:Core/Inc/devs/steering.h ****  *
  11:Core/Inc/devs/steering.h ****  * \author 	$Author 	: Prashant_Bhatta
  12:Core/Inc/devs/steering.h ****  * \date 	$Date		: 2005/04/14 14:16:20 $
  13:Core/Inc/devs/steering.h ****  * \contact	$Contact	: 073bex425.prashant@pcampus.edu.np
  14:Core/Inc/devs/steering.h ****  *
  15:Core/Inc/devs/steering.h ****  */
  16:Core/Inc/devs/steering.h **** #ifndef _STEERING_H_
  17:Core/Inc/devs/steering.h **** #define _STEERING_H_
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 8


  18:Core/Inc/devs/steering.h **** 
  19:Core/Inc/devs/steering.h **** #include "motor.h"
  20:Core/Inc/devs/steering.h **** #include "encoder.h"
  21:Core/Inc/devs/steering.h **** #include "pid.h"
  22:Core/Inc/devs/steering.h **** #include "limit_switch.h"
  23:Core/Inc/devs/steering.h **** 
  24:Core/Inc/devs/steering.h **** class steering
  25:Core/Inc/devs/steering.h **** {
  26:Core/Inc/devs/steering.h **** public:
  27:Core/Inc/devs/steering.h **** 	/// These lines of codes are just for protection of random defination of the objects.
  28:Core/Inc/devs/steering.h **** 	steering(){}
  29:Core/Inc/devs/steering.h **** 	steering(steering &&) = default;
  30:Core/Inc/devs/steering.h **** 	steering(const steering &) = default;
  31:Core/Inc/devs/steering.h **** 	steering &operator=(steering &&) = default;
  32:Core/Inc/devs/steering.h **** 	steering &operator=(const steering &) = default;
  33:Core/Inc/devs/steering.h **** 	~steering(){}
  34:Core/Inc/devs/steering.h **** 
  35:Core/Inc/devs/steering.h **** 	/**
  36:Core/Inc/devs/steering.h **** 	 * \brief This function setups the configurations for the steering
  37:Core/Inc/devs/steering.h **** 	 * \param motor: pointer to motor_config which contains all the 
  38:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor
  39:Core/Inc/devs/steering.h **** 	 * \param encoder: pointer to encoder_config which contains all the 
  40:Core/Inc/devs/steering.h **** 	 * 		configurations for a motor  
  41:Core/Inc/devs/steering.h **** 	 * \return void
  42:Core/Inc/devs/steering.h **** 	 */
  43:Core/Inc/devs/steering.h ****         void set_config(motor_config *motor, encoder_config *encoder) { 
  44:Core/Inc/devs/steering.h **** 		motor__.set_config(motor);
  45:Core/Inc/devs/steering.h **** 		encoder__.set_config(encoder);
  46:Core/Inc/devs/steering.h **** 	}
  47:Core/Inc/devs/steering.h **** 
  48:Core/Inc/devs/steering.h **** 	/**
  49:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for PID algorithm
  50:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for PID
  51:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  52:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  53:Core/Inc/devs/steering.h **** 	 * \return void
  54:Core/Inc/devs/steering.h **** 	 */
  55:Core/Inc/devs/steering.h **** 	void set_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  56:Core/Inc/devs/steering.h **** 		dpid_.set_P(kp);
  57:Core/Inc/devs/steering.h **** 		dpid_.set_I(ki);
  58:Core/Inc/devs/steering.h **** 		dpid_.set_D(kd);
  59:Core/Inc/devs/steering.h **** 		dpid_.set_Limits(upper_limit, lower_limit);
  60:Core/Inc/devs/steering.h **** 	}
  61:Core/Inc/devs/steering.h **** 
  62:Core/Inc/devs/steering.h **** 	/**
  63:Core/Inc/devs/steering.h **** 	 * \brief Sets constants for Angle_PID algorithm
  64:Core/Inc/devs/steering.h **** 	 * \param kp,ki,kd: constants for Anggle_PID
  65:Core/Inc/devs/steering.h **** 	 * \param lower_limit, upper_limit: These are the maximum output a motor 
  66:Core/Inc/devs/steering.h **** 	 * 	   can give with gear reduction(in omegas)
  67:Core/Inc/devs/steering.h **** 	 * \return void
  68:Core/Inc/devs/steering.h **** 	 */
  69:Core/Inc/devs/steering.h **** 	void set_angle_PID_constants(float kp, float ki, float kd, float lower_limit, float upper_limit) {
  70:Core/Inc/devs/steering.h **** 		apid_.set_P(kp);
  71:Core/Inc/devs/steering.h **** 		apid_.set_I(ki);
  72:Core/Inc/devs/steering.h **** 		apid_.set_D(kd);
  73:Core/Inc/devs/steering.h **** 		apid_.set_Limits(upper_limit, lower_limit);
  74:Core/Inc/devs/steering.h **** 	}
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 9


  75:Core/Inc/devs/steering.h **** 
  76:Core/Inc/devs/steering.h **** 
  77:Core/Inc/devs/steering.h **** 	/** 
  78:Core/Inc/devs/steering.h **** 	 * \brief sets omega for the steering
  79:Core/Inc/devs/steering.h **** 	 * 
  80:Core/Inc/devs/steering.h **** 	 */
  81:Core/Inc/devs/steering.h **** 	void set_omega(float omega);
  82:Core/Inc/devs/steering.h **** 
  83:Core/Inc/devs/steering.h **** 	/** 
  84:Core/Inc/devs/steering.h **** 	 * \brief sets angle for the steering
  85:Core/Inc/devs/steering.h **** 	 * 
  86:Core/Inc/devs/steering.h **** 	 */
  87:Core/Inc/devs/steering.h **** 	void set_angle(float angle);
  88:Core/Inc/devs/steering.h **** 
  89:Core/Inc/devs/steering.h **** 	/**
  90:Core/Inc/devs/steering.h **** 	 * \brief resets the angle provided by the encoder
  91:Core/Inc/devs/steering.h **** 	 * \param angle_in_radian at which it is to be reset
  92:Core/Inc/devs/steering.h **** 	 * \return void
  93:Core/Inc/devs/steering.h **** 	 */
  94:Core/Inc/devs/steering.h **** 	void reset_angle(float angle_in_radians) {encoder__.reset_angle(angle_in_radians);}
 262              		.loc 3 94 0
 263 0142 9FED190A 		vldr.32	s0, .L12+80
 264 0146 1948     		ldr	r0, .L12+84
 265              	.LVL45:
 266 0148 FFF7FEFF 		bl	_ZN7encoder11reset_angleEf
 267              	.LVL46:
 268              	.LBE29:
 269              	.LBE28:
  43:Core/Src/devs/interrupt.cpp **** 			 printf("\n\n\t\t\tsteering interrupt \t\n");
 270              		.loc 1 43 0
 271 014c 1848     		ldr	r0, .L12+88
 272 014e FFF7FEFF 		bl	puts
 273              	.LVL47:
  44:Core/Src/devs/interrupt.cpp ****                 } break;
 274              		.loc 1 44 0
 275 0152 76E7     		b	.L1
 276              	.L13:
 277 0154 AFF30080 		.align	3
 278              	.L12:
 279 0158 182D4454 		.word	1413754136
 280 015c FB211940 		.word	1075388923
 281 0160 182D4454 		.word	1413754136
 282 0164 FB210940 		.word	1074340347
 283 0168 000000C0 		.word	-1073741824
 284 016c A6F11440 		.word	1075114406
 285 0170 00000000 		.word	0
 286 0174 EE3E1440 		.word	1075068654
 287 0178 00000000 		.word	FRONT_PROXIMITY_FLAG
 288 017c 74000000 		.word	.LC4
 289 0180 00000000 		.word	BACK_PROXIMITY_FLAG
 290 0184 9C000000 		.word	.LC5
 291 0188 00000000 		.word	ROBOT_START_FLAG
 292 018c 00000000 		.word	.LC0
 293 0190 00000000 		.word	leg
 294 0194 368DA740 		.word	1084722486
 295 0198 1C000000 		.word	.LC1
 296 019c 70F7A140 		.word	1084356464
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 10


 297 01a0 3C000000 		.word	.LC2
 298 01a4 00000000 		.word	STEERING_FLAG
 299 01a8 172B483C 		.word	1011362583
 300 01ac 0C000000 		.word	steering+12
 301 01b0 58000000 		.word	.LC3
 302              	.LBE30:
 303              	.LBE31:
 304              		.cfi_endproc
 305              	.LFE492:
 307              		.section	.rodata.HAL_GPIO_EXTI_Callback.str1.4,"aMS",%progbits,1
 308              		.align	2
 309              	.LC0:
 310 0000 0A0A0909 		.ascii	"\012\012\011\011\011 !!start_pressed!!\012\000"
 310      09202121 
 310      73746172 
 310      745F7072 
 310      65737365 
 311 0019 000000   		.space	3
 312              	.LC1:
 313 001c 0A0A0909 		.ascii	"\012\012\011\011\011Robot interrupt0\011 %d \011 %d"
 313      09526F62 
 313      6F742069 
 313      6E746572 
 313      72757074 
 314 003a 0A00     		.ascii	"\012\000"
 315              	.LC2:
 316 003c 0A0A0909 		.ascii	"\012\012\011\011\011Robot interrupt1\011 %d\012\000"
 316      09526F62 
 316      6F742069 
 316      6E746572 
 316      72757074 
 317 0057 00       		.space	1
 318              	.LC3:
 319 0058 0A0A0909 		.ascii	"\012\012\011\011\011steering interrupt \011\000"
 319      09737465 
 319      6572696E 
 319      6720696E 
 319      74657272 
 320 0072 0000     		.space	2
 321              	.LC4:
 322 0074 0A0A0909 		.ascii	"\012\012\011\011\011FRONT_PROXIMITY_FLAG interrupt "
 322      0946524F 
 322      4E545F50 
 322      524F5849 
 322      4D495459 
 323 0098 0900     		.ascii	"\011\000"
 324 009a 0000     		.space	2
 325              	.LC5:
 326 009c 0A0A0909 		.ascii	"\012\012\011\011\011BACK_PROXIMITY_FLAG interrupt \011"
 326      09424143 
 326      4B5F5052 
 326      4F58494D 
 326      4954595F 
 327 00c0 00       		.ascii	"\000"
 328              		.text
 329              	.Letext0:
 330              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 11


 331              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 332              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 333              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 334              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 335              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 336              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 337              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 338              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 339              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 340              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 341              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 342              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 343              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 344              		.file 18 "Core/Inc/periphs/tim.h"
 345              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 346              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 347              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 348              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 349              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 350              		.file 24 "Core/Inc/devs/motor.h"
 351              		.file 25 "Core/Inc/devs/encoder.h"
 352              		.file 26 "Core/Inc/utils/pid_algorithms.h"
 353              		.file 27 "Core/Inc/devs/limit_switch.h"
 354              		.file 28 "Core/Inc/periphs/usart.h"
 355              		.file 29 "Core/Inc/periphs/adc.h"
 356              		.file 30 "<built-in>"
 357              		.file 31 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
ARM GAS  C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 interrupt.cpp
C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s:25     .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s:32     .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s:279    .text.HAL_GPIO_EXTI_Callback:00000158 $d
C:\Users\Prashant\AppData\Local\Temp\cczEJgDn.s:308    .rodata.HAL_GPIO_EXTI_Callback.str1.4:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
puts
_ZN3leg11reset_angleEf
_ZN7encoder16get_actual_angleEv
round
_ZN7encoder18reset_actual_angleEf
printf
_ZN7encoder11reset_angleEf
FRONT_PROXIMITY_FLAG
BACK_PROXIMITY_FLAG
ROBOT_START_FLAG
leg
STEERING_FLAG
steering
